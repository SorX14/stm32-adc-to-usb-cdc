
Automatic Data Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800c4b0  0800c4b0  0001c4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c904  0800c904  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c904  0800c904  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c904  0800c904  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c904  0800c904  0001c904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c908  0800c908  0001c908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800c90c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000128c  2000034c  0800cc58  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d8  0800cc58  000215d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001056e  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000331f  00000000  00000000  000308e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00033c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00034968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b071  00000000  00000000  00035530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b3b  00000000  00000000  000505a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b50d  00000000  00000000  000620dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed5e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045ac  00000000  00000000  000ed63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000034c 	.word	0x2000034c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c498 	.word	0x0800c498

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000350 	.word	0x20000350
 800014c:	0800c498 	.word	0x0800c498

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <HAL_ADC_ConvCpltCallback>:
  CDC_Transmit_FS(data, length);
}

// This is called when the ADC finishes reading something
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	ready_counter++;
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_ADC_ConvCpltCallback+0x34>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	3301      	adds	r3, #1
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_ADC_ConvCpltCallback+0x34>)
 8000a9a:	701a      	strb	r2, [r3, #0]
	if (ready_counter >= 3) {
 8000a9c:	4b07      	ldr	r3, [pc, #28]	; (8000abc <HAL_ADC_ConvCpltCallback+0x34>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d905      	bls.n	8000ab0 <HAL_ADC_ConvCpltCallback+0x28>
		ready = 1;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_ADC_ConvCpltCallback+0x38>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
		ready_counter = 0;
 8000aaa:	4b04      	ldr	r3, [pc, #16]	; (8000abc <HAL_ADC_ConvCpltCallback+0x34>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
	}
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	200003e8 	.word	0x200003e8
 8000ac0:	200003e9 	.word	0x200003e9

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	; 0x30
 8000ac8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aca:	f000 fb6f 	bl	80011ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ace:	f000 f86f 	bl	8000bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad2:	f000 f945 	bl	8000d60 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ad6:	f000 f925 	bl	8000d24 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ada:	f000 f8c7 	bl	8000c6c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000ade:	f008 f91f 	bl	8008d20 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Calibrate ADC1
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000ae2:	482d      	ldr	r0, [pc, #180]	; (8000b98 <main+0xd4>)
 8000ae4:	f001 f852 	bl	8001b8c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_value, 3);
 8000ae8:	2203      	movs	r2, #3
 8000aea:	492c      	ldr	r1, [pc, #176]	; (8000b9c <main+0xd8>)
 8000aec:	482a      	ldr	r0, [pc, #168]	; (8000b98 <main+0xd4>)
 8000aee:	f000 fc97 	bl	8001420 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //printf("Starting");

  uint8_t toggler = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  while (1)
  {
	  uint8_t dev_state = hUsbDeviceFS.dev_state;
 8000af8:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <main+0xdc>)
 8000afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8000afe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	  if (dev_state == USBD_STATE_CONFIGURED && ready) {
 8000b02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	d1f6      	bne.n	8000af8 <main+0x34>
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <main+0xe0>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0f2      	beq.n	8000af8 <main+0x34>
		  ready = 0;
 8000b12:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <main+0xe0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
		  // As we're using DMA, the variables will be populated for us in the background

		  // Create a string to send to the host
		  char adc_readings[32] = "";
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
 8000b2c:	615a      	str	r2, [r3, #20]
 8000b2e:	619a      	str	r2, [r3, #24]
		  snprintf(
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <main+0xd8>)
 8000b32:	6819      	ldr	r1, [r3, #0]
 8000b34:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <main+0xd8>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	4a18      	ldr	r2, [pc, #96]	; (8000b9c <main+0xd8>)
 8000b3a:	6892      	ldr	r2, [r2, #8]
 8000b3c:	1d38      	adds	r0, r7, #4
 8000b3e:	9201      	str	r2, [sp, #4]
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	460b      	mov	r3, r1
 8000b44:	4a18      	ldr	r2, [pc, #96]	; (8000ba8 <main+0xe4>)
 8000b46:	2120      	movs	r1, #32
 8000b48:	f009 fa18 	bl	8009f7c <sniprintf>
//			  adc_to_voltage(adc_value[1]),
//			  adc_to_voltage(adc_value[2])
		  );

		  // Send reading over USB-CDC connection
		  CDC_Transmit_FS((uint8_t*) adc_readings, strlen(adc_readings));
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fafe 	bl	8000150 <strlen>
 8000b54:	4603      	mov	r3, r0
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f008 f99d 	bl	8008e9c <CDC_Transmit_FS>
		  //CDC_Transmit_FS((uint8_t*) "hello\r\n", 7U);

		  toggler = !toggler;
 8000b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	bf0c      	ite	eq
 8000b6a:	2301      	moveq	r3, #1
 8000b6c:	2300      	movne	r3, #0
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		  if (toggler) {
 8000b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d006      	beq.n	8000b8a <main+0xc6>
			  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b82:	480a      	ldr	r0, [pc, #40]	; (8000bac <main+0xe8>)
 8000b84:	f001 fd38 	bl	80025f8 <HAL_GPIO_WritePin>
 8000b88:	e7b6      	b.n	8000af8 <main+0x34>
		  } else {
			  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b90:	4806      	ldr	r0, [pc, #24]	; (8000bac <main+0xe8>)
 8000b92:	f001 fd31 	bl	80025f8 <HAL_GPIO_WritePin>
  {
 8000b96:	e7af      	b.n	8000af8 <main+0x34>
 8000b98:	20000368 	.word	0x20000368
 8000b9c:	200003dc 	.word	0x200003dc
 8000ba0:	200003f8 	.word	0x200003f8
 8000ba4:	200003e9 	.word	0x200003e9
 8000ba8:	0800c4b0 	.word	0x0800c4b0
 8000bac:	40011000 	.word	0x40011000

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b094      	sub	sp, #80	; 0x50
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bba:	2228      	movs	r2, #40	; 0x28
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f008 fd74 	bl	80096ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000be0:	2301      	movs	r3, #1
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000be4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bfc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 f9d2 	bl	8003fb0 <HAL_RCC_OscConfig>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c12:	f000 f8f1 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c16:	230f      	movs	r3, #15
 8000c18:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2102      	movs	r1, #2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 fc3e 	bl	80044b4 <HAL_RCC_ClockConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c3e:	f000 f8db 	bl	8000df8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000c42:	2312      	movs	r3, #18
 8000c44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c4a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	4618      	mov	r0, r3
 8000c54:	f003 fdb2 	bl	80047bc <HAL_RCCEx_PeriphCLKConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000c5e:	f000 f8cb 	bl	8000df8 <Error_Handler>
  }
}
 8000c62:	bf00      	nop
 8000c64:	3750      	adds	r7, #80	; 0x50
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c7c:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <MX_ADC1_Init+0xb0>)
 8000c7e:	4a28      	ldr	r2, [pc, #160]	; (8000d20 <MX_ADC1_Init+0xb4>)
 8000c80:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000c82:	4b26      	ldr	r3, [pc, #152]	; (8000d1c <MX_ADC1_Init+0xb0>)
 8000c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c8a:	4b24      	ldr	r3, [pc, #144]	; (8000d1c <MX_ADC1_Init+0xb0>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <MX_ADC1_Init+0xb0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_ADC1_Init+0xb0>)
 8000c98:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_ADC1_Init+0xb0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_ADC1_Init+0xb0>)
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000caa:	481c      	ldr	r0, [pc, #112]	; (8000d1c <MX_ADC1_Init+0xb0>)
 8000cac:	f000 fae0 	bl	8001270 <HAL_ADC_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000cb6:	f000 f89f 	bl	8000df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000cc2:	2307      	movs	r3, #7
 8000cc4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4814      	ldr	r0, [pc, #80]	; (8000d1c <MX_ADC1_Init+0xb0>)
 8000ccc:	f000 fd64 	bl	8001798 <HAL_ADC_ConfigChannel>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cd6:	f000 f88f 	bl	8000df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <MX_ADC1_Init+0xb0>)
 8000ce8:	f000 fd56 	bl	8001798 <HAL_ADC_ConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000cf2:	f000 f881 	bl	8000df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4619      	mov	r1, r3
 8000d02:	4806      	ldr	r0, [pc, #24]	; (8000d1c <MX_ADC1_Init+0xb0>)
 8000d04:	f000 fd48 	bl	8001798 <HAL_ADC_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d0e:	f000 f873 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000368 	.word	0x20000368
 8000d20:	40012400 	.word	0x40012400

08000d24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_DMA_Init+0x38>)
 8000d2c:	695b      	ldr	r3, [r3, #20]
 8000d2e:	4a0b      	ldr	r2, [pc, #44]	; (8000d5c <MX_DMA_Init+0x38>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6153      	str	r3, [r2, #20]
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_DMA_Init+0x38>)
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	200b      	movs	r0, #11
 8000d48:	f001 f8ad 	bl	8001ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d4c:	200b      	movs	r0, #11
 8000d4e:	f001 f8c6 	bl	8001ede <HAL_NVIC_EnableIRQ>

}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000

08000d60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d74:	4b1e      	ldr	r3, [pc, #120]	; (8000df0 <MX_GPIO_Init+0x90>)
 8000d76:	699b      	ldr	r3, [r3, #24]
 8000d78:	4a1d      	ldr	r2, [pc, #116]	; (8000df0 <MX_GPIO_Init+0x90>)
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	6193      	str	r3, [r2, #24]
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_GPIO_Init+0x90>)
 8000d82:	699b      	ldr	r3, [r3, #24]
 8000d84:	f003 0310 	and.w	r3, r3, #16
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <MX_GPIO_Init+0x90>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <MX_GPIO_Init+0x90>)
 8000d92:	f043 0320 	orr.w	r3, r3, #32
 8000d96:	6193      	str	r3, [r2, #24]
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <MX_GPIO_Init+0x90>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f003 0320 	and.w	r3, r3, #32
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_GPIO_Init+0x90>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a11      	ldr	r2, [pc, #68]	; (8000df0 <MX_GPIO_Init+0x90>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_GPIO_Init+0x90>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc2:	480c      	ldr	r0, [pc, #48]	; (8000df4 <MX_GPIO_Init+0x94>)
 8000dc4:	f001 fc18 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_LED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin;
 8000dc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4619      	mov	r1, r3
 8000de0:	4804      	ldr	r0, [pc, #16]	; (8000df4 <MX_GPIO_Init+0x94>)
 8000de2:	f001 fa85 	bl	80022f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de6:	bf00      	nop
 8000de8:	3720      	adds	r7, #32
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40011000 	.word	0x40011000

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <Error_Handler+0x8>
	...

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6193      	str	r3, [r2, #24]
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_MspInit+0x60>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_MspInit+0x60>)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010000 	.word	0x40010000

08000e68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0310 	add.w	r3, r7, #16
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a2c      	ldr	r2, [pc, #176]	; (8000f34 <HAL_ADC_MspInit+0xcc>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d151      	bne.n	8000f2c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e88:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <HAL_ADC_MspInit+0xd0>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a2a      	ldr	r2, [pc, #168]	; (8000f38 <HAL_ADC_MspInit+0xd0>)
 8000e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <HAL_ADC_MspInit+0xd0>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b25      	ldr	r3, [pc, #148]	; (8000f38 <HAL_ADC_MspInit+0xd0>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a24      	ldr	r2, [pc, #144]	; (8000f38 <HAL_ADC_MspInit+0xd0>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <HAL_ADC_MspInit+0xd0>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000eb8:	2338      	movs	r3, #56	; 0x38
 8000eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	481d      	ldr	r0, [pc, #116]	; (8000f3c <HAL_ADC_MspInit+0xd4>)
 8000ec8:	f001 fa12 	bl	80022f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <HAL_ADC_MspInit+0xd8>)
 8000ece:	4a1d      	ldr	r2, [pc, #116]	; (8000f44 <HAL_ADC_MspInit+0xdc>)
 8000ed0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <HAL_ADC_MspInit+0xd8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_ADC_MspInit+0xd8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <HAL_ADC_MspInit+0xd8>)
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <HAL_ADC_MspInit+0xd8>)
 8000ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eea:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <HAL_ADC_MspInit+0xd8>)
 8000eee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ef2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_ADC_MspInit+0xd8>)
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <HAL_ADC_MspInit+0xd8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f00:	480f      	ldr	r0, [pc, #60]	; (8000f40 <HAL_ADC_MspInit+0xd8>)
 8000f02:	f001 f807 	bl	8001f14 <HAL_DMA_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000f0c:	f7ff ff74 	bl	8000df8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a0b      	ldr	r2, [pc, #44]	; (8000f40 <HAL_ADC_MspInit+0xd8>)
 8000f14:	621a      	str	r2, [r3, #32]
 8000f16:	4a0a      	ldr	r2, [pc, #40]	; (8000f40 <HAL_ADC_MspInit+0xd8>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2012      	movs	r0, #18
 8000f22:	f000 ffc0 	bl	8001ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000f26:	2012      	movs	r0, #18
 8000f28:	f000 ffd9 	bl	8001ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40012400 	.word	0x40012400
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	20000398 	.word	0x20000398
 8000f44:	40020008 	.word	0x40020008

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <NMI_Handler+0x4>

08000f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f52:	e7fe      	b.n	8000f52 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <BusFault_Handler+0x4>

08000f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <UsageFault_Handler+0x4>

08000f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr

08000f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr

08000f8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8e:	f000 f953 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <DMA1_Channel1_IRQHandler+0x10>)
 8000f9e:	f001 f873 	bl	8002088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000398 	.word	0x20000398

08000fac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <ADC1_2_IRQHandler+0x10>)
 8000fb2:	f000 fb13 	bl	80015dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000368 	.word	0x20000368

08000fc0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000fc6:	f001 fc60 	bl	800288a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200010bc 	.word	0x200010bc

08000fd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return 1;
 8000fd8:	2301      	movs	r3, #1
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr

08000fe2 <_kill>:

int _kill(int pid, int sig)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fec:	f008 fb34 	bl	8009658 <__errno>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2216      	movs	r2, #22
 8000ff4:	601a      	str	r2, [r3, #0]
  return -1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <_exit>:

void _exit (int status)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800100a:	f04f 31ff 	mov.w	r1, #4294967295
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffe7 	bl	8000fe2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001014:	e7fe      	b.n	8001014 <_exit+0x12>

08001016 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e00a      	b.n	800103e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001028:	f3af 8000 	nop.w
 800102c:	4601      	mov	r1, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	60ba      	str	r2, [r7, #8]
 8001034:	b2ca      	uxtb	r2, r1
 8001036:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3301      	adds	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	429a      	cmp	r2, r3
 8001044:	dbf0      	blt.n	8001028 <_read+0x12>
  }

  return len;
 8001046:	687b      	ldr	r3, [r7, #4]
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	e009      	b.n	8001076 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1c5a      	adds	r2, r3, #1
 8001066:	60ba      	str	r2, [r7, #8]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	3301      	adds	r3, #1
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	dbf1      	blt.n	8001062 <_write+0x12>
  }
  return len;
 800107e:	687b      	ldr	r3, [r7, #4]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_close>:

int _close(int file)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ae:	605a      	str	r2, [r3, #4]
  return 0;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <_isatty>:

int _isatty(int file)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010c4:	2301      	movs	r3, #1
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <_sbrk+0x5c>)
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <_sbrk+0x60>)
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <_sbrk+0x64>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <_sbrk+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001118:	f008 fa9e 	bl	8009658 <__errno>
 800111c:	4603      	mov	r3, r0
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	e009      	b.n	800113c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <_sbrk+0x64>)
 8001138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20005000 	.word	0x20005000
 8001148:	00000400 	.word	0x00000400
 800114c:	200003ec 	.word	0x200003ec
 8001150:	200015d8 	.word	0x200015d8

08001154 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr

08001160 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001162:	490d      	ldr	r1, [pc, #52]	; (8001198 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001164:	4a0d      	ldr	r2, [pc, #52]	; (800119c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001178:	4c0a      	ldr	r4, [pc, #40]	; (80011a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001186:	f7ff ffe5 	bl	8001154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118a:	f008 fa6b 	bl	8009664 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800118e:	f7ff fc99 	bl	8000ac4 <main>
  bx lr
 8001192:	4770      	bx	lr
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 800119c:	0800c90c 	.word	0x0800c90c
  ldr r2, =_sbss
 80011a0:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 80011a4:	200015d8 	.word	0x200015d8

080011a8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <CAN1_RX1_IRQHandler>
	...

080011ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_Init+0x28>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_Init+0x28>)
 80011b6:	f043 0310 	orr.w	r3, r3, #16
 80011ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 fe67 	bl	8001e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011c2:	200f      	movs	r0, #15
 80011c4:	f000 f808 	bl	80011d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c8:	f7ff fe1c 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40022000 	.word	0x40022000

080011d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_InitTick+0x54>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <HAL_InitTick+0x58>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fe7f 	bl	8001efa <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e00e      	b.n	8001224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d80a      	bhi.n	8001222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f000 fe47 	bl	8001ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001218:	4a06      	ldr	r2, [pc, #24]	; (8001234 <HAL_InitTick+0x5c>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000000 	.word	0x20000000
 8001230:	20000008 	.word	0x20000008
 8001234:	20000004 	.word	0x20000004

08001238 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <HAL_IncTick+0x1c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_IncTick+0x20>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a03      	ldr	r2, [pc, #12]	; (8001258 <HAL_IncTick+0x20>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	20000008 	.word	0x20000008
 8001258:	200003f0 	.word	0x200003f0

0800125c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b02      	ldr	r3, [pc, #8]	; (800126c <HAL_GetTick+0x10>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	200003f0 	.word	0x200003f0

08001270 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e0be      	b.n	8001410 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129c:	2b00      	cmp	r3, #0
 800129e:	d109      	bne.n	80012b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fdda 	bl	8000e68 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 fbc1 	bl	8001a3c <ADC_ConversionStop_Disable>
 80012ba:	4603      	mov	r3, r0
 80012bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c2:	f003 0310 	and.w	r3, r3, #16
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f040 8099 	bne.w	80013fe <HAL_ADC_Init+0x18e>
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f040 8095 	bne.w	80013fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012dc:	f023 0302 	bic.w	r3, r3, #2
 80012e0:	f043 0202 	orr.w	r2, r3, #2
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	7b1b      	ldrb	r3, [r3, #12]
 80012f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001308:	d003      	beq.n	8001312 <HAL_ADC_Init+0xa2>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d102      	bne.n	8001318 <HAL_ADC_Init+0xa8>
 8001312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001316:	e000      	b.n	800131a <HAL_ADC_Init+0xaa>
 8001318:	2300      	movs	r3, #0
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7d1b      	ldrb	r3, [r3, #20]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d119      	bne.n	800135c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7b1b      	ldrb	r3, [r3, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d109      	bne.n	8001344 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	3b01      	subs	r3, #1
 8001336:	035a      	lsls	r2, r3, #13
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	e00b      	b.n	800135c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001348:	f043 0220 	orr.w	r2, r3, #32
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	f043 0201 	orr.w	r2, r3, #1
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	430a      	orrs	r2, r1
 800136e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	4b28      	ldr	r3, [pc, #160]	; (8001418 <HAL_ADC_Init+0x1a8>)
 8001378:	4013      	ands	r3, r2
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	6812      	ldr	r2, [r2, #0]
 800137e:	68b9      	ldr	r1, [r7, #8]
 8001380:	430b      	orrs	r3, r1
 8001382:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800138c:	d003      	beq.n	8001396 <HAL_ADC_Init+0x126>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d104      	bne.n	80013a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	3b01      	subs	r3, #1
 800139c:	051b      	lsls	r3, r3, #20
 800139e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_ADC_Init+0x1ac>)
 80013bc:	4013      	ands	r3, r2
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d10b      	bne.n	80013dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	f023 0303 	bic.w	r3, r3, #3
 80013d2:	f043 0201 	orr.w	r2, r3, #1
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013da:	e018      	b.n	800140e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	f023 0312 	bic.w	r3, r3, #18
 80013e4:	f043 0210 	orr.w	r2, r3, #16
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f0:	f043 0201 	orr.w	r2, r3, #1
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013fc:	e007      	b.n	800140e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001402:	f043 0210 	orr.w	r2, r3, #16
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800140e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	ffe1f7fd 	.word	0xffe1f7fd
 800141c:	ff1f0efe 	.word	0xff1f0efe

08001420 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a64      	ldr	r2, [pc, #400]	; (80015c8 <HAL_ADC_Start_DMA+0x1a8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d004      	beq.n	8001444 <HAL_ADC_Start_DMA+0x24>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a63      	ldr	r2, [pc, #396]	; (80015cc <HAL_ADC_Start_DMA+0x1ac>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d106      	bne.n	8001452 <HAL_ADC_Start_DMA+0x32>
 8001444:	4b60      	ldr	r3, [pc, #384]	; (80015c8 <HAL_ADC_Start_DMA+0x1a8>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800144c:	2b00      	cmp	r3, #0
 800144e:	f040 80b3 	bne.w	80015b8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_ADC_Start_DMA+0x40>
 800145c:	2302      	movs	r3, #2
 800145e:	e0ae      	b.n	80015be <HAL_ADC_Start_DMA+0x19e>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 fa8d 	bl	8001988 <ADC_Enable>
 800146e:	4603      	mov	r3, r0
 8001470:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001472:	7dfb      	ldrb	r3, [r7, #23]
 8001474:	2b00      	cmp	r3, #0
 8001476:	f040 809a 	bne.w	80015ae <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001482:	f023 0301 	bic.w	r3, r3, #1
 8001486:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a4e      	ldr	r2, [pc, #312]	; (80015cc <HAL_ADC_Start_DMA+0x1ac>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d105      	bne.n	80014a4 <HAL_ADC_Start_DMA+0x84>
 8001498:	4b4b      	ldr	r3, [pc, #300]	; (80015c8 <HAL_ADC_Start_DMA+0x1a8>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d115      	bne.n	80014d0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d026      	beq.n	800150c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014ce:	e01d      	b.n	800150c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a39      	ldr	r2, [pc, #228]	; (80015c8 <HAL_ADC_Start_DMA+0x1a8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d004      	beq.n	80014f0 <HAL_ADC_Start_DMA+0xd0>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a38      	ldr	r2, [pc, #224]	; (80015cc <HAL_ADC_Start_DMA+0x1ac>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d10d      	bne.n	800150c <HAL_ADC_Start_DMA+0xec>
 80014f0:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <HAL_ADC_Start_DMA+0x1a8>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d007      	beq.n	800150c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001504:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d006      	beq.n	8001526 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	f023 0206 	bic.w	r2, r3, #6
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
 8001524:	e002      	b.n	800152c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4a25      	ldr	r2, [pc, #148]	; (80015d0 <HAL_ADC_Start_DMA+0x1b0>)
 800153a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	4a24      	ldr	r2, [pc, #144]	; (80015d4 <HAL_ADC_Start_DMA+0x1b4>)
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4a23      	ldr	r2, [pc, #140]	; (80015d8 <HAL_ADC_Start_DMA+0x1b8>)
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f06f 0202 	mvn.w	r2, #2
 8001554:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001564:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6a18      	ldr	r0, [r3, #32]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	334c      	adds	r3, #76	; 0x4c
 8001570:	4619      	mov	r1, r3
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f000 fd27 	bl	8001fc8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001584:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001588:	d108      	bne.n	800159c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001598:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800159a:	e00f      	b.n	80015bc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80015aa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80015ac:	e006      	b.n	80015bc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80015b6:	e001      	b.n	80015bc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40012400 	.word	0x40012400
 80015cc:	40012800 	.word	0x40012800
 80015d0:	08001abf 	.word	0x08001abf
 80015d4:	08001b3b 	.word	0x08001b3b
 80015d8:	08001b57 	.word	0x08001b57

080015dc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 0320 	and.w	r3, r3, #32
 80015ee:	2b20      	cmp	r3, #32
 80015f0:	d140      	bne.n	8001674 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d139      	bne.n	8001674 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001604:	f003 0310 	and.w	r3, r3, #16
 8001608:	2b00      	cmp	r3, #0
 800160a:	d105      	bne.n	8001618 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001622:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001626:	d11d      	bne.n	8001664 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800162c:	2b00      	cmp	r3, #0
 800162e:	d119      	bne.n	8001664 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0220 	bic.w	r2, r2, #32
 800163e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	f043 0201 	orr.w	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff fa0f 	bl	8000a88 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f06f 0212 	mvn.w	r2, #18
 8001672:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167e:	2b80      	cmp	r3, #128	; 0x80
 8001680:	d14f      	bne.n	8001722 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b04      	cmp	r3, #4
 800168e:	d148      	bne.n	8001722 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	2b00      	cmp	r3, #0
 800169a:	d105      	bne.n	80016a8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80016b2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80016b6:	d012      	beq.n	80016de <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d125      	bne.n	8001712 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80016d0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016d4:	d11d      	bne.n	8001712 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d119      	bne.n	8001712 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016ec:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d105      	bne.n	8001712 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170a:	f043 0201 	orr.w	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fae6 	bl	8001ce4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f06f 020c 	mvn.w	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172c:	2b40      	cmp	r3, #64	; 0x40
 800172e:	d114      	bne.n	800175a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b01      	cmp	r3, #1
 800173c:	d10d      	bne.n	800175a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f812 	bl	8001774 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f06f 0201 	mvn.w	r2, #1
 8001758:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr

08001786 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d101      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x20>
 80017b4:	2302      	movs	r3, #2
 80017b6:	e0dc      	b.n	8001972 <HAL_ADC_ConfigChannel+0x1da>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2201      	movs	r2, #1
 80017bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b06      	cmp	r3, #6
 80017c6:	d81c      	bhi.n	8001802 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	3b05      	subs	r3, #5
 80017da:	221f      	movs	r2, #31
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	4019      	ands	r1, r3
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	3b05      	subs	r3, #5
 80017f4:	fa00 f203 	lsl.w	r2, r0, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34
 8001800:	e03c      	b.n	800187c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d81c      	bhi.n	8001844 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	3b23      	subs	r3, #35	; 0x23
 800181c:	221f      	movs	r2, #31
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	4019      	ands	r1, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	3b23      	subs	r3, #35	; 0x23
 8001836:	fa00 f203 	lsl.w	r2, r0, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	631a      	str	r2, [r3, #48]	; 0x30
 8001842:	e01b      	b.n	800187c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	3b41      	subs	r3, #65	; 0x41
 8001856:	221f      	movs	r2, #31
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	4019      	ands	r1, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	3b41      	subs	r3, #65	; 0x41
 8001870:	fa00 f203 	lsl.w	r2, r0, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b09      	cmp	r3, #9
 8001882:	d91c      	bls.n	80018be <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68d9      	ldr	r1, [r3, #12]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	3b1e      	subs	r3, #30
 8001896:	2207      	movs	r2, #7
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	4019      	ands	r1, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	6898      	ldr	r0, [r3, #8]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	3b1e      	subs	r3, #30
 80018b0:	fa00 f203 	lsl.w	r2, r0, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	e019      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6919      	ldr	r1, [r3, #16]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4613      	mov	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	4413      	add	r3, r2
 80018ce:	2207      	movs	r2, #7
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	4019      	ands	r1, r3
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	6898      	ldr	r0, [r3, #8]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	fa00 f203 	lsl.w	r2, r0, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b10      	cmp	r3, #16
 80018f8:	d003      	beq.n	8001902 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018fe:	2b11      	cmp	r3, #17
 8001900:	d132      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a1d      	ldr	r2, [pc, #116]	; (800197c <HAL_ADC_ConfigChannel+0x1e4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d125      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d126      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001928:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b10      	cmp	r3, #16
 8001930:	d11a      	bne.n	8001968 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <HAL_ADC_ConfigChannel+0x1e8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a13      	ldr	r2, [pc, #76]	; (8001984 <HAL_ADC_ConfigChannel+0x1ec>)
 8001938:	fba2 2303 	umull	r2, r3, r2, r3
 800193c:	0c9a      	lsrs	r2, r3, #18
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001948:	e002      	b.n	8001950 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3b01      	subs	r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f9      	bne.n	800194a <HAL_ADC_ConfigChannel+0x1b2>
 8001956:	e007      	b.n	8001968 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	f043 0220 	orr.w	r2, r3, #32
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	40012400 	.word	0x40012400
 8001980:	20000000 	.word	0x20000000
 8001984:	431bde83 	.word	0x431bde83

08001988 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d040      	beq.n	8001a28 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f042 0201 	orr.w	r2, r2, #1
 80019b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019b6:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <ADC_Enable+0xac>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a1f      	ldr	r2, [pc, #124]	; (8001a38 <ADC_Enable+0xb0>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	0c9b      	lsrs	r3, r3, #18
 80019c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019c4:	e002      	b.n	80019cc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f9      	bne.n	80019c6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019d2:	f7ff fc43 	bl	800125c <HAL_GetTick>
 80019d6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019d8:	e01f      	b.n	8001a1a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019da:	f7ff fc3f 	bl	800125c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d918      	bls.n	8001a1a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d011      	beq.n	8001a1a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	f043 0210 	orr.w	r2, r3, #16
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	f043 0201 	orr.w	r2, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e007      	b.n	8001a2a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d1d8      	bne.n	80019da <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000000 	.word	0x20000000
 8001a38:	431bde83 	.word	0x431bde83

08001a3c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d12e      	bne.n	8001ab4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0201 	bic.w	r2, r2, #1
 8001a64:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a66:	f7ff fbf9 	bl	800125c <HAL_GetTick>
 8001a6a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a6c:	e01b      	b.n	8001aa6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a6e:	f7ff fbf5 	bl	800125c <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d914      	bls.n	8001aa6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d10d      	bne.n	8001aa6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	f043 0210 	orr.w	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	f043 0201 	orr.w	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e007      	b.n	8001ab6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d0dc      	beq.n	8001a6e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d127      	bne.n	8001b28 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001aee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001af2:	d115      	bne.n	8001b20 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d111      	bne.n	8001b20 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d105      	bne.n	8001b20 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f7fe ffb1 	bl	8000a88 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b26:	e004      	b.n	8001b32 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	4798      	blx	r3
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f7ff fe0a 	bl	8001762 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b74:	f043 0204 	orr.w	r2, r3, #4
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b7c:	68f8      	ldr	r0, [r7, #12]
 8001b7e:	f7ff fe02 	bl	8001786 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_ADCEx_Calibration_Start+0x1e>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e095      	b.n	8001cd6 <HAL_ADCEx_Calibration_Start+0x14a>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff42 	bl	8001a3c <ADC_ConversionStop_Disable>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f040 8084 	bne.w	8001ccc <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bcc:	f023 0302 	bic.w	r3, r3, #2
 8001bd0:	f043 0202 	orr.w	r2, r3, #2
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001bd8:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <HAL_ADCEx_Calibration_Start+0x154>)
 8001bda:	681c      	ldr	r4, [r3, #0]
 8001bdc:	2002      	movs	r0, #2
 8001bde:	f002 fea3 	bl	8004928 <HAL_RCCEx_GetPeriphCLKFreq>
 8001be2:	4603      	mov	r3, r0
 8001be4:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001be8:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001bea:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001bec:	e002      	b.n	8001bf4 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f9      	bne.n	8001bee <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fec4 	bl	8001988 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0208 	orr.w	r2, r2, #8
 8001c0e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001c10:	f7ff fb24 	bl	800125c <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c16:	e01b      	b.n	8001c50 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c18:	f7ff fb20 	bl	800125c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b0a      	cmp	r3, #10
 8001c24:	d914      	bls.n	8001c50 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00d      	beq.n	8001c50 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	f023 0312 	bic.w	r3, r3, #18
 8001c3c:	f043 0210 	orr.w	r2, r3, #16
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e042      	b.n	8001cd6 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1dc      	bne.n	8001c18 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0204 	orr.w	r2, r2, #4
 8001c6c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001c6e:	f7ff faf5 	bl	800125c <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c74:	e01b      	b.n	8001cae <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c76:	f7ff faf1 	bl	800125c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b0a      	cmp	r3, #10
 8001c82:	d914      	bls.n	8001cae <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00d      	beq.n	8001cae <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	f023 0312 	bic.w	r3, r3, #18
 8001c9a:	f043 0210 	orr.w	r2, r3, #16
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e013      	b.n	8001cd6 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1dc      	bne.n	8001c76 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	f023 0303 	bic.w	r3, r3, #3
 8001cc4:	f043 0201 	orr.w	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd90      	pop	{r4, r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000000 	.word	0x20000000

08001ce4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
	...

08001cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d14:	4013      	ands	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2a:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	60d3      	str	r3, [r2, #12]
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <__NVIC_GetPriorityGrouping+0x18>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	f003 0307 	and.w	r3, r3, #7
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	db0b      	blt.n	8001d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	4906      	ldr	r1, [pc, #24]	; (8001d90 <__NVIC_EnableIRQ+0x34>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100

08001d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db0a      	blt.n	8001dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	490c      	ldr	r1, [pc, #48]	; (8001de0 <__NVIC_SetPriority+0x4c>)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	b2d2      	uxtb	r2, r2
 8001db6:	440b      	add	r3, r1
 8001db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dbc:	e00a      	b.n	8001dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	4908      	ldr	r1, [pc, #32]	; (8001de4 <__NVIC_SetPriority+0x50>)
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	3b04      	subs	r3, #4
 8001dcc:	0112      	lsls	r2, r2, #4
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	761a      	strb	r2, [r3, #24]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000e100 	.word	0xe000e100
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b089      	sub	sp, #36	; 0x24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f1c3 0307 	rsb	r3, r3, #7
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	bf28      	it	cs
 8001e06:	2304      	movcs	r3, #4
 8001e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d902      	bls.n	8001e18 <NVIC_EncodePriority+0x30>
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3b03      	subs	r3, #3
 8001e16:	e000      	b.n	8001e1a <NVIC_EncodePriority+0x32>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	401a      	ands	r2, r3
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e30:	f04f 31ff 	mov.w	r1, #4294967295
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	4313      	orrs	r3, r2
         );
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3724      	adds	r7, #36	; 0x24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e5c:	d301      	bcc.n	8001e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00f      	b.n	8001e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e62:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <SysTick_Config+0x40>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f7ff ff90 	bl	8001d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <SysTick_Config+0x40>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7a:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <SysTick_Config+0x40>)
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	e000e010 	.word	0xe000e010

08001e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff2d 	bl	8001cf8 <__NVIC_SetPriorityGrouping>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb8:	f7ff ff42 	bl	8001d40 <__NVIC_GetPriorityGrouping>
 8001ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	6978      	ldr	r0, [r7, #20]
 8001ec4:	f7ff ff90 	bl	8001de8 <NVIC_EncodePriority>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff5f 	bl	8001d94 <__NVIC_SetPriority>
}
 8001ed6:	bf00      	nop
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff35 	bl	8001d5c <__NVIC_EnableIRQ>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ffa2 	bl	8001e4c <SysTick_Config>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e043      	b.n	8001fb2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <HAL_DMA_Init+0xa8>)
 8001f32:	4413      	add	r3, r2
 8001f34:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <HAL_DMA_Init+0xac>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	009a      	lsls	r2, r3, #2
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a1f      	ldr	r2, [pc, #124]	; (8001fc4 <HAL_DMA_Init+0xb0>)
 8001f46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	bffdfff8 	.word	0xbffdfff8
 8001fc0:	cccccccd 	.word	0xcccccccd
 8001fc4:	40020000 	.word	0x40020000

08001fc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_DMA_Start_IT+0x20>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e04a      	b.n	800207e <HAL_DMA_Start_IT+0xb6>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d13a      	bne.n	8002070 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0201 	bic.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f938 	bl	8002294 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 020e 	orr.w	r2, r2, #14
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	e00f      	b.n	800205e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0204 	bic.w	r2, r2, #4
 800204c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 020a 	orr.w	r2, r2, #10
 800205c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f042 0201 	orr.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	e005      	b.n	800207c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002078:	2302      	movs	r3, #2
 800207a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800207c:	7dfb      	ldrb	r3, [r7, #23]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	2204      	movs	r2, #4
 80020a6:	409a      	lsls	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d04f      	beq.n	8002150 <HAL_DMA_IRQHandler+0xc8>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d04a      	beq.n	8002150 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d107      	bne.n	80020d8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f022 0204 	bic.w	r2, r2, #4
 80020d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a66      	ldr	r2, [pc, #408]	; (8002278 <HAL_DMA_IRQHandler+0x1f0>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d029      	beq.n	8002136 <HAL_DMA_IRQHandler+0xae>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a65      	ldr	r2, [pc, #404]	; (800227c <HAL_DMA_IRQHandler+0x1f4>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d022      	beq.n	8002132 <HAL_DMA_IRQHandler+0xaa>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a63      	ldr	r2, [pc, #396]	; (8002280 <HAL_DMA_IRQHandler+0x1f8>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d01a      	beq.n	800212c <HAL_DMA_IRQHandler+0xa4>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a62      	ldr	r2, [pc, #392]	; (8002284 <HAL_DMA_IRQHandler+0x1fc>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d012      	beq.n	8002126 <HAL_DMA_IRQHandler+0x9e>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a60      	ldr	r2, [pc, #384]	; (8002288 <HAL_DMA_IRQHandler+0x200>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00a      	beq.n	8002120 <HAL_DMA_IRQHandler+0x98>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a5f      	ldr	r2, [pc, #380]	; (800228c <HAL_DMA_IRQHandler+0x204>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d102      	bne.n	800211a <HAL_DMA_IRQHandler+0x92>
 8002114:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002118:	e00e      	b.n	8002138 <HAL_DMA_IRQHandler+0xb0>
 800211a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800211e:	e00b      	b.n	8002138 <HAL_DMA_IRQHandler+0xb0>
 8002120:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002124:	e008      	b.n	8002138 <HAL_DMA_IRQHandler+0xb0>
 8002126:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800212a:	e005      	b.n	8002138 <HAL_DMA_IRQHandler+0xb0>
 800212c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002130:	e002      	b.n	8002138 <HAL_DMA_IRQHandler+0xb0>
 8002132:	2340      	movs	r3, #64	; 0x40
 8002134:	e000      	b.n	8002138 <HAL_DMA_IRQHandler+0xb0>
 8002136:	2304      	movs	r3, #4
 8002138:	4a55      	ldr	r2, [pc, #340]	; (8002290 <HAL_DMA_IRQHandler+0x208>)
 800213a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 8094 	beq.w	800226e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800214e:	e08e      	b.n	800226e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	2202      	movs	r2, #2
 8002156:	409a      	lsls	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4013      	ands	r3, r2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d056      	beq.n	800220e <HAL_DMA_IRQHandler+0x186>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d051      	beq.n	800220e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10b      	bne.n	8002190 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 020a 	bic.w	r2, r2, #10
 8002186:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a38      	ldr	r2, [pc, #224]	; (8002278 <HAL_DMA_IRQHandler+0x1f0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d029      	beq.n	80021ee <HAL_DMA_IRQHandler+0x166>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a37      	ldr	r2, [pc, #220]	; (800227c <HAL_DMA_IRQHandler+0x1f4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d022      	beq.n	80021ea <HAL_DMA_IRQHandler+0x162>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a35      	ldr	r2, [pc, #212]	; (8002280 <HAL_DMA_IRQHandler+0x1f8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01a      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x15c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a34      	ldr	r2, [pc, #208]	; (8002284 <HAL_DMA_IRQHandler+0x1fc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d012      	beq.n	80021de <HAL_DMA_IRQHandler+0x156>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a32      	ldr	r2, [pc, #200]	; (8002288 <HAL_DMA_IRQHandler+0x200>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00a      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x150>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a31      	ldr	r2, [pc, #196]	; (800228c <HAL_DMA_IRQHandler+0x204>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d102      	bne.n	80021d2 <HAL_DMA_IRQHandler+0x14a>
 80021cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021d0:	e00e      	b.n	80021f0 <HAL_DMA_IRQHandler+0x168>
 80021d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021d6:	e00b      	b.n	80021f0 <HAL_DMA_IRQHandler+0x168>
 80021d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021dc:	e008      	b.n	80021f0 <HAL_DMA_IRQHandler+0x168>
 80021de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021e2:	e005      	b.n	80021f0 <HAL_DMA_IRQHandler+0x168>
 80021e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e8:	e002      	b.n	80021f0 <HAL_DMA_IRQHandler+0x168>
 80021ea:	2320      	movs	r3, #32
 80021ec:	e000      	b.n	80021f0 <HAL_DMA_IRQHandler+0x168>
 80021ee:	2302      	movs	r3, #2
 80021f0:	4a27      	ldr	r2, [pc, #156]	; (8002290 <HAL_DMA_IRQHandler+0x208>)
 80021f2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	d034      	beq.n	800226e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800220c:	e02f      	b.n	800226e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2208      	movs	r2, #8
 8002214:	409a      	lsls	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d028      	beq.n	8002270 <HAL_DMA_IRQHandler+0x1e8>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f003 0308 	and.w	r3, r3, #8
 8002224:	2b00      	cmp	r3, #0
 8002226:	d023      	beq.n	8002270 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 020e 	bic.w	r2, r2, #14
 8002236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	2101      	movs	r1, #1
 8002242:	fa01 f202 	lsl.w	r2, r1, r2
 8002246:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	2b00      	cmp	r3, #0
 8002264:	d004      	beq.n	8002270 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	4798      	blx	r3
    }
  }
  return;
 800226e:	bf00      	nop
 8002270:	bf00      	nop
}
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	40020008 	.word	0x40020008
 800227c:	4002001c 	.word	0x4002001c
 8002280:	40020030 	.word	0x40020030
 8002284:	40020044 	.word	0x40020044
 8002288:	40020058 	.word	0x40020058
 800228c:	4002006c 	.word	0x4002006c
 8002290:	40020000 	.word	0x40020000

08002294 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022aa:	2101      	movs	r1, #1
 80022ac:	fa01 f202 	lsl.w	r2, r1, r2
 80022b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b10      	cmp	r3, #16
 80022c0:	d108      	bne.n	80022d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022d2:	e007      	b.n	80022e4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	60da      	str	r2, [r3, #12]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
	...

080022f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b08b      	sub	sp, #44	; 0x2c
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002302:	e169      	b.n	80025d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002304:	2201      	movs	r2, #1
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69fa      	ldr	r2, [r7, #28]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	429a      	cmp	r2, r3
 800231e:	f040 8158 	bne.w	80025d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4a9a      	ldr	r2, [pc, #616]	; (8002590 <HAL_GPIO_Init+0x2a0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d05e      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 800232c:	4a98      	ldr	r2, [pc, #608]	; (8002590 <HAL_GPIO_Init+0x2a0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d875      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 8002332:	4a98      	ldr	r2, [pc, #608]	; (8002594 <HAL_GPIO_Init+0x2a4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d058      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 8002338:	4a96      	ldr	r2, [pc, #600]	; (8002594 <HAL_GPIO_Init+0x2a4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d86f      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 800233e:	4a96      	ldr	r2, [pc, #600]	; (8002598 <HAL_GPIO_Init+0x2a8>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d052      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 8002344:	4a94      	ldr	r2, [pc, #592]	; (8002598 <HAL_GPIO_Init+0x2a8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d869      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 800234a:	4a94      	ldr	r2, [pc, #592]	; (800259c <HAL_GPIO_Init+0x2ac>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d04c      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 8002350:	4a92      	ldr	r2, [pc, #584]	; (800259c <HAL_GPIO_Init+0x2ac>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d863      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 8002356:	4a92      	ldr	r2, [pc, #584]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d046      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
 800235c:	4a90      	ldr	r2, [pc, #576]	; (80025a0 <HAL_GPIO_Init+0x2b0>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d85d      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 8002362:	2b12      	cmp	r3, #18
 8002364:	d82a      	bhi.n	80023bc <HAL_GPIO_Init+0xcc>
 8002366:	2b12      	cmp	r3, #18
 8002368:	d859      	bhi.n	800241e <HAL_GPIO_Init+0x12e>
 800236a:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <HAL_GPIO_Init+0x80>)
 800236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002370:	080023eb 	.word	0x080023eb
 8002374:	080023c5 	.word	0x080023c5
 8002378:	080023d7 	.word	0x080023d7
 800237c:	08002419 	.word	0x08002419
 8002380:	0800241f 	.word	0x0800241f
 8002384:	0800241f 	.word	0x0800241f
 8002388:	0800241f 	.word	0x0800241f
 800238c:	0800241f 	.word	0x0800241f
 8002390:	0800241f 	.word	0x0800241f
 8002394:	0800241f 	.word	0x0800241f
 8002398:	0800241f 	.word	0x0800241f
 800239c:	0800241f 	.word	0x0800241f
 80023a0:	0800241f 	.word	0x0800241f
 80023a4:	0800241f 	.word	0x0800241f
 80023a8:	0800241f 	.word	0x0800241f
 80023ac:	0800241f 	.word	0x0800241f
 80023b0:	0800241f 	.word	0x0800241f
 80023b4:	080023cd 	.word	0x080023cd
 80023b8:	080023e1 	.word	0x080023e1
 80023bc:	4a79      	ldr	r2, [pc, #484]	; (80025a4 <HAL_GPIO_Init+0x2b4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d013      	beq.n	80023ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023c2:	e02c      	b.n	800241e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	623b      	str	r3, [r7, #32]
          break;
 80023ca:	e029      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	3304      	adds	r3, #4
 80023d2:	623b      	str	r3, [r7, #32]
          break;
 80023d4:	e024      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	3308      	adds	r3, #8
 80023dc:	623b      	str	r3, [r7, #32]
          break;
 80023de:	e01f      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	330c      	adds	r3, #12
 80023e6:	623b      	str	r3, [r7, #32]
          break;
 80023e8:	e01a      	b.n	8002420 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023f2:	2304      	movs	r3, #4
 80023f4:	623b      	str	r3, [r7, #32]
          break;
 80023f6:	e013      	b.n	8002420 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d105      	bne.n	800240c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002400:	2308      	movs	r3, #8
 8002402:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	611a      	str	r2, [r3, #16]
          break;
 800240a:	e009      	b.n	8002420 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800240c:	2308      	movs	r3, #8
 800240e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	615a      	str	r2, [r3, #20]
          break;
 8002416:	e003      	b.n	8002420 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
          break;
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x130>
          break;
 800241e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2bff      	cmp	r3, #255	; 0xff
 8002424:	d801      	bhi.n	800242a <HAL_GPIO_Init+0x13a>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	e001      	b.n	800242e <HAL_GPIO_Init+0x13e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2bff      	cmp	r3, #255	; 0xff
 8002434:	d802      	bhi.n	800243c <HAL_GPIO_Init+0x14c>
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	e002      	b.n	8002442 <HAL_GPIO_Init+0x152>
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	3b08      	subs	r3, #8
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	210f      	movs	r1, #15
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	401a      	ands	r2, r3
 8002454:	6a39      	ldr	r1, [r7, #32]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	431a      	orrs	r2, r3
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80b1 	beq.w	80025d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002470:	4b4d      	ldr	r3, [pc, #308]	; (80025a8 <HAL_GPIO_Init+0x2b8>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	4a4c      	ldr	r2, [pc, #304]	; (80025a8 <HAL_GPIO_Init+0x2b8>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6193      	str	r3, [r2, #24]
 800247c:	4b4a      	ldr	r3, [pc, #296]	; (80025a8 <HAL_GPIO_Init+0x2b8>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002488:	4a48      	ldr	r2, [pc, #288]	; (80025ac <HAL_GPIO_Init+0x2bc>)
 800248a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	3302      	adds	r3, #2
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	220f      	movs	r2, #15
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a40      	ldr	r2, [pc, #256]	; (80025b0 <HAL_GPIO_Init+0x2c0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d013      	beq.n	80024dc <HAL_GPIO_Init+0x1ec>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a3f      	ldr	r2, [pc, #252]	; (80025b4 <HAL_GPIO_Init+0x2c4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00d      	beq.n	80024d8 <HAL_GPIO_Init+0x1e8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a3e      	ldr	r2, [pc, #248]	; (80025b8 <HAL_GPIO_Init+0x2c8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d007      	beq.n	80024d4 <HAL_GPIO_Init+0x1e4>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a3d      	ldr	r2, [pc, #244]	; (80025bc <HAL_GPIO_Init+0x2cc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d101      	bne.n	80024d0 <HAL_GPIO_Init+0x1e0>
 80024cc:	2303      	movs	r3, #3
 80024ce:	e006      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d0:	2304      	movs	r3, #4
 80024d2:	e004      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e002      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <HAL_GPIO_Init+0x1ee>
 80024dc:	2300      	movs	r3, #0
 80024de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e0:	f002 0203 	and.w	r2, r2, #3
 80024e4:	0092      	lsls	r2, r2, #2
 80024e6:	4093      	lsls	r3, r2
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024ee:	492f      	ldr	r1, [pc, #188]	; (80025ac <HAL_GPIO_Init+0x2bc>)
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	089b      	lsrs	r3, r3, #2
 80024f4:	3302      	adds	r3, #2
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d006      	beq.n	8002516 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002508:	4b2d      	ldr	r3, [pc, #180]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	492c      	ldr	r1, [pc, #176]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]
 8002514:	e006      	b.n	8002524 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002516:	4b2a      	ldr	r3, [pc, #168]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	43db      	mvns	r3, r3
 800251e:	4928      	ldr	r1, [pc, #160]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002520:	4013      	ands	r3, r2
 8002522:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d006      	beq.n	800253e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002530:	4b23      	ldr	r3, [pc, #140]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	4922      	ldr	r1, [pc, #136]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
 800253c:	e006      	b.n	800254c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	43db      	mvns	r3, r3
 8002546:	491e      	ldr	r1, [pc, #120]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002548:	4013      	ands	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002558:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	4918      	ldr	r1, [pc, #96]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002566:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	43db      	mvns	r3, r3
 800256e:	4914      	ldr	r1, [pc, #80]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002570:	4013      	ands	r3, r2
 8002572:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d021      	beq.n	80025c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	490e      	ldr	r1, [pc, #56]	; (80025c0 <HAL_GPIO_Init+0x2d0>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	60cb      	str	r3, [r1, #12]
 800258c:	e021      	b.n	80025d2 <HAL_GPIO_Init+0x2e2>
 800258e:	bf00      	nop
 8002590:	10320000 	.word	0x10320000
 8002594:	10310000 	.word	0x10310000
 8002598:	10220000 	.word	0x10220000
 800259c:	10210000 	.word	0x10210000
 80025a0:	10120000 	.word	0x10120000
 80025a4:	10110000 	.word	0x10110000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40010000 	.word	0x40010000
 80025b0:	40010800 	.word	0x40010800
 80025b4:	40010c00 	.word	0x40010c00
 80025b8:	40011000 	.word	0x40011000
 80025bc:	40011400 	.word	0x40011400
 80025c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_GPIO_Init+0x304>)
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	4909      	ldr	r1, [pc, #36]	; (80025f4 <HAL_GPIO_Init+0x304>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	3301      	adds	r3, #1
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	fa22 f303 	lsr.w	r3, r2, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f47f ae8e 	bne.w	8002304 <HAL_GPIO_Init+0x14>
  }
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	372c      	adds	r7, #44	; 0x2c
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	40010400 	.word	0x40010400

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002614:	e003      	b.n	800261e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	041a      	lsls	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	611a      	str	r2, [r3, #16]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800262a:	b08b      	sub	sp, #44	; 0x2c
 800262c:	af06      	add	r7, sp, #24
 800262e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e0fd      	b.n	8002836 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f006 fd58 	bl	8009104 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2203      	movs	r2, #3
 8002658:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4618      	mov	r0, r3
 8002662:	f002 fa47 	bl	8004af4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	687e      	ldr	r6, [r7, #4]
 800266e:	466d      	mov	r5, sp
 8002670:	f106 0410 	add.w	r4, r6, #16
 8002674:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002676:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	602b      	str	r3, [r5, #0]
 800267c:	1d33      	adds	r3, r6, #4
 800267e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002680:	6838      	ldr	r0, [r7, #0]
 8002682:	f002 fa11 	bl	8004aa8 <USB_CoreInit>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0ce      	b.n	8002836 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2100      	movs	r1, #0
 800269e:	4618      	mov	r0, r3
 80026a0:	f002 fa42 	bl	8004b28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]
 80026a8:	e04c      	b.n	8002744 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	4613      	mov	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	440b      	add	r3, r1
 80026ba:	3301      	adds	r3, #1
 80026bc:	2201      	movs	r2, #1
 80026be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	440b      	add	r3, r1
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026d4:	7bfa      	ldrb	r2, [r7, #15]
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	b298      	uxth	r0, r3
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	440b      	add	r3, r1
 80026e6:	3336      	adds	r3, #54	; 0x36
 80026e8:	4602      	mov	r2, r0
 80026ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	440b      	add	r3, r1
 80026fc:	3303      	adds	r3, #3
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	440b      	add	r3, r1
 8002710:	3338      	adds	r3, #56	; 0x38
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	440b      	add	r3, r1
 8002724:	333c      	adds	r3, #60	; 0x3c
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	440b      	add	r3, r1
 8002738:	3340      	adds	r3, #64	; 0x40
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	3301      	adds	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	d3ad      	bcc.n	80026aa <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
 8002752:	e044      	b.n	80027de <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	440b      	add	r3, r1
 8002762:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800276a:	7bfa      	ldrb	r2, [r7, #15]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	440b      	add	r3, r1
 8002778:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800277c:	7bfa      	ldrb	r2, [r7, #15]
 800277e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	440b      	add	r3, r1
 800278e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	440b      	add	r3, r1
 80027a4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027ac:	7bfa      	ldrb	r2, [r7, #15]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	440b      	add	r3, r1
 80027ba:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	440b      	add	r3, r1
 80027d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
 80027da:	3301      	adds	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	7bfa      	ldrb	r2, [r7, #15]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d3b5      	bcc.n	8002754 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	687e      	ldr	r6, [r7, #4]
 80027f0:	466d      	mov	r5, sp
 80027f2:	f106 0410 	add.w	r4, r6, #16
 80027f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	602b      	str	r3, [r5, #0]
 80027fe:	1d33      	adds	r3, r6, #4
 8002800:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002802:	6838      	ldr	r0, [r7, #0]
 8002804:	f002 f99c 	bl	8004b40 <USB_DevInit>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2202      	movs	r2, #2
 8002812:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e00d      	b.n	8002836 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f004 fe4e 	bl	80074d0 <USB_DevDisconnect>

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800283e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_PCD_Start+0x16>
 8002850:	2302      	movs	r3, #2
 8002852:	e016      	b.n	8002882 <HAL_PCD_Start+0x44>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f002 f931 	bl	8004ac8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002866:	2101      	movs	r1, #1
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f006 febe 	bl	80095ea <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f004 fe22 	bl	80074bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b088      	sub	sp, #32
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f004 fe24 	bl	80074e4 <USB_ReadInterrupts>
 800289c:	4603      	mov	r3, r0
 800289e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028a6:	d102      	bne.n	80028ae <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 fb5f 	bl	8002f6c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f004 fe16 	bl	80074e4 <USB_ReadInterrupts>
 80028b8:	4603      	mov	r3, r0
 80028ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c2:	d112      	bne.n	80028ea <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d6:	b292      	uxth	r2, r2
 80028d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f006 fc8c 	bl	80091fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80028e2:	2100      	movs	r1, #0
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f923 	bl	8002b30 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 fdf8 	bl	80074e4 <USB_ReadInterrupts>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028fe:	d10b      	bne.n	8002918 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002908:	b29a      	uxth	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002912:	b292      	uxth	r2, r2
 8002914:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f004 fde1 	bl	80074e4 <USB_ReadInterrupts>
 8002922:	4603      	mov	r3, r0
 8002924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800292c:	d10b      	bne.n	8002946 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002936:	b29a      	uxth	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002940:	b292      	uxth	r2, r2
 8002942:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f004 fdca 	bl	80074e4 <USB_ReadInterrupts>
 8002950:	4603      	mov	r3, r0
 8002952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295a:	d126      	bne.n	80029aa <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002964:	b29a      	uxth	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0204 	bic.w	r2, r2, #4
 800296e:	b292      	uxth	r2, r2
 8002970:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800297c:	b29a      	uxth	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0208 	bic.w	r2, r2, #8
 8002986:	b292      	uxth	r2, r2
 8002988:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f006 fc6d 	bl	800926c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800299a:	b29a      	uxth	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029a4:	b292      	uxth	r2, r2
 80029a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f004 fd98 	bl	80074e4 <USB_ReadInterrupts>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029be:	f040 8082 	bne.w	8002ac6 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80029c2:	2300      	movs	r3, #0
 80029c4:	77fb      	strb	r3, [r7, #31]
 80029c6:	e010      	b.n	80029ea <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	7ffb      	ldrb	r3, [r7, #31]
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	441a      	add	r2, r3
 80029d4:	7ffb      	ldrb	r3, [r7, #31]
 80029d6:	8812      	ldrh	r2, [r2, #0]
 80029d8:	b292      	uxth	r2, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	3320      	adds	r3, #32
 80029de:	443b      	add	r3, r7
 80029e0:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80029e4:	7ffb      	ldrb	r3, [r7, #31]
 80029e6:	3301      	adds	r3, #1
 80029e8:	77fb      	strb	r3, [r7, #31]
 80029ea:	7ffb      	ldrb	r3, [r7, #31]
 80029ec:	2b07      	cmp	r3, #7
 80029ee:	d9eb      	bls.n	80029c8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
 8002a02:	b292      	uxth	r2, r2
 8002a04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	b292      	uxth	r2, r2
 8002a1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002a20:	bf00      	nop
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f6      	beq.n	8002a22 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a46:	b292      	uxth	r2, r2
 8002a48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	77fb      	strb	r3, [r7, #31]
 8002a50:	e00f      	b.n	8002a72 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002a52:	7ffb      	ldrb	r3, [r7, #31]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	4611      	mov	r1, r2
 8002a5a:	7ffa      	ldrb	r2, [r7, #31]
 8002a5c:	0092      	lsls	r2, r2, #2
 8002a5e:	440a      	add	r2, r1
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	3320      	adds	r3, #32
 8002a64:	443b      	add	r3, r7
 8002a66:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002a6a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002a6c:	7ffb      	ldrb	r3, [r7, #31]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	77fb      	strb	r3, [r7, #31]
 8002a72:	7ffb      	ldrb	r3, [r7, #31]
 8002a74:	2b07      	cmp	r3, #7
 8002a76:	d9ec      	bls.n	8002a52 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0208 	orr.w	r2, r2, #8
 8002a8a:	b292      	uxth	r2, r2
 8002a8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002aa2:	b292      	uxth	r2, r2
 8002aa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0204 	orr.w	r2, r2, #4
 8002aba:	b292      	uxth	r2, r2
 8002abc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f006 fbb9 	bl	8009238 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f004 fd0a 	bl	80074e4 <USB_ReadInterrupts>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ad6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ada:	d10e      	bne.n	8002afa <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002aee:	b292      	uxth	r2, r2
 8002af0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f006 fb72 	bl	80091de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f004 fcf0 	bl	80074e4 <USB_ReadInterrupts>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0e:	d10b      	bne.n	8002b28 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b22:	b292      	uxth	r2, r2
 8002b24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002b28:	bf00      	nop
 8002b2a:	3720      	adds	r7, #32
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_PCD_SetAddress+0x1a>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e013      	b.n	8002b72 <HAL_PCD_SetAddress+0x42>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 fc97 	bl	8007496 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b084      	sub	sp, #16
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	4608      	mov	r0, r1
 8002b84:	4611      	mov	r1, r2
 8002b86:	461a      	mov	r2, r3
 8002b88:	4603      	mov	r3, r0
 8002b8a:	70fb      	strb	r3, [r7, #3]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	803b      	strh	r3, [r7, #0]
 8002b90:	4613      	mov	r3, r2
 8002b92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	da0e      	bge.n	8002bbe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	705a      	strb	r2, [r3, #1]
 8002bbc:	e00e      	b.n	8002bdc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	f003 0207 	and.w	r2, r3, #7
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002be8:	883a      	ldrh	r2, [r7, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	78ba      	ldrb	r2, [r7, #2]
 8002bf2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	785b      	ldrb	r3, [r3, #1]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d004      	beq.n	8002c06 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c06:	78bb      	ldrb	r3, [r7, #2]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d102      	bne.n	8002c12 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_PCD_EP_Open+0xa6>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e00e      	b.n	8002c3e <HAL_PCD_EP_Open+0xc4>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68f9      	ldr	r1, [r7, #12]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f001 ffa6 	bl	8004b80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002c3c:	7afb      	ldrb	r3, [r7, #11]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	da0e      	bge.n	8002c78 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	4613      	mov	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	705a      	strb	r2, [r3, #1]
 8002c76:	e00e      	b.n	8002c96 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	f003 0207 	and.w	r2, r3, #7
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c96:	78fb      	ldrb	r3, [r7, #3]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <HAL_PCD_EP_Close+0x6a>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e00e      	b.n	8002cce <HAL_PCD_EP_Close+0x88>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68f9      	ldr	r1, [r7, #12]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f002 fac8 	bl	8005254 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b086      	sub	sp, #24
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ce6:	7afb      	ldrb	r3, [r7, #11]
 8002ce8:	f003 0207 	and.w	r2, r3, #7
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2200      	movs	r2, #0
 8002d14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d16:	7afb      	ldrb	r3, [r7, #11]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d22:	7afb      	ldrb	r3, [r7, #11]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d106      	bne.n	8002d3a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6979      	ldr	r1, [r7, #20]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f002 fc7a 	bl	800562c <USB_EPStartXfer>
 8002d38:	e005      	b.n	8002d46 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6979      	ldr	r1, [r7, #20]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f002 fc73 	bl	800562c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	f003 0207 	and.w	r2, r3, #7
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	440b      	add	r3, r1
 8002d6e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002d72:	681b      	ldr	r3, [r3, #0]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d8e:	7afb      	ldrb	r3, [r7, #11]
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	4413      	add	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dca:	7afb      	ldrb	r3, [r7, #11]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dd6:	7afb      	ldrb	r3, [r7, #11]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d106      	bne.n	8002dee <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6979      	ldr	r1, [r7, #20]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f002 fc20 	bl	800562c <USB_EPStartXfer>
 8002dec:	e005      	b.n	8002dfa <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6979      	ldr	r1, [r7, #20]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f002 fc19 	bl	800562c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	f003 0207 	and.w	r2, r3, #7
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d901      	bls.n	8002e22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e04c      	b.n	8002ebc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	da0e      	bge.n	8002e48 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	705a      	strb	r2, [r3, #1]
 8002e46:	e00c      	b.n	8002e62 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_PCD_EP_SetStall+0x7e>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e01c      	b.n	8002ebc <HAL_PCD_EP_SetStall+0xb8>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68f9      	ldr	r1, [r7, #12]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f004 fa03 	bl	800729c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d108      	bne.n	8002eb2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f004 fb28 	bl	8007502 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	f003 020f 	and.w	r2, r3, #15
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d901      	bls.n	8002ee2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e040      	b.n	8002f64 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ee2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	da0e      	bge.n	8002f08 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2201      	movs	r2, #1
 8002f04:	705a      	strb	r2, [r3, #1]
 8002f06:	e00e      	b.n	8002f26 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	f003 0207 	and.w	r2, r3, #7
 8002f0e:	4613      	mov	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	b2da      	uxtb	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d101      	bne.n	8002f46 <HAL_PCD_EP_ClrStall+0x82>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e00e      	b.n	8002f64 <HAL_PCD_EP_ClrStall+0xa0>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68f9      	ldr	r1, [r7, #12]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f004 f9f1 	bl	800733c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08e      	sub	sp, #56	; 0x38
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002f74:	e2ec      	b.n	8003550 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f7e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002f80:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8002f8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f040 8161 	bne.w	8003258 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002f96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d152      	bne.n	8003046 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	881b      	ldrh	r3, [r3, #0]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb0:	81fb      	strh	r3, [r7, #14]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	89fb      	ldrh	r3, [r7, #14]
 8002fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3328      	adds	r3, #40	; 0x28
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	3302      	adds	r3, #2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	441a      	add	r2, r3
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003004:	2100      	movs	r1, #0
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f006 f8cf 	bl	80091aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 829b 	beq.w	8003550 <PCD_EP_ISR_Handler+0x5e4>
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f040 8296 	bne.w	8003550 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003030:	b2da      	uxtb	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	b292      	uxth	r2, r2
 8003038:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003044:	e284      	b.n	8003550 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003056:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305c:	2b00      	cmp	r3, #0
 800305e:	d034      	beq.n	80030ca <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003068:	b29b      	uxth	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	3306      	adds	r3, #6
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f004 fa7f 	bl	80075a2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80030b0:	4013      	ands	r3, r2
 80030b2:	823b      	strh	r3, [r7, #16]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	8a3a      	ldrh	r2, [r7, #16]
 80030ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030be:	b292      	uxth	r2, r2
 80030c0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f006 f844 	bl	8009150 <HAL_PCD_SetupStageCallback>
 80030c8:	e242      	b.n	8003550 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80030ca:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f280 823e 	bge.w	8003550 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	b29a      	uxth	r2, r3
 80030dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80030e0:	4013      	ands	r3, r2
 80030e2:	83bb      	strh	r3, [r7, #28]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	8bba      	ldrh	r2, [r7, #28]
 80030ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030ee:	b292      	uxth	r2, r2
 80030f0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	461a      	mov	r2, r3
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	3306      	adds	r3, #6
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d019      	beq.n	800315a <PCD_EP_ISR_Handler+0x1ee>
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d015      	beq.n	800315a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6818      	ldr	r0, [r3, #0]
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	6959      	ldr	r1, [r3, #20]
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800313e:	b29b      	uxth	r3, r3
 8003140:	f004 fa2f 	bl	80075a2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	441a      	add	r2, r3
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003152:	2100      	movs	r1, #0
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f006 f80d 	bl	8009174 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	b29b      	uxth	r3, r3
 8003162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003166:	2b00      	cmp	r3, #0
 8003168:	f040 81f2 	bne.w	8003550 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800317a:	b29b      	uxth	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	4413      	add	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d112      	bne.n	80031ba <PCD_EP_ISR_Handler+0x24e>
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	b29b      	uxth	r3, r3
 800319a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800319e:	b29a      	uxth	r2, r3
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	801a      	strh	r2, [r3, #0]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	801a      	strh	r2, [r3, #0]
 80031b8:	e02f      	b.n	800321a <PCD_EP_ISR_Handler+0x2ae>
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	2b3e      	cmp	r3, #62	; 0x3e
 80031c0:	d813      	bhi.n	80031ea <PCD_EP_ISR_Handler+0x27e>
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	633b      	str	r3, [r7, #48]	; 0x30
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <PCD_EP_ISR_Handler+0x270>
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	3301      	adds	r3, #1
 80031da:	633b      	str	r3, [r7, #48]	; 0x30
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	b29b      	uxth	r3, r3
 80031e0:	029b      	lsls	r3, r3, #10
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	801a      	strh	r2, [r3, #0]
 80031e8:	e017      	b.n	800321a <PCD_EP_ISR_Handler+0x2ae>
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	633b      	str	r3, [r7, #48]	; 0x30
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d102      	bne.n	8003204 <PCD_EP_ISR_Handler+0x298>
 80031fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003200:	3b01      	subs	r3, #1
 8003202:	633b      	str	r3, [r7, #48]	; 0x30
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	b29b      	uxth	r3, r3
 8003208:	029b      	lsls	r3, r3, #10
 800320a:	b29b      	uxth	r3, r3
 800320c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003214:	b29a      	uxth	r2, r3
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	881b      	ldrh	r3, [r3, #0]
 8003220:	b29b      	uxth	r3, r3
 8003222:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800322a:	827b      	strh	r3, [r7, #18]
 800322c:	8a7b      	ldrh	r3, [r7, #18]
 800322e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003232:	827b      	strh	r3, [r7, #18]
 8003234:	8a7b      	ldrh	r3, [r7, #18]
 8003236:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800323a:	827b      	strh	r3, [r7, #18]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	8a7b      	ldrh	r3, [r7, #18]
 8003242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800324a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800324e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003252:	b29b      	uxth	r3, r3
 8003254:	8013      	strh	r3, [r2, #0]
 8003256:	e17b      	b.n	8003550 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800326a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800326e:	2b00      	cmp	r3, #0
 8003270:	f280 80ea 	bge.w	8003448 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	b29a      	uxth	r2, r3
 8003286:	f640 738f 	movw	r3, #3983	; 0xf8f
 800328a:	4013      	ands	r3, r2
 800328c:	853b      	strh	r3, [r7, #40]	; 0x28
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800329e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032a2:	b292      	uxth	r2, r2
 80032a4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80032a6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	7b1b      	ldrb	r3, [r3, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d122      	bne.n	800330a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	3306      	adds	r3, #6
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032ec:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80032ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 8087 	beq.w	8003404 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	6959      	ldr	r1, [r3, #20]
 80032fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003300:	88da      	ldrh	r2, [r3, #6]
 8003302:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003304:	f004 f94d 	bl	80075a2 <USB_ReadPMA>
 8003308:	e07c      	b.n	8003404 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	78db      	ldrb	r3, [r3, #3]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d108      	bne.n	8003324 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003312:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003314:	461a      	mov	r2, r3
 8003316:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f927 	bl	800356c <HAL_PCD_EP_DB_Receive>
 800331e:	4603      	mov	r3, r0
 8003320:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003322:	e06f      	b.n	8003404 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	b29b      	uxth	r3, r3
 8003336:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800333e:	847b      	strh	r3, [r7, #34]	; 0x22
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	441a      	add	r2, r3
 800334e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800335c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003360:	b29b      	uxth	r3, r3
 8003362:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d021      	beq.n	80033c2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003386:	b29b      	uxth	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4413      	add	r3, r2
 8003392:	3302      	adds	r3, #2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6812      	ldr	r2, [r2, #0]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033a6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80033a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d02a      	beq.n	8003404 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	6959      	ldr	r1, [r3, #20]
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	891a      	ldrh	r2, [r3, #8]
 80033ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033bc:	f004 f8f1 	bl	80075a2 <USB_ReadPMA>
 80033c0:	e020      	b.n	8003404 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	3306      	adds	r3, #6
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033ea:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80033ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	6959      	ldr	r1, [r3, #20]
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	895a      	ldrh	r2, [r3, #10]
 80033fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003400:	f004 f8cf 	bl	80075a2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	69da      	ldr	r2, [r3, #28]
 8003408:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800340a:	441a      	add	r2, r3
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	695a      	ldr	r2, [r3, #20]
 8003414:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003416:	441a      	add	r2, r3
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d004      	beq.n	800342e <PCD_EP_ISR_Handler+0x4c2>
 8003424:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	691b      	ldr	r3, [r3, #16]
 800342a:	429a      	cmp	r2, r3
 800342c:	d206      	bcs.n	800343c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f005 fe9d 	bl	8009174 <HAL_PCD_DataOutStageCallback>
 800343a:	e005      	b.n	8003448 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003442:	4618      	mov	r0, r3
 8003444:	f002 f8f2 	bl	800562c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003448:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800344a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800344e:	2b00      	cmp	r3, #0
 8003450:	d07e      	beq.n	8003550 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003452:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003456:	1c5a      	adds	r2, r3, #1
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	4413      	add	r3, r2
 8003464:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800347c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003480:	843b      	strh	r3, [r7, #32]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	441a      	add	r2, r3
 8003490:	8c3b      	ldrh	r3, [r7, #32]
 8003492:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003496:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800349a:	b29b      	uxth	r3, r3
 800349c:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	78db      	ldrb	r3, [r3, #3]
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d00c      	beq.n	80034c0 <PCD_EP_ISR_Handler+0x554>
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	78db      	ldrb	r3, [r3, #3]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d008      	beq.n	80034c0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d146      	bne.n	8003544 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80034b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d141      	bne.n	8003544 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	4413      	add	r3, r2
 80034d4:	3302      	adds	r3, #2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034e8:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	8bfb      	ldrh	r3, [r7, #30]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d906      	bls.n	8003502 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	699a      	ldr	r2, [r3, #24]
 80034f8:	8bfb      	ldrh	r3, [r7, #30]
 80034fa:	1ad2      	subs	r2, r2, r3
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	619a      	str	r2, [r3, #24]
 8003500:	e002      	b.n	8003508 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	2200      	movs	r2, #0
 8003506:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d106      	bne.n	800351e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f005 fe47 	bl	80091aa <HAL_PCD_DataInStageCallback>
 800351c:	e018      	b.n	8003550 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	695a      	ldr	r2, [r3, #20]
 8003522:	8bfb      	ldrh	r3, [r7, #30]
 8003524:	441a      	add	r2, r3
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	8bfb      	ldrh	r3, [r7, #30]
 8003530:	441a      	add	r2, r3
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800353c:	4618      	mov	r0, r3
 800353e:	f002 f875 	bl	800562c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003542:	e005      	b.n	8003550 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003544:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003546:	461a      	mov	r2, r3
 8003548:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f91b 	bl	8003786 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003558:	b29b      	uxth	r3, r3
 800355a:	b21b      	sxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	f6ff ad0a 	blt.w	8002f76 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3738      	adds	r7, #56	; 0x38
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	4613      	mov	r3, r2
 8003578:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d07e      	beq.n	8003682 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800358c:	b29b      	uxth	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	3302      	adds	r3, #2
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	8b7b      	ldrh	r3, [r7, #26]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d306      	bcc.n	80035c6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	699a      	ldr	r2, [r3, #24]
 80035bc:	8b7b      	ldrh	r3, [r7, #26]
 80035be:	1ad2      	subs	r2, r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	619a      	str	r2, [r3, #24]
 80035c4:	e002      	b.n	80035cc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2200      	movs	r2, #0
 80035ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d123      	bne.n	800361c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	461a      	mov	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ee:	833b      	strh	r3, [r7, #24]
 80035f0:	8b3b      	ldrh	r3, [r7, #24]
 80035f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80035f6:	833b      	strh	r3, [r7, #24]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	441a      	add	r2, r3
 8003606:	8b3b      	ldrh	r3, [r7, #24]
 8003608:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800360c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003610:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003618:	b29b      	uxth	r3, r3
 800361a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d01f      	beq.n	8003666 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003640:	82fb      	strh	r3, [r7, #22]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	441a      	add	r2, r3
 8003650:	8afb      	ldrh	r3, [r7, #22]
 8003652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800365a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800365e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003662:	b29b      	uxth	r3, r3
 8003664:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003666:	8b7b      	ldrh	r3, [r7, #26]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 8087 	beq.w	800377c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	6959      	ldr	r1, [r3, #20]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	891a      	ldrh	r2, [r3, #8]
 800367a:	8b7b      	ldrh	r3, [r7, #26]
 800367c:	f003 ff91 	bl	80075a2 <USB_ReadPMA>
 8003680:	e07c      	b.n	800377c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800368a:	b29b      	uxth	r3, r3
 800368c:	461a      	mov	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4413      	add	r3, r2
 8003696:	3306      	adds	r3, #6
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	6812      	ldr	r2, [r2, #0]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036aa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	8b7b      	ldrh	r3, [r7, #26]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d306      	bcc.n	80036c4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	8b7b      	ldrh	r3, [r7, #26]
 80036bc:	1ad2      	subs	r2, r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	619a      	str	r2, [r3, #24]
 80036c2:	e002      	b.n	80036ca <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	2200      	movs	r2, #0
 80036c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d123      	bne.n	800371a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ec:	83fb      	strh	r3, [r7, #30]
 80036ee:	8bfb      	ldrh	r3, [r7, #30]
 80036f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036f4:	83fb      	strh	r3, [r7, #30]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	441a      	add	r2, r3
 8003704:	8bfb      	ldrh	r3, [r7, #30]
 8003706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800370a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800370e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003716:	b29b      	uxth	r3, r3
 8003718:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003720:	2b00      	cmp	r3, #0
 8003722:	d11f      	bne.n	8003764 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	b29b      	uxth	r3, r3
 8003736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	83bb      	strh	r3, [r7, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	441a      	add	r2, r3
 800374e:	8bbb      	ldrh	r3, [r7, #28]
 8003750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800375c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003760:	b29b      	uxth	r3, r3
 8003762:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003764:	8b7b      	ldrh	r3, [r7, #26]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d008      	beq.n	800377c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	6959      	ldr	r1, [r3, #20]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	895a      	ldrh	r2, [r3, #10]
 8003776:	8b7b      	ldrh	r3, [r7, #26]
 8003778:	f003 ff13 	bl	80075a2 <USB_ReadPMA>
    }
  }

  return count;
 800377c:	8b7b      	ldrh	r3, [r7, #26]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b0a2      	sub	sp, #136	; 0x88
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	4613      	mov	r3, r2
 8003792:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003794:	88fb      	ldrh	r3, [r7, #6]
 8003796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 81c7 	beq.w	8003b2e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	4413      	add	r3, r2
 80037b4:	3302      	adds	r3, #2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	4413      	add	r3, r2
 80037be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037c2:	881b      	ldrh	r3, [r3, #0]
 80037c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	699a      	ldr	r2, [r3, #24]
 80037d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d907      	bls.n	80037e8 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	699a      	ldr	r2, [r3, #24]
 80037dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80037e0:	1ad2      	subs	r2, r2, r3
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	619a      	str	r2, [r3, #24]
 80037e6:	e002      	b.n	80037ee <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2200      	movs	r2, #0
 80037ec:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f040 80b9 	bne.w	800396a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	785b      	ldrb	r3, [r3, #1]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d126      	bne.n	800384e <HAL_PCD_EP_DB_Transmit+0xc8>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	62bb      	str	r3, [r7, #40]	; 0x28
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800380e:	b29b      	uxth	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	4413      	add	r3, r2
 8003816:	62bb      	str	r3, [r7, #40]	; 0x28
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	011a      	lsls	r2, r3, #4
 800381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003820:	4413      	add	r3, r2
 8003822:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003826:	627b      	str	r3, [r7, #36]	; 0x24
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	b29b      	uxth	r3, r3
 800382e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003832:	b29a      	uxth	r2, r3
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	801a      	strh	r2, [r3, #0]
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	b29b      	uxth	r3, r3
 800383e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003846:	b29a      	uxth	r2, r3
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	801a      	strh	r2, [r3, #0]
 800384c:	e01a      	b.n	8003884 <HAL_PCD_EP_DB_Transmit+0xfe>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	785b      	ldrb	r3, [r3, #1]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d116      	bne.n	8003884 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	633b      	str	r3, [r7, #48]	; 0x30
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003864:	b29b      	uxth	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	4413      	add	r3, r2
 800386c:	633b      	str	r3, [r7, #48]	; 0x30
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	011a      	lsls	r2, r3, #4
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	4413      	add	r3, r2
 8003878:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800387c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	2200      	movs	r2, #0
 8003882:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	623b      	str	r3, [r7, #32]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	785b      	ldrb	r3, [r3, #1]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d126      	bne.n	80038e0 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	61bb      	str	r3, [r7, #24]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	4413      	add	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	011a      	lsls	r2, r3, #4
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	4413      	add	r3, r2
 80038b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	801a      	strh	r2, [r3, #0]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d8:	b29a      	uxth	r2, r3
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	801a      	strh	r2, [r3, #0]
 80038de:	e017      	b.n	8003910 <HAL_PCD_EP_DB_Transmit+0x18a>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	785b      	ldrb	r3, [r3, #1]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d113      	bne.n	8003910 <HAL_PCD_EP_DB_Transmit+0x18a>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	461a      	mov	r2, r3
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	4413      	add	r3, r2
 80038f8:	623b      	str	r3, [r7, #32]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	011a      	lsls	r2, r3, #4
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	4413      	add	r3, r2
 8003904:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003908:	61fb      	str	r3, [r7, #28]
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	2200      	movs	r2, #0
 800390e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	4619      	mov	r1, r3
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f005 fc47 	bl	80091aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 82d4 	beq.w	8003ed0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	881b      	ldrh	r3, [r3, #0]
 8003938:	b29b      	uxth	r3, r3
 800393a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003942:	827b      	strh	r3, [r7, #18]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	441a      	add	r2, r3
 8003952:	8a7b      	ldrh	r3, [r7, #18]
 8003954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800395c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003964:	b29b      	uxth	r3, r3
 8003966:	8013      	strh	r3, [r2, #0]
 8003968:	e2b2      	b.n	8003ed0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d021      	beq.n	80039b8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	b29b      	uxth	r3, r3
 8003986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800398a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	461a      	mov	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	441a      	add	r2, r3
 80039a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80039a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039be:	2b01      	cmp	r3, #1
 80039c0:	f040 8286 	bne.w	8003ed0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039cc:	441a      	add	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80039da:	441a      	add	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	6a1a      	ldr	r2, [r3, #32]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d309      	bcc.n	8003a00 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	6a1a      	ldr	r2, [r3, #32]
 80039f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039f8:	1ad2      	subs	r2, r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	621a      	str	r2, [r3, #32]
 80039fe:	e015      	b.n	8003a2c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d107      	bne.n	8003a18 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003a08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a0c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a16:	e009      	b.n	8003a2c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	785b      	ldrb	r3, [r3, #1]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d155      	bne.n	8003ae0 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a48:	4413      	add	r3, r2
 8003a4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	011a      	lsls	r2, r3, #4
 8003a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a54:	4413      	add	r3, r2
 8003a56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d112      	bne.n	8003a88 <HAL_PCD_EP_DB_Transmit+0x302>
 8003a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a70:	801a      	strh	r2, [r3, #0]
 8003a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a84:	801a      	strh	r2, [r3, #0]
 8003a86:	e047      	b.n	8003b18 <HAL_PCD_EP_DB_Transmit+0x392>
 8003a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a8a:	2b3e      	cmp	r3, #62	; 0x3e
 8003a8c:	d811      	bhi.n	8003ab2 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	029b      	lsls	r3, r3, #10
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aae:	801a      	strh	r2, [r3, #0]
 8003ab0:	e032      	b.n	8003b18 <HAL_PCD_EP_DB_Transmit+0x392>
 8003ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab4:	095b      	lsrs	r3, r3, #5
 8003ab6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aba:	f003 031f 	and.w	r3, r3, #31
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d102      	bne.n	8003ac8 <HAL_PCD_EP_DB_Transmit+0x342>
 8003ac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	029b      	lsls	r3, r3, #10
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003adc:	801a      	strh	r2, [r3, #0]
 8003ade:	e01b      	b.n	8003b18 <HAL_PCD_EP_DB_Transmit+0x392>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	785b      	ldrb	r3, [r3, #1]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d117      	bne.n	8003b18 <HAL_PCD_EP_DB_Transmit+0x392>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	643b      	str	r3, [r7, #64]	; 0x40
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afc:	4413      	add	r3, r2
 8003afe:	643b      	str	r3, [r7, #64]	; 0x40
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	011a      	lsls	r2, r3, #4
 8003b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b08:	4413      	add	r3, r2
 8003b0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b16:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	6959      	ldr	r1, [r3, #20]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	891a      	ldrh	r2, [r3, #8]
 8003b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f003 fcf6 	bl	8007518 <USB_WritePMA>
 8003b2c:	e1d0      	b.n	8003ed0 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4413      	add	r3, r2
 8003b42:	3306      	adds	r3, #6
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b50:	881b      	ldrh	r3, [r3, #0]
 8003b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d307      	bcc.n	8003b76 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b6e:	1ad2      	subs	r2, r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	619a      	str	r2, [r3, #24]
 8003b74:	e002      	b.n	8003b7c <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f040 80c4 	bne.w	8003d0e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	785b      	ldrb	r3, [r3, #1]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d126      	bne.n	8003bdc <HAL_PCD_EP_DB_Transmit+0x456>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba2:	4413      	add	r3, r2
 8003ba4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	011a      	lsls	r2, r3, #4
 8003bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bae:	4413      	add	r3, r2
 8003bb0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bc4:	801a      	strh	r2, [r3, #0]
 8003bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	e01a      	b.n	8003c12 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	785b      	ldrb	r3, [r3, #1]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d116      	bne.n	8003c12 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	677b      	str	r3, [r7, #116]	; 0x74
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf8:	4413      	add	r3, r2
 8003bfa:	677b      	str	r3, [r7, #116]	; 0x74
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	011a      	lsls	r2, r3, #4
 8003c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c04:	4413      	add	r3, r2
 8003c06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c0a:	673b      	str	r3, [r7, #112]	; 0x70
 8003c0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c0e:	2200      	movs	r2, #0
 8003c10:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	785b      	ldrb	r3, [r3, #1]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d12f      	bne.n	8003c80 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	461a      	mov	r2, r3
 8003c34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c38:	4413      	add	r3, r2
 8003c3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	011a      	lsls	r2, r3, #4
 8003c44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c48:	4413      	add	r3, r2
 8003c4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c56:	881b      	ldrh	r3, [r3, #0]
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c64:	801a      	strh	r2, [r3, #0]
 8003c66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c6a:	881b      	ldrh	r3, [r3, #0]
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c7c:	801a      	strh	r2, [r3, #0]
 8003c7e:	e017      	b.n	8003cb0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	785b      	ldrb	r3, [r3, #1]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d113      	bne.n	8003cb0 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c96:	4413      	add	r3, r2
 8003c98:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	011a      	lsls	r2, r3, #4
 8003ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ca8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003caa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cac:	2200      	movs	r2, #0
 8003cae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f005 fa77 	bl	80091aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f040 8104 	bne.w	8003ed0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	461a      	mov	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	441a      	add	r2, r3
 8003cf4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	8013      	strh	r3, [r2, #0]
 8003d0c:	e0e0      	b.n	8003ed0 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d121      	bne.n	8003d5c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d32:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	441a      	add	r2, r3
 8003d44:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003d48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	f040 80b4 	bne.w	8003ed0 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	695a      	ldr	r2, [r3, #20]
 8003d6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d70:	441a      	add	r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d7e:	441a      	add	r2, r3
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	6a1a      	ldr	r2, [r3, #32]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d309      	bcc.n	8003da4 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	6a1a      	ldr	r2, [r3, #32]
 8003d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d9c:	1ad2      	subs	r2, r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	621a      	str	r2, [r3, #32]
 8003da2:	e015      	b.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d107      	bne.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003dac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003db0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003dba:	e009      	b.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	667b      	str	r3, [r7, #100]	; 0x64
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	785b      	ldrb	r3, [r3, #1]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d155      	bne.n	8003e8a <HAL_PCD_EP_DB_Transmit+0x704>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	461a      	mov	r2, r3
 8003df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003df2:	4413      	add	r3, r2
 8003df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	011a      	lsls	r2, r3, #4
 8003dfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dfe:	4413      	add	r3, r2
 8003e00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e04:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d112      	bne.n	8003e32 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003e0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e1a:	801a      	strh	r2, [r3, #0]
 8003e1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e2e:	801a      	strh	r2, [r3, #0]
 8003e30:	e044      	b.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x736>
 8003e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e34:	2b3e      	cmp	r3, #62	; 0x3e
 8003e36:	d811      	bhi.n	8003e5c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	657b      	str	r3, [r7, #84]	; 0x54
 8003e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	657b      	str	r3, [r7, #84]	; 0x54
 8003e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	029b      	lsls	r3, r3, #10
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e58:	801a      	strh	r2, [r3, #0]
 8003e5a:	e02f      	b.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x736>
 8003e5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	657b      	str	r3, [r7, #84]	; 0x54
 8003e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e64:	f003 031f 	and.w	r3, r3, #31
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d102      	bne.n	8003e72 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	657b      	str	r3, [r7, #84]	; 0x54
 8003e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	029b      	lsls	r3, r3, #10
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e86:	801a      	strh	r2, [r3, #0]
 8003e88:	e018      	b.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x736>
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d114      	bne.n	8003ebc <HAL_PCD_EP_DB_Transmit+0x736>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ea0:	4413      	add	r3, r2
 8003ea2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	011a      	lsls	r2, r3, #4
 8003eaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eac:	4413      	add	r3, r2
 8003eae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003eb2:	663b      	str	r3, [r7, #96]	; 0x60
 8003eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003eba:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	6959      	ldr	r1, [r3, #20]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	895a      	ldrh	r2, [r3, #10]
 8003ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	f003 fb24 	bl	8007518 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eea:	823b      	strh	r3, [r7, #16]
 8003eec:	8a3b      	ldrh	r3, [r7, #16]
 8003eee:	f083 0310 	eor.w	r3, r3, #16
 8003ef2:	823b      	strh	r3, [r7, #16]
 8003ef4:	8a3b      	ldrh	r3, [r7, #16]
 8003ef6:	f083 0320 	eor.w	r3, r3, #32
 8003efa:	823b      	strh	r3, [r7, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	441a      	add	r2, r3
 8003f0a:	8a3b      	ldrh	r3, [r7, #16]
 8003f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3788      	adds	r7, #136	; 0x88
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b087      	sub	sp, #28
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	460b      	mov	r3, r1
 8003f36:	817b      	strh	r3, [r7, #10]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003f3c:	897b      	ldrh	r3, [r7, #10]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00b      	beq.n	8003f60 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f48:	897b      	ldrh	r3, [r7, #10]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	00db      	lsls	r3, r3, #3
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	e009      	b.n	8003f74 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f60:	897a      	ldrh	r2, [r7, #10]
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4413      	add	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003f74:	893b      	ldrh	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d107      	bne.n	8003f8a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	80da      	strh	r2, [r3, #6]
 8003f88:	e00b      	b.n	8003fa2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	0c1b      	lsrs	r3, r3, #16
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	371c      	adds	r7, #28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bc80      	pop	{r7}
 8003fac:	4770      	bx	lr
	...

08003fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e272      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8087 	beq.w	80040de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fd0:	4b92      	ldr	r3, [pc, #584]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 030c 	and.w	r3, r3, #12
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d00c      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fdc:	4b8f      	ldr	r3, [pc, #572]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 030c 	and.w	r3, r3, #12
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d112      	bne.n	800400e <HAL_RCC_OscConfig+0x5e>
 8003fe8:	4b8c      	ldr	r3, [pc, #560]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff4:	d10b      	bne.n	800400e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff6:	4b89      	ldr	r3, [pc, #548]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d06c      	beq.n	80040dc <HAL_RCC_OscConfig+0x12c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d168      	bne.n	80040dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e24c      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004016:	d106      	bne.n	8004026 <HAL_RCC_OscConfig+0x76>
 8004018:	4b80      	ldr	r3, [pc, #512]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a7f      	ldr	r2, [pc, #508]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 800401e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	e02e      	b.n	8004084 <HAL_RCC_OscConfig+0xd4>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10c      	bne.n	8004048 <HAL_RCC_OscConfig+0x98>
 800402e:	4b7b      	ldr	r3, [pc, #492]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a7a      	ldr	r2, [pc, #488]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4b78      	ldr	r3, [pc, #480]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a77      	ldr	r2, [pc, #476]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004040:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e01d      	b.n	8004084 <HAL_RCC_OscConfig+0xd4>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0xbc>
 8004052:	4b72      	ldr	r3, [pc, #456]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a71      	ldr	r2, [pc, #452]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	4b6f      	ldr	r3, [pc, #444]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a6e      	ldr	r2, [pc, #440]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e00b      	b.n	8004084 <HAL_RCC_OscConfig+0xd4>
 800406c:	4b6b      	ldr	r3, [pc, #428]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a6a      	ldr	r2, [pc, #424]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	4b68      	ldr	r3, [pc, #416]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a67      	ldr	r2, [pc, #412]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 800407e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004082:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d013      	beq.n	80040b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fd f8e6 	bl	800125c <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004094:	f7fd f8e2 	bl	800125c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b64      	cmp	r3, #100	; 0x64
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e200      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a6:	4b5d      	ldr	r3, [pc, #372]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0f0      	beq.n	8004094 <HAL_RCC_OscConfig+0xe4>
 80040b2:	e014      	b.n	80040de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fd f8d2 	bl	800125c <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040bc:	f7fd f8ce 	bl	800125c <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b64      	cmp	r3, #100	; 0x64
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e1ec      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ce:	4b53      	ldr	r3, [pc, #332]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x10c>
 80040da:	e000      	b.n	80040de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d063      	beq.n	80041b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040ea:	4b4c      	ldr	r3, [pc, #304]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 030c 	and.w	r3, r3, #12
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00b      	beq.n	800410e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040f6:	4b49      	ldr	r3, [pc, #292]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 030c 	and.w	r3, r3, #12
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d11c      	bne.n	800413c <HAL_RCC_OscConfig+0x18c>
 8004102:	4b46      	ldr	r3, [pc, #280]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d116      	bne.n	800413c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410e:	4b43      	ldr	r3, [pc, #268]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <HAL_RCC_OscConfig+0x176>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d001      	beq.n	8004126 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e1c0      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004126:	4b3d      	ldr	r3, [pc, #244]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4939      	ldr	r1, [pc, #228]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004136:	4313      	orrs	r3, r2
 8004138:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800413a:	e03a      	b.n	80041b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d020      	beq.n	8004186 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004144:	4b36      	ldr	r3, [pc, #216]	; (8004220 <HAL_RCC_OscConfig+0x270>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fd f887 	bl	800125c <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004152:	f7fd f883 	bl	800125c <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e1a1      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004164:	4b2d      	ldr	r3, [pc, #180]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004170:	4b2a      	ldr	r3, [pc, #168]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4927      	ldr	r1, [pc, #156]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 8004180:	4313      	orrs	r3, r2
 8004182:	600b      	str	r3, [r1, #0]
 8004184:	e015      	b.n	80041b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004186:	4b26      	ldr	r3, [pc, #152]	; (8004220 <HAL_RCC_OscConfig+0x270>)
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418c:	f7fd f866 	bl	800125c <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004194:	f7fd f862 	bl	800125c <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e180      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a6:	4b1d      	ldr	r3, [pc, #116]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d03a      	beq.n	8004234 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d019      	beq.n	80041fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c6:	4b17      	ldr	r3, [pc, #92]	; (8004224 <HAL_RCC_OscConfig+0x274>)
 80041c8:	2201      	movs	r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041cc:	f7fd f846 	bl	800125c <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d4:	f7fd f842 	bl	800125c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e160      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e6:	4b0d      	ldr	r3, [pc, #52]	; (800421c <HAL_RCC_OscConfig+0x26c>)
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041f2:	2001      	movs	r0, #1
 80041f4:	f000 fac4 	bl	8004780 <RCC_Delay>
 80041f8:	e01c      	b.n	8004234 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041fa:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <HAL_RCC_OscConfig+0x274>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004200:	f7fd f82c 	bl	800125c <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004206:	e00f      	b.n	8004228 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004208:	f7fd f828 	bl	800125c <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d908      	bls.n	8004228 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e146      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>
 800421a:	bf00      	nop
 800421c:	40021000 	.word	0x40021000
 8004220:	42420000 	.word	0x42420000
 8004224:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004228:	4b92      	ldr	r3, [pc, #584]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1e9      	bne.n	8004208 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80a6 	beq.w	800438e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004242:	2300      	movs	r3, #0
 8004244:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004246:	4b8b      	ldr	r3, [pc, #556]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10d      	bne.n	800426e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004252:	4b88      	ldr	r3, [pc, #544]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	4a87      	ldr	r2, [pc, #540]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 8004258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800425c:	61d3      	str	r3, [r2, #28]
 800425e:	4b85      	ldr	r3, [pc, #532]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426e:	4b82      	ldr	r3, [pc, #520]	; (8004478 <HAL_RCC_OscConfig+0x4c8>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004276:	2b00      	cmp	r3, #0
 8004278:	d118      	bne.n	80042ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800427a:	4b7f      	ldr	r3, [pc, #508]	; (8004478 <HAL_RCC_OscConfig+0x4c8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a7e      	ldr	r2, [pc, #504]	; (8004478 <HAL_RCC_OscConfig+0x4c8>)
 8004280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004286:	f7fc ffe9 	bl	800125c <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428e:	f7fc ffe5 	bl	800125c <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b64      	cmp	r3, #100	; 0x64
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e103      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a0:	4b75      	ldr	r3, [pc, #468]	; (8004478 <HAL_RCC_OscConfig+0x4c8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f0      	beq.n	800428e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d106      	bne.n	80042c2 <HAL_RCC_OscConfig+0x312>
 80042b4:	4b6f      	ldr	r3, [pc, #444]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	4a6e      	ldr	r2, [pc, #440]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	6213      	str	r3, [r2, #32]
 80042c0:	e02d      	b.n	800431e <HAL_RCC_OscConfig+0x36e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10c      	bne.n	80042e4 <HAL_RCC_OscConfig+0x334>
 80042ca:	4b6a      	ldr	r3, [pc, #424]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	4a69      	ldr	r2, [pc, #420]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	6213      	str	r3, [r2, #32]
 80042d6:	4b67      	ldr	r3, [pc, #412]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	4a66      	ldr	r2, [pc, #408]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 80042dc:	f023 0304 	bic.w	r3, r3, #4
 80042e0:	6213      	str	r3, [r2, #32]
 80042e2:	e01c      	b.n	800431e <HAL_RCC_OscConfig+0x36e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	2b05      	cmp	r3, #5
 80042ea:	d10c      	bne.n	8004306 <HAL_RCC_OscConfig+0x356>
 80042ec:	4b61      	ldr	r3, [pc, #388]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	4a60      	ldr	r2, [pc, #384]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 80042f2:	f043 0304 	orr.w	r3, r3, #4
 80042f6:	6213      	str	r3, [r2, #32]
 80042f8:	4b5e      	ldr	r3, [pc, #376]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	4a5d      	ldr	r2, [pc, #372]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6213      	str	r3, [r2, #32]
 8004304:	e00b      	b.n	800431e <HAL_RCC_OscConfig+0x36e>
 8004306:	4b5b      	ldr	r3, [pc, #364]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	4a5a      	ldr	r2, [pc, #360]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	f023 0301 	bic.w	r3, r3, #1
 8004310:	6213      	str	r3, [r2, #32]
 8004312:	4b58      	ldr	r3, [pc, #352]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	4a57      	ldr	r2, [pc, #348]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 8004318:	f023 0304 	bic.w	r3, r3, #4
 800431c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d015      	beq.n	8004352 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004326:	f7fc ff99 	bl	800125c <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432c:	e00a      	b.n	8004344 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800432e:	f7fc ff95 	bl	800125c <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	f241 3288 	movw	r2, #5000	; 0x1388
 800433c:	4293      	cmp	r3, r2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e0b1      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004344:	4b4b      	ldr	r3, [pc, #300]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0ee      	beq.n	800432e <HAL_RCC_OscConfig+0x37e>
 8004350:	e014      	b.n	800437c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004352:	f7fc ff83 	bl	800125c <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800435a:	f7fc ff7f 	bl	800125c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f241 3288 	movw	r2, #5000	; 0x1388
 8004368:	4293      	cmp	r3, r2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e09b      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004370:	4b40      	ldr	r3, [pc, #256]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1ee      	bne.n	800435a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800437c:	7dfb      	ldrb	r3, [r7, #23]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d105      	bne.n	800438e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004382:	4b3c      	ldr	r3, [pc, #240]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	4a3b      	ldr	r2, [pc, #236]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 8004388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800438c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 8087 	beq.w	80044a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004398:	4b36      	ldr	r3, [pc, #216]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d061      	beq.n	8004468 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d146      	bne.n	800443a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ac:	4b33      	ldr	r3, [pc, #204]	; (800447c <HAL_RCC_OscConfig+0x4cc>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b2:	f7fc ff53 	bl	800125c <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043b8:	e008      	b.n	80043cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ba:	f7fc ff4f 	bl	800125c <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e06d      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043cc:	4b29      	ldr	r3, [pc, #164]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f0      	bne.n	80043ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e0:	d108      	bne.n	80043f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043e2:	4b24      	ldr	r3, [pc, #144]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	4921      	ldr	r1, [pc, #132]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043f4:	4b1f      	ldr	r3, [pc, #124]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a19      	ldr	r1, [r3, #32]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	430b      	orrs	r3, r1
 8004406:	491b      	ldr	r1, [pc, #108]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 8004408:	4313      	orrs	r3, r2
 800440a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800440c:	4b1b      	ldr	r3, [pc, #108]	; (800447c <HAL_RCC_OscConfig+0x4cc>)
 800440e:	2201      	movs	r2, #1
 8004410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004412:	f7fc ff23 	bl	800125c <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441a:	f7fc ff1f 	bl	800125c <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e03d      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800442c:	4b11      	ldr	r3, [pc, #68]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <HAL_RCC_OscConfig+0x46a>
 8004438:	e035      	b.n	80044a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800443a:	4b10      	ldr	r3, [pc, #64]	; (800447c <HAL_RCC_OscConfig+0x4cc>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004440:	f7fc ff0c 	bl	800125c <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004448:	f7fc ff08 	bl	800125c <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e026      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_RCC_OscConfig+0x4c4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x498>
 8004466:	e01e      	b.n	80044a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d107      	bne.n	8004480 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e019      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>
 8004474:	40021000 	.word	0x40021000
 8004478:	40007000 	.word	0x40007000
 800447c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <HAL_RCC_OscConfig+0x500>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	429a      	cmp	r2, r3
 8004492:	d106      	bne.n	80044a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449e:	429a      	cmp	r2, r3
 80044a0:	d001      	beq.n	80044a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	40021000 	.word	0x40021000

080044b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e0d0      	b.n	800466a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044c8:	4b6a      	ldr	r3, [pc, #424]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d910      	bls.n	80044f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d6:	4b67      	ldr	r3, [pc, #412]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f023 0207 	bic.w	r2, r3, #7
 80044de:	4965      	ldr	r1, [pc, #404]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044e6:	4b63      	ldr	r3, [pc, #396]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d001      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e0b8      	b.n	800466a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d020      	beq.n	8004546 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004510:	4b59      	ldr	r3, [pc, #356]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4a58      	ldr	r2, [pc, #352]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004516:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800451a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004528:	4b53      	ldr	r3, [pc, #332]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	4a52      	ldr	r2, [pc, #328]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 800452e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004532:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004534:	4b50      	ldr	r3, [pc, #320]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	494d      	ldr	r1, [pc, #308]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004542:	4313      	orrs	r3, r2
 8004544:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	2b00      	cmp	r3, #0
 8004550:	d040      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d107      	bne.n	800456a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455a:	4b47      	ldr	r3, [pc, #284]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d115      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e07f      	b.n	800466a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d107      	bne.n	8004582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004572:	4b41      	ldr	r3, [pc, #260]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e073      	b.n	800466a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004582:	4b3d      	ldr	r3, [pc, #244]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e06b      	b.n	800466a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004592:	4b39      	ldr	r3, [pc, #228]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f023 0203 	bic.w	r2, r3, #3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4936      	ldr	r1, [pc, #216]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045a4:	f7fc fe5a 	bl	800125c <HAL_GetTick>
 80045a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045aa:	e00a      	b.n	80045c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ac:	f7fc fe56 	bl	800125c <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e053      	b.n	800466a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045c2:	4b2d      	ldr	r3, [pc, #180]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 020c 	and.w	r2, r3, #12
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d1eb      	bne.n	80045ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045d4:	4b27      	ldr	r3, [pc, #156]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d210      	bcs.n	8004604 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e2:	4b24      	ldr	r3, [pc, #144]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 0207 	bic.w	r2, r3, #7
 80045ea:	4922      	ldr	r1, [pc, #136]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	4b20      	ldr	r3, [pc, #128]	; (8004674 <HAL_RCC_ClockConfig+0x1c0>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e032      	b.n	800466a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004610:	4b19      	ldr	r3, [pc, #100]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4916      	ldr	r1, [pc, #88]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 800461e:	4313      	orrs	r3, r2
 8004620:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800462e:	4b12      	ldr	r3, [pc, #72]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	490e      	ldr	r1, [pc, #56]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 800463e:	4313      	orrs	r3, r2
 8004640:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004642:	f000 f821 	bl	8004688 <HAL_RCC_GetSysClockFreq>
 8004646:	4602      	mov	r2, r0
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_RCC_ClockConfig+0x1c4>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	490a      	ldr	r1, [pc, #40]	; (800467c <HAL_RCC_ClockConfig+0x1c8>)
 8004654:	5ccb      	ldrb	r3, [r1, r3]
 8004656:	fa22 f303 	lsr.w	r3, r2, r3
 800465a:	4a09      	ldr	r2, [pc, #36]	; (8004680 <HAL_RCC_ClockConfig+0x1cc>)
 800465c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800465e:	4b09      	ldr	r3, [pc, #36]	; (8004684 <HAL_RCC_ClockConfig+0x1d0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fc fdb8 	bl	80011d8 <HAL_InitTick>

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	40022000 	.word	0x40022000
 8004678:	40021000 	.word	0x40021000
 800467c:	0800c514 	.word	0x0800c514
 8004680:	20000000 	.word	0x20000000
 8004684:	20000004 	.word	0x20000004

08004688 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004688:	b490      	push	{r4, r7}
 800468a:	b08a      	sub	sp, #40	; 0x28
 800468c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800468e:	4b29      	ldr	r3, [pc, #164]	; (8004734 <HAL_RCC_GetSysClockFreq+0xac>)
 8004690:	1d3c      	adds	r4, r7, #4
 8004692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004698:	f240 2301 	movw	r3, #513	; 0x201
 800469c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	2300      	movs	r3, #0
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	2300      	movs	r3, #0
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80046b2:	4b21      	ldr	r3, [pc, #132]	; (8004738 <HAL_RCC_GetSysClockFreq+0xb0>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d002      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x40>
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d003      	beq.n	80046ce <HAL_RCC_GetSysClockFreq+0x46>
 80046c6:	e02b      	b.n	8004720 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046c8:	4b1c      	ldr	r3, [pc, #112]	; (800473c <HAL_RCC_GetSysClockFreq+0xb4>)
 80046ca:	623b      	str	r3, [r7, #32]
      break;
 80046cc:	e02b      	b.n	8004726 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	0c9b      	lsrs	r3, r3, #18
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	3328      	adds	r3, #40	; 0x28
 80046d8:	443b      	add	r3, r7
 80046da:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80046de:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d012      	beq.n	8004710 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046ea:	4b13      	ldr	r3, [pc, #76]	; (8004738 <HAL_RCC_GetSysClockFreq+0xb0>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	0c5b      	lsrs	r3, r3, #17
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	3328      	adds	r3, #40	; 0x28
 80046f6:	443b      	add	r3, r7
 80046f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	4a0e      	ldr	r2, [pc, #56]	; (800473c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004702:	fb03 f202 	mul.w	r2, r3, r2
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
 800470e:	e004      	b.n	800471a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	4a0b      	ldr	r2, [pc, #44]	; (8004740 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004714:	fb02 f303 	mul.w	r3, r2, r3
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	623b      	str	r3, [r7, #32]
      break;
 800471e:	e002      	b.n	8004726 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004720:	4b06      	ldr	r3, [pc, #24]	; (800473c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004722:	623b      	str	r3, [r7, #32]
      break;
 8004724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004726:	6a3b      	ldr	r3, [r7, #32]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3728      	adds	r7, #40	; 0x28
 800472c:	46bd      	mov	sp, r7
 800472e:	bc90      	pop	{r4, r7}
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	0800c4c0 	.word	0x0800c4c0
 8004738:	40021000 	.word	0x40021000
 800473c:	007a1200 	.word	0x007a1200
 8004740:	003d0900 	.word	0x003d0900

08004744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004748:	4b02      	ldr	r3, [pc, #8]	; (8004754 <HAL_RCC_GetHCLKFreq+0x10>)
 800474a:	681b      	ldr	r3, [r3, #0]
}
 800474c:	4618      	mov	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	bc80      	pop	{r7}
 8004752:	4770      	bx	lr
 8004754:	20000000 	.word	0x20000000

08004758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800475c:	f7ff fff2 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 8004760:	4602      	mov	r2, r0
 8004762:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	0adb      	lsrs	r3, r3, #11
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	4903      	ldr	r1, [pc, #12]	; (800477c <HAL_RCC_GetPCLK2Freq+0x24>)
 800476e:	5ccb      	ldrb	r3, [r1, r3]
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004774:	4618      	mov	r0, r3
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40021000 	.word	0x40021000
 800477c:	0800c524 	.word	0x0800c524

08004780 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004788:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <RCC_Delay+0x34>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a0a      	ldr	r2, [pc, #40]	; (80047b8 <RCC_Delay+0x38>)
 800478e:	fba2 2303 	umull	r2, r3, r2, r3
 8004792:	0a5b      	lsrs	r3, r3, #9
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	fb02 f303 	mul.w	r3, r2, r3
 800479a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800479c:	bf00      	nop
  }
  while (Delay --);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1e5a      	subs	r2, r3, #1
 80047a2:	60fa      	str	r2, [r7, #12]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f9      	bne.n	800479c <RCC_Delay+0x1c>
}
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr
 80047b4:	20000000 	.word	0x20000000
 80047b8:	10624dd3 	.word	0x10624dd3

080047bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d07d      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80047d8:	2300      	movs	r3, #0
 80047da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047dc:	4b4f      	ldr	r3, [pc, #316]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10d      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e8:	4b4c      	ldr	r3, [pc, #304]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	4a4b      	ldr	r2, [pc, #300]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f2:	61d3      	str	r3, [r2, #28]
 80047f4:	4b49      	ldr	r3, [pc, #292]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004800:	2301      	movs	r3, #1
 8004802:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004804:	4b46      	ldr	r3, [pc, #280]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d118      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004810:	4b43      	ldr	r3, [pc, #268]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a42      	ldr	r2, [pc, #264]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800481a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800481c:	f7fc fd1e 	bl	800125c <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004822:	e008      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004824:	f7fc fd1a 	bl	800125c <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b64      	cmp	r3, #100	; 0x64
 8004830:	d901      	bls.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e06d      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004836:	4b3a      	ldr	r3, [pc, #232]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0f0      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004842:	4b36      	ldr	r3, [pc, #216]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800484a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d02e      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	429a      	cmp	r2, r3
 800485e:	d027      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004860:	4b2e      	ldr	r3, [pc, #184]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004868:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800486a:	4b2e      	ldr	r3, [pc, #184]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800486c:	2201      	movs	r2, #1
 800486e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004870:	4b2c      	ldr	r3, [pc, #176]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004876:	4a29      	ldr	r2, [pc, #164]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d014      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004886:	f7fc fce9 	bl	800125c <HAL_GetTick>
 800488a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488c:	e00a      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800488e:	f7fc fce5 	bl	800125c <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	f241 3288 	movw	r2, #5000	; 0x1388
 800489c:	4293      	cmp	r3, r2
 800489e:	d901      	bls.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e036      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a4:	4b1d      	ldr	r3, [pc, #116]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0ee      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048b0:	4b1a      	ldr	r3, [pc, #104]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	4917      	ldr	r1, [pc, #92]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048c2:	7dfb      	ldrb	r3, [r7, #23]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d105      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c8:	4b14      	ldr	r3, [pc, #80]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	4a13      	ldr	r2, [pc, #76]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048e0:	4b0e      	ldr	r3, [pc, #56]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	490b      	ldr	r1, [pc, #44]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d008      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048fe:	4b07      	ldr	r3, [pc, #28]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	4904      	ldr	r1, [pc, #16]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490c:	4313      	orrs	r3, r2
 800490e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40021000 	.word	0x40021000
 8004920:	40007000 	.word	0x40007000
 8004924:	42420440 	.word	0x42420440

08004928 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004928:	b590      	push	{r4, r7, lr}
 800492a:	b08d      	sub	sp, #52	; 0x34
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004930:	4b58      	ldr	r3, [pc, #352]	; (8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004932:	f107 040c 	add.w	r4, r7, #12
 8004936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800493c:	f240 2301 	movw	r3, #513	; 0x201
 8004940:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
 8004946:	2300      	movs	r3, #0
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800494a:	2300      	movs	r3, #0
 800494c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	2300      	movs	r3, #0
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b10      	cmp	r3, #16
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b10      	cmp	r3, #16
 8004960:	f200 808e 	bhi.w	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d049      	beq.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d079      	beq.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004970:	e086      	b.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8004972:	4b49      	ldr	r3, [pc, #292]	; (8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004978:	4b47      	ldr	r3, [pc, #284]	; (8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d07f      	beq.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	0c9b      	lsrs	r3, r3, #18
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	3330      	adds	r3, #48	; 0x30
 800498e:	443b      	add	r3, r7
 8004990:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004994:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d017      	beq.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049a0:	4b3d      	ldr	r3, [pc, #244]	; (8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	0c5b      	lsrs	r3, r3, #17
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	3330      	adds	r3, #48	; 0x30
 80049ac:	443b      	add	r3, r7
 80049ae:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00d      	beq.n	80049da <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80049be:	4a37      	ldr	r2, [pc, #220]	; (8004a9c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	fb02 f303 	mul.w	r3, r2, r3
 80049cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ce:	e004      	b.n	80049da <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	4a33      	ldr	r2, [pc, #204]	; (8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80049d4:	fb02 f303 	mul.w	r3, r2, r3
 80049d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80049da:	4b2f      	ldr	r3, [pc, #188]	; (8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049e6:	d102      	bne.n	80049ee <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80049ec:	e04a      	b.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80049ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	4a2c      	ldr	r2, [pc, #176]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80049f4:	fba2 2303 	umull	r2, r3, r2, r3
 80049f8:	085b      	lsrs	r3, r3, #1
 80049fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80049fc:	e042      	b.n	8004a84 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80049fe:	4b26      	ldr	r3, [pc, #152]	; (8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a0e:	d108      	bne.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8004a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a20:	e01f      	b.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a2c:	d109      	bne.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8004a2e:	4b1a      	ldr	r3, [pc, #104]	; (8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8004a3a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a40:	e00f      	b.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a4c:	d11c      	bne.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004a4e:	4b12      	ldr	r3, [pc, #72]	; (8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d016      	beq.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8004a5a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004a5e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a60:	e012      	b.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004a62:	e011      	b.n	8004a88 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004a64:	f7ff fe78 	bl	8004758 <HAL_RCC_GetPCLK2Freq>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	0b9b      	lsrs	r3, r3, #14
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	3301      	adds	r3, #1
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a7e:	e004      	b.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004a80:	bf00      	nop
 8004a82:	e002      	b.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004a84:	bf00      	nop
 8004a86:	e000      	b.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004a88:	bf00      	nop
    }
  }
  return (frequency);
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3734      	adds	r7, #52	; 0x34
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd90      	pop	{r4, r7, pc}
 8004a94:	0800c4d0 	.word	0x0800c4d0
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	007a1200 	.word	0x007a1200
 8004aa0:	003d0900 	.word	0x003d0900
 8004aa4:	aaaaaaab 	.word	0xaaaaaaab

08004aa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004aa8:	b084      	sub	sp, #16
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	f107 0014 	add.w	r0, r7, #20
 8004ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	b004      	add	sp, #16
 8004ac6:	4770      	bx	lr

08004ac8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004ad8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004adc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr

08004af4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004afc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b00:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	4013      	ands	r3, r2
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr

08004b28 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr

08004b40 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b40:	b084      	sub	sp, #16
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	f107 0014 	add.w	r0, r7, #20
 8004b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	b004      	add	sp, #16
 8004b7e:	4770      	bx	lr

08004b80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b09b      	sub	sp, #108	; 0x6c
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	78db      	ldrb	r3, [r3, #3]
 8004bae:	2b03      	cmp	r3, #3
 8004bb0:	d81f      	bhi.n	8004bf2 <USB_ActivateEndpoint+0x72>
 8004bb2:	a201      	add	r2, pc, #4	; (adr r2, 8004bb8 <USB_ActivateEndpoint+0x38>)
 8004bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb8:	08004bc9 	.word	0x08004bc9
 8004bbc:	08004be5 	.word	0x08004be5
 8004bc0:	08004bfb 	.word	0x08004bfb
 8004bc4:	08004bd7 	.word	0x08004bd7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004bc8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bd0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004bd4:	e012      	b.n	8004bfc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004bd6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004bda:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004bde:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004be2:	e00b      	b.n	8004bfc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004be4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004be8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bec:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004bf0:	e004      	b.n	8004bfc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004bf8:	e000      	b.n	8004bfc <USB_ActivateEndpoint+0x7c>
      break;
 8004bfa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	441a      	add	r2, r3
 8004c06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	4413      	add	r3, r2
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	441a      	add	r2, r3
 8004c4c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	7b1b      	ldrb	r3, [r3, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f040 8149 	bne.w	8004f00 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	785b      	ldrb	r3, [r3, #1]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 8084 	beq.w	8004d80 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	461a      	mov	r2, r3
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	4413      	add	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	011a      	lsls	r2, r3, #4
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	88db      	ldrh	r3, [r3, #6]
 8004ca0:	085b      	lsrs	r3, r3, #1
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	81fb      	strh	r3, [r7, #14]
 8004cba:	89fb      	ldrh	r3, [r7, #14]
 8004cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01b      	beq.n	8004cfc <USB_ActivateEndpoint+0x17c>
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	81bb      	strh	r3, [r7, #12]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	441a      	add	r2, r3
 8004ce6:	89bb      	ldrh	r3, [r7, #12]
 8004ce8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	78db      	ldrb	r3, [r3, #3]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d020      	beq.n	8004d46 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d1a:	813b      	strh	r3, [r7, #8]
 8004d1c:	893b      	ldrh	r3, [r7, #8]
 8004d1e:	f083 0320 	eor.w	r3, r3, #32
 8004d22:	813b      	strh	r3, [r7, #8]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	441a      	add	r2, r3
 8004d2e:	893b      	ldrh	r3, [r7, #8]
 8004d30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	8013      	strh	r3, [r2, #0]
 8004d44:	e27f      	b.n	8005246 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d5c:	817b      	strh	r3, [r7, #10]
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	441a      	add	r2, r3
 8004d68:	897b      	ldrh	r3, [r7, #10]
 8004d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	8013      	strh	r3, [r2, #0]
 8004d7e:	e262      	b.n	8005246 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d90:	4413      	add	r3, r2
 8004d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	011a      	lsls	r2, r3, #4
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	88db      	ldrh	r3, [r3, #6]
 8004da8:	085b      	lsrs	r3, r3, #1
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	4413      	add	r3, r2
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	011a      	lsls	r2, r3, #4
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dd6:	623b      	str	r3, [r7, #32]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d112      	bne.n	8004e06 <USB_ActivateEndpoint+0x286>
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	801a      	strh	r2, [r3, #0]
 8004e04:	e02f      	b.n	8004e66 <USB_ActivateEndpoint+0x2e6>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e0c:	d813      	bhi.n	8004e36 <USB_ActivateEndpoint+0x2b6>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	663b      	str	r3, [r7, #96]	; 0x60
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <USB_ActivateEndpoint+0x2a8>
 8004e22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e24:	3301      	adds	r3, #1
 8004e26:	663b      	str	r3, [r7, #96]	; 0x60
 8004e28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	029b      	lsls	r3, r3, #10
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	801a      	strh	r2, [r3, #0]
 8004e34:	e017      	b.n	8004e66 <USB_ActivateEndpoint+0x2e6>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	095b      	lsrs	r3, r3, #5
 8004e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 031f 	and.w	r3, r3, #31
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d102      	bne.n	8004e50 <USB_ActivateEndpoint+0x2d0>
 8004e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004e50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	029b      	lsls	r3, r3, #10
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	83fb      	strh	r3, [r7, #30]
 8004e74:	8bfb      	ldrh	r3, [r7, #30]
 8004e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d01b      	beq.n	8004eb6 <USB_ActivateEndpoint+0x336>
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	881b      	ldrh	r3, [r3, #0]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e94:	83bb      	strh	r3, [r7, #28]
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	441a      	add	r2, r3
 8004ea0:	8bbb      	ldrh	r3, [r7, #28]
 8004ea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eaa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ecc:	837b      	strh	r3, [r7, #26]
 8004ece:	8b7b      	ldrh	r3, [r7, #26]
 8004ed0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ed4:	837b      	strh	r3, [r7, #26]
 8004ed6:	8b7b      	ldrh	r3, [r7, #26]
 8004ed8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004edc:	837b      	strh	r3, [r7, #26]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	441a      	add	r2, r3
 8004ee8:	8b7b      	ldrh	r3, [r7, #26]
 8004eea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	8013      	strh	r3, [r2, #0]
 8004efe:	e1a2      	b.n	8005246 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f16:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	441a      	add	r2, r3
 8004f24:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f30:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f4c:	4413      	add	r3, r2
 8004f4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	011a      	lsls	r2, r3, #4
 8004f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	891b      	ldrh	r3, [r3, #8]
 8004f64:	085b      	lsrs	r3, r3, #1
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f6e:	801a      	strh	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	653b      	str	r3, [r7, #80]	; 0x50
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f80:	4413      	add	r3, r2
 8004f82:	653b      	str	r3, [r7, #80]	; 0x50
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	011a      	lsls	r2, r3, #4
 8004f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f8c:	4413      	add	r3, r2
 8004f8e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	895b      	ldrh	r3, [r3, #10]
 8004f98:	085b      	lsrs	r3, r3, #1
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	785b      	ldrb	r3, [r3, #1]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f040 8091 	bne.w	80050d0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	881b      	ldrh	r3, [r3, #0]
 8004fba:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004fbc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d01b      	beq.n	8004ffe <USB_ActivateEndpoint+0x47e>
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fdc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	441a      	add	r2, r3
 8004fe8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	873b      	strh	r3, [r7, #56]	; 0x38
 800500c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01b      	beq.n	800504e <USB_ActivateEndpoint+0x4ce>
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	881b      	ldrh	r3, [r3, #0]
 8005022:	b29b      	uxth	r3, r3
 8005024:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	441a      	add	r2, r3
 8005038:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800503a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800503e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005046:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800504a:	b29b      	uxth	r3, r3
 800504c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4413      	add	r3, r2
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	b29b      	uxth	r3, r3
 800505c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005064:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005066:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005068:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800506c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800506e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005070:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005074:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	441a      	add	r2, r3
 8005080:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005082:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005086:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800508a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800508e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005092:	b29b      	uxth	r3, r3
 8005094:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ac:	867b      	strh	r3, [r7, #50]	; 0x32
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	441a      	add	r2, r3
 80050b8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80050ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	8013      	strh	r3, [r2, #0]
 80050ce:	e0ba      	b.n	8005246 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80050e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80050e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d01d      	beq.n	8005128 <USB_ActivateEndpoint+0x5a8>
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	441a      	add	r2, r3
 8005110:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005124:	b29b      	uxth	r3, r3
 8005126:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005138:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800513c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005140:	2b00      	cmp	r3, #0
 8005142:	d01d      	beq.n	8005180 <USB_ActivateEndpoint+0x600>
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	b29b      	uxth	r3, r3
 8005152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800515a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	441a      	add	r2, r3
 8005168:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800516c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005174:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005178:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800517c:	b29b      	uxth	r3, r3
 800517e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	78db      	ldrb	r3, [r3, #3]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d024      	beq.n	80051d2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800519e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051a6:	f083 0320 	eor.w	r3, r3, #32
 80051aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	441a      	add	r2, r3
 80051b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	8013      	strh	r3, [r2, #0]
 80051d0:	e01d      	b.n	800520e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4413      	add	r3, r2
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	441a      	add	r2, r3
 80051f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80051fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800520a:	b29b      	uxth	r3, r3
 800520c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4413      	add	r3, r2
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b29b      	uxth	r3, r3
 800521c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005224:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	441a      	add	r2, r3
 8005230:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800523a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800523e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005242:	b29b      	uxth	r3, r3
 8005244:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005246:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800524a:	4618      	mov	r0, r3
 800524c:	376c      	adds	r7, #108	; 0x6c
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr

08005254 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005254:	b480      	push	{r7}
 8005256:	b08d      	sub	sp, #52	; 0x34
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	7b1b      	ldrb	r3, [r3, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	f040 808e 	bne.w	8005384 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d044      	beq.n	80052fa <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	81bb      	strh	r3, [r7, #12]
 800527e:	89bb      	ldrh	r3, [r7, #12]
 8005280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01b      	beq.n	80052c0 <USB_DeactivateEndpoint+0x6c>
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800529e:	817b      	strh	r3, [r7, #10]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	441a      	add	r2, r3
 80052aa:	897b      	ldrh	r3, [r7, #10]
 80052ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052bc:	b29b      	uxth	r3, r3
 80052be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052d6:	813b      	strh	r3, [r7, #8]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	441a      	add	r2, r3
 80052e2:	893b      	ldrh	r3, [r7, #8]
 80052e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	8013      	strh	r3, [r2, #0]
 80052f8:	e192      	b.n	8005620 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	827b      	strh	r3, [r7, #18]
 8005308:	8a7b      	ldrh	r3, [r7, #18]
 800530a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01b      	beq.n	800534a <USB_DeactivateEndpoint+0xf6>
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	b29b      	uxth	r3, r3
 8005320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005324:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005328:	823b      	strh	r3, [r7, #16]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	441a      	add	r2, r3
 8005334:	8a3b      	ldrh	r3, [r7, #16]
 8005336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800533a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800533e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005346:	b29b      	uxth	r3, r3
 8005348:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	881b      	ldrh	r3, [r3, #0]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800535c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005360:	81fb      	strh	r3, [r7, #14]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	441a      	add	r2, r3
 800536c:	89fb      	ldrh	r3, [r7, #14]
 800536e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005372:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800537e:	b29b      	uxth	r3, r3
 8005380:	8013      	strh	r3, [r2, #0]
 8005382:	e14d      	b.n	8005620 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	785b      	ldrb	r3, [r3, #1]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f040 80a5 	bne.w	80054d8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	843b      	strh	r3, [r7, #32]
 800539c:	8c3b      	ldrh	r3, [r7, #32]
 800539e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d01b      	beq.n	80053de <USB_DeactivateEndpoint+0x18a>
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053bc:	83fb      	strh	r3, [r7, #30]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	441a      	add	r2, r3
 80053c8:	8bfb      	ldrh	r3, [r7, #30]
 80053ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053da:	b29b      	uxth	r3, r3
 80053dc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	83bb      	strh	r3, [r7, #28]
 80053ec:	8bbb      	ldrh	r3, [r7, #28]
 80053ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d01b      	beq.n	800542e <USB_DeactivateEndpoint+0x1da>
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	b29b      	uxth	r3, r3
 8005404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540c:	837b      	strh	r3, [r7, #26]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	441a      	add	r2, r3
 8005418:	8b7b      	ldrh	r3, [r7, #26]
 800541a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800541e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005426:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800542a:	b29b      	uxth	r3, r3
 800542c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29b      	uxth	r3, r3
 800543c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005444:	833b      	strh	r3, [r7, #24]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	441a      	add	r2, r3
 8005450:	8b3b      	ldrh	r3, [r7, #24]
 8005452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005462:	b29b      	uxth	r3, r3
 8005464:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b29b      	uxth	r3, r3
 8005474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547c:	82fb      	strh	r3, [r7, #22]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	441a      	add	r2, r3
 8005488:	8afb      	ldrh	r3, [r7, #22]
 800548a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800548e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549a:	b29b      	uxth	r3, r3
 800549c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054b4:	82bb      	strh	r3, [r7, #20]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	441a      	add	r2, r3
 80054c0:	8abb      	ldrh	r3, [r7, #20]
 80054c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	8013      	strh	r3, [r2, #0]
 80054d6:	e0a3      	b.n	8005620 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80054e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01b      	beq.n	8005528 <USB_DeactivateEndpoint+0x2d4>
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005506:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	441a      	add	r2, r3
 8005512:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800551c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005524:	b29b      	uxth	r3, r3
 8005526:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	4413      	add	r3, r2
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005536:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01b      	beq.n	8005578 <USB_DeactivateEndpoint+0x324>
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	881b      	ldrh	r3, [r3, #0]
 800554c:	b29b      	uxth	r3, r3
 800554e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005556:	853b      	strh	r3, [r7, #40]	; 0x28
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	441a      	add	r2, r3
 8005562:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005564:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005568:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800556c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005570:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005574:	b29b      	uxth	r3, r3
 8005576:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	b29b      	uxth	r3, r3
 8005586:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	441a      	add	r2, r3
 800559a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800559c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	881b      	ldrh	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	441a      	add	r2, r3
 80055d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	441a      	add	r2, r3
 800560a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800560c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561c:	b29b      	uxth	r3, r3
 800561e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3734      	adds	r7, #52	; 0x34
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr

0800562c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b0cc      	sub	sp, #304	; 0x130
 8005630:	af00      	add	r7, sp, #0
 8005632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005636:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800563a:	6018      	str	r0, [r3, #0]
 800563c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005644:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	785b      	ldrb	r3, [r3, #1]
 8005652:	2b01      	cmp	r3, #1
 8005654:	f041 817d 	bne.w	8006952 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005658:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800565c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699a      	ldr	r2, [r3, #24]
 8005664:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005668:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	429a      	cmp	r2, r3
 8005672:	d908      	bls.n	8005686 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005684:	e007      	b.n	8005696 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	7b1b      	ldrb	r3, [r3, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d152      	bne.n	800574c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80056a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6959      	ldr	r1, [r3, #20]
 80056b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	88da      	ldrh	r2, [r3, #6]
 80056be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056c8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056cc:	6800      	ldr	r0, [r0, #0]
 80056ce:	f001 ff23 	bl	8007518 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80056da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056de:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	4619      	mov	r1, r3
 80056f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005700:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005704:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005708:	6812      	ldr	r2, [r2, #0]
 800570a:	440a      	add	r2, r1
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	011a      	lsls	r2, r3, #4
 800571c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005720:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4413      	add	r3, r2
 8005728:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800572c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005730:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800573a:	b29a      	uxth	r2, r3
 800573c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005740:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	801a      	strh	r2, [r3, #0]
 8005748:	f001 b8b5 	b.w	80068b6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800574c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005750:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	78db      	ldrb	r3, [r3, #3]
 8005758:	2b02      	cmp	r3, #2
 800575a:	f040 84c6 	bne.w	80060ea <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800575e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6a1a      	ldr	r2, [r3, #32]
 800576a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800576e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	429a      	cmp	r2, r3
 8005778:	f240 8443 	bls.w	8006002 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800577c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005780:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
 800579a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80057a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	441a      	add	r2, r3
 80057c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80057d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80057d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6a1a      	ldr	r2, [r3, #32]
 80057e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e8:	1ad2      	subs	r2, r2, r3
 80057ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	881b      	ldrh	r3, [r3, #0]
 8005812:	b29b      	uxth	r3, r3
 8005814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 823e 	beq.w	8005c9a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800581e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005822:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005826:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800582a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800582e:	6812      	ldr	r2, [r2, #0]
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005836:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	785b      	ldrb	r3, [r3, #1]
 800583e:	2b00      	cmp	r3, #0
 8005840:	f040 809a 	bne.w	8005978 <USB_EPStartXfer+0x34c>
 8005844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800584c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005850:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005866:	b29b      	uxth	r3, r3
 8005868:	4619      	mov	r1, r3
 800586a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005872:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005876:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800587a:	6812      	ldr	r2, [r2, #0]
 800587c:	440a      	add	r2, r1
 800587e:	601a      	str	r2, [r3, #0]
 8005880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005884:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	011a      	lsls	r2, r3, #4
 800588e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4413      	add	r3, r2
 800589a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800589e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d122      	bne.n	80058f6 <USB_EPStartXfer+0x2ca>
 80058b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	881b      	ldrh	r3, [r3, #0]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	801a      	strh	r2, [r3, #0]
 80058d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	801a      	strh	r2, [r3, #0]
 80058f4:	e079      	b.n	80059ea <USB_EPStartXfer+0x3be>
 80058f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058fa:	2b3e      	cmp	r3, #62	; 0x3e
 80058fc:	d81b      	bhi.n	8005936 <USB_EPStartXfer+0x30a>
 80058fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005902:	085b      	lsrs	r3, r3, #1
 8005904:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d004      	beq.n	800591e <USB_EPStartXfer+0x2f2>
 8005914:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005918:	3301      	adds	r3, #1
 800591a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800591e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005922:	b29b      	uxth	r3, r3
 8005924:	029b      	lsls	r3, r3, #10
 8005926:	b29a      	uxth	r2, r3
 8005928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	801a      	strh	r2, [r3, #0]
 8005934:	e059      	b.n	80059ea <USB_EPStartXfer+0x3be>
 8005936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	2b00      	cmp	r3, #0
 800594a:	d104      	bne.n	8005956 <USB_EPStartXfer+0x32a>
 800594c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005950:	3b01      	subs	r3, #1
 8005952:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005956:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800595a:	b29b      	uxth	r3, r3
 800595c:	029b      	lsls	r3, r3, #10
 800595e:	b29b      	uxth	r3, r3
 8005960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005968:	b29a      	uxth	r2, r3
 800596a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	801a      	strh	r2, [r3, #0]
 8005976:	e038      	b.n	80059ea <USB_EPStartXfer+0x3be>
 8005978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800597c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	785b      	ldrb	r3, [r3, #1]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d130      	bne.n	80059ea <USB_EPStartXfer+0x3be>
 8005988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005996:	b29b      	uxth	r3, r3
 8005998:	4619      	mov	r1, r3
 800599a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80059a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80059a6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	440a      	add	r2, r1
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	011a      	lsls	r2, r3, #4
 80059be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4413      	add	r3, r2
 80059ca:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80059ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059dc:	b29a      	uxth	r2, r3
 80059de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	895b      	ldrh	r3, [r3, #10]
 80059f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6959      	ldr	r1, [r3, #20]
 8005a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a10:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a14:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a18:	6800      	ldr	r0, [r0, #0]
 8005a1a:	f001 fd7d 	bl	8007518 <USB_WritePMA>
            ep->xfer_buff += len;
 8005a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695a      	ldr	r2, [r3, #20]
 8005a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a2e:	441a      	add	r2, r3
 8005a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6a1a      	ldr	r2, [r3, #32]
 8005a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d90f      	bls.n	8005a78 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005a58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6a1a      	ldr	r2, [r3, #32]
 8005a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a68:	1ad2      	subs	r2, r2, r3
 8005a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	621a      	str	r2, [r3, #32]
 8005a76:	e00e      	b.n	8005a96 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2200      	movs	r2, #0
 8005a94:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	785b      	ldrb	r3, [r3, #1]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f040 809a 	bne.w	8005bdc <USB_EPStartXfer+0x5b0>
 8005aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ab0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ab4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005ab8:	6812      	ldr	r2, [r2, #0]
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	4619      	mov	r1, r3
 8005ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005ad6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ada:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8005ade:	6812      	ldr	r2, [r2, #0]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	011a      	lsls	r2, r3, #4
 8005af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4413      	add	r3, r2
 8005afe:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b06:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d122      	bne.n	8005b5a <USB_EPStartXfer+0x52e>
 8005b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b18:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	801a      	strh	r2, [r3, #0]
 8005b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b38:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b50:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	801a      	strh	r2, [r3, #0]
 8005b58:	e083      	b.n	8005c62 <USB_EPStartXfer+0x636>
 8005b5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b5e:	2b3e      	cmp	r3, #62	; 0x3e
 8005b60:	d81b      	bhi.n	8005b9a <USB_EPStartXfer+0x56e>
 8005b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b66:	085b      	lsrs	r3, r3, #1
 8005b68:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d004      	beq.n	8005b82 <USB_EPStartXfer+0x556>
 8005b78:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b82:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	029b      	lsls	r3, r3, #10
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b90:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	801a      	strh	r2, [r3, #0]
 8005b98:	e063      	b.n	8005c62 <USB_EPStartXfer+0x636>
 8005b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba8:	f003 031f 	and.w	r3, r3, #31
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d104      	bne.n	8005bba <USB_EPStartXfer+0x58e>
 8005bb0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005bba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	029b      	lsls	r3, r3, #10
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	801a      	strh	r2, [r3, #0]
 8005bda:	e042      	b.n	8005c62 <USB_EPStartXfer+0x636>
 8005bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	785b      	ldrb	r3, [r3, #1]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d13a      	bne.n	8005c62 <USB_EPStartXfer+0x636>
 8005bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005bf4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005bf8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005bfc:	6812      	ldr	r2, [r2, #0]
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	4619      	mov	r1, r3
 8005c12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c16:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c1a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c1e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005c22:	6812      	ldr	r2, [r2, #0]
 8005c24:	440a      	add	r2, r1
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	011a      	lsls	r2, r3, #4
 8005c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4413      	add	r3, r2
 8005c42:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	891b      	ldrh	r3, [r3, #8]
 8005c6e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6959      	ldr	r1, [r3, #20]
 8005c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c88:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005c8c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005c90:	6800      	ldr	r0, [r0, #0]
 8005c92:	f001 fc41 	bl	8007518 <USB_WritePMA>
 8005c96:	f000 be0e 	b.w	80068b6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	785b      	ldrb	r3, [r3, #1]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d16d      	bne.n	8005d86 <USB_EPStartXfer+0x75a>
 8005caa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cca:	4413      	add	r3, r2
 8005ccc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	011a      	lsls	r2, r3, #4
 8005cdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cde:	4413      	add	r3, r2
 8005ce0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d112      	bne.n	8005d14 <USB_EPStartXfer+0x6e8>
 8005cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cfc:	801a      	strh	r2, [r3, #0]
 8005cfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d10:	801a      	strh	r2, [r3, #0]
 8005d12:	e063      	b.n	8005ddc <USB_EPStartXfer+0x7b0>
 8005d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d18:	2b3e      	cmp	r3, #62	; 0x3e
 8005d1a:	d817      	bhi.n	8005d4c <USB_EPStartXfer+0x720>
 8005d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d20:	085b      	lsrs	r3, r3, #1
 8005d22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d004      	beq.n	8005d3c <USB_EPStartXfer+0x710>
 8005d32:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d36:	3301      	adds	r3, #1
 8005d38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	029b      	lsls	r3, r3, #10
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d48:	801a      	strh	r2, [r3, #0]
 8005d4a:	e047      	b.n	8005ddc <USB_EPStartXfer+0x7b0>
 8005d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5a:	f003 031f 	and.w	r3, r3, #31
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d104      	bne.n	8005d6c <USB_EPStartXfer+0x740>
 8005d62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d66:	3b01      	subs	r3, #1
 8005d68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005d6c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	029b      	lsls	r3, r3, #10
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	e02a      	b.n	8005ddc <USB_EPStartXfer+0x7b0>
 8005d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	785b      	ldrb	r3, [r3, #1]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d122      	bne.n	8005ddc <USB_EPStartXfer+0x7b0>
 8005d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	653b      	str	r3, [r7, #80]	; 0x50
 8005da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005db6:	4413      	add	r3, r2
 8005db8:	653b      	str	r3, [r7, #80]	; 0x50
 8005dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	011a      	lsls	r2, r3, #4
 8005dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dca:	4413      	add	r3, r2
 8005dcc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	891b      	ldrh	r3, [r3, #8]
 8005de8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6959      	ldr	r1, [r3, #20]
 8005df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e02:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e06:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e0a:	6800      	ldr	r0, [r0, #0]
 8005e0c:	f001 fb84 	bl	8007518 <USB_WritePMA>
            ep->xfer_buff += len;
 8005e10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e20:	441a      	add	r2, r3
 8005e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005e2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6a1a      	ldr	r2, [r3, #32]
 8005e3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d90f      	bls.n	8005e6a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005e4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	6a1a      	ldr	r2, [r3, #32]
 8005e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5a:	1ad2      	subs	r2, r2, r3
 8005e5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	621a      	str	r2, [r3, #32]
 8005e68:	e00e      	b.n	8005e88 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2200      	movs	r2, #0
 8005e86:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	643b      	str	r3, [r7, #64]	; 0x40
 8005e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	785b      	ldrb	r3, [r3, #1]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d16d      	bne.n	8005f80 <USB_EPStartXfer+0x954>
 8005ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec4:	4413      	add	r3, r2
 8005ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	011a      	lsls	r2, r3, #4
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	4413      	add	r3, r2
 8005eda:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ede:	637b      	str	r3, [r7, #52]	; 0x34
 8005ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d112      	bne.n	8005f0e <USB_EPStartXfer+0x8e2>
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef6:	801a      	strh	r2, [r3, #0]
 8005ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0a:	801a      	strh	r2, [r3, #0]
 8005f0c:	e05d      	b.n	8005fca <USB_EPStartXfer+0x99e>
 8005f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f12:	2b3e      	cmp	r3, #62	; 0x3e
 8005f14:	d817      	bhi.n	8005f46 <USB_EPStartXfer+0x91a>
 8005f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1a:	085b      	lsrs	r3, r3, #1
 8005f1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d004      	beq.n	8005f36 <USB_EPStartXfer+0x90a>
 8005f2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f30:	3301      	adds	r3, #1
 8005f32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	029b      	lsls	r3, r3, #10
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f42:	801a      	strh	r2, [r3, #0]
 8005f44:	e041      	b.n	8005fca <USB_EPStartXfer+0x99e>
 8005f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <USB_EPStartXfer+0x93a>
 8005f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f60:	3b01      	subs	r3, #1
 8005f62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005f66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	029b      	lsls	r3, r3, #10
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7c:	801a      	strh	r2, [r3, #0]
 8005f7e:	e024      	b.n	8005fca <USB_EPStartXfer+0x99e>
 8005f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	785b      	ldrb	r3, [r3, #1]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d11c      	bne.n	8005fca <USB_EPStartXfer+0x99e>
 8005f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa4:	4413      	add	r3, r2
 8005fa6:	643b      	str	r3, [r7, #64]	; 0x40
 8005fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	011a      	lsls	r2, r3, #4
 8005fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb8:	4413      	add	r3, r2
 8005fba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	895b      	ldrh	r3, [r3, #10]
 8005fd6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6959      	ldr	r1, [r3, #20]
 8005fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ff0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ff4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ff8:	6800      	ldr	r0, [r0, #0]
 8005ffa:	f001 fa8d 	bl	8007518 <USB_WritePMA>
 8005ffe:	f000 bc5a 	b.w	80068b6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006016:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006038:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800603c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006040:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	441a      	add	r2, r3
 8006056:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800605a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606a:	b29b      	uxth	r3, r3
 800606c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800606e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006072:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	65fb      	str	r3, [r7, #92]	; 0x5c
 800607a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800607e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006088:	b29b      	uxth	r3, r3
 800608a:	461a      	mov	r2, r3
 800608c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800608e:	4413      	add	r3, r2
 8006090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006092:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006096:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	011a      	lsls	r2, r3, #4
 80060a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060a2:	4413      	add	r3, r2
 80060a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80060aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060b2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	891b      	ldrh	r3, [r3, #8]
 80060c0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6959      	ldr	r1, [r3, #20]
 80060d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80060da:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80060de:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80060e2:	6800      	ldr	r0, [r0, #0]
 80060e4:	f001 fa18 	bl	8007518 <USB_WritePMA>
 80060e8:	e3e5      	b.n	80068b6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80060ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800610c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006110:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006118:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006122:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	441a      	add	r2, r3
 800612e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800613a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800613e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006142:	b29b      	uxth	r3, r3
 8006144:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800614a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6a1a      	ldr	r2, [r3, #32]
 8006152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006156:	1ad2      	subs	r2, r2, r3
 8006158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006168:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 81bc 	beq.w	8006504 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800618c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006190:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800619a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800619e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	785b      	ldrb	r3, [r3, #1]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d16d      	bne.n	8006286 <USB_EPStartXfer+0xc5a>
 80061aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80061b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	461a      	mov	r2, r3
 80061c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ca:	4413      	add	r3, r2
 80061cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80061ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	011a      	lsls	r2, r3, #4
 80061dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061de:	4413      	add	r3, r2
 80061e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80061e4:	677b      	str	r3, [r7, #116]	; 0x74
 80061e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d112      	bne.n	8006214 <USB_EPStartXfer+0xbe8>
 80061ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061fc:	801a      	strh	r2, [r3, #0]
 80061fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800620c:	b29a      	uxth	r2, r3
 800620e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006210:	801a      	strh	r2, [r3, #0]
 8006212:	e060      	b.n	80062d6 <USB_EPStartXfer+0xcaa>
 8006214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006218:	2b3e      	cmp	r3, #62	; 0x3e
 800621a:	d817      	bhi.n	800624c <USB_EPStartXfer+0xc20>
 800621c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006220:	085b      	lsrs	r3, r3, #1
 8006222:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006226:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	d004      	beq.n	800623c <USB_EPStartXfer+0xc10>
 8006232:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006236:	3301      	adds	r3, #1
 8006238:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800623c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006240:	b29b      	uxth	r3, r3
 8006242:	029b      	lsls	r3, r3, #10
 8006244:	b29a      	uxth	r2, r3
 8006246:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006248:	801a      	strh	r2, [r3, #0]
 800624a:	e044      	b.n	80062d6 <USB_EPStartXfer+0xcaa>
 800624c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800625a:	f003 031f 	and.w	r3, r3, #31
 800625e:	2b00      	cmp	r3, #0
 8006260:	d104      	bne.n	800626c <USB_EPStartXfer+0xc40>
 8006262:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006266:	3b01      	subs	r3, #1
 8006268:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800626c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006270:	b29b      	uxth	r3, r3
 8006272:	029b      	lsls	r3, r3, #10
 8006274:	b29b      	uxth	r3, r3
 8006276:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800627a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800627e:	b29a      	uxth	r2, r3
 8006280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006282:	801a      	strh	r2, [r3, #0]
 8006284:	e027      	b.n	80062d6 <USB_EPStartXfer+0xcaa>
 8006286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	785b      	ldrb	r3, [r3, #1]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d11f      	bne.n	80062d6 <USB_EPStartXfer+0xcaa>
 8006296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800629a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	461a      	mov	r2, r3
 80062a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062ac:	4413      	add	r3, r2
 80062ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	011a      	lsls	r2, r3, #4
 80062c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80062c4:	4413      	add	r3, r2
 80062c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80062d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80062d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	895b      	ldrh	r3, [r3, #10]
 80062e2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80062e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6959      	ldr	r1, [r3, #20]
 80062f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062fc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006300:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006304:	6800      	ldr	r0, [r0, #0]
 8006306:	f001 f907 	bl	8007518 <USB_WritePMA>
          ep->xfer_buff += len;
 800630a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695a      	ldr	r2, [r3, #20]
 8006316:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800631a:	441a      	add	r2, r3
 800631c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6a1a      	ldr	r2, [r3, #32]
 8006334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	429a      	cmp	r2, r3
 8006342:	d90f      	bls.n	8006364 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8006344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006348:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6a1a      	ldr	r2, [r3, #32]
 8006350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006354:	1ad2      	subs	r2, r2, r3
 8006356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800635a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	621a      	str	r2, [r3, #32]
 8006362:	e00e      	b.n	8006382 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006378:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2200      	movs	r2, #0
 8006380:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006382:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 8295 	beq.w	80068b6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800638c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006390:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d16d      	bne.n	8006478 <USB_EPStartXfer+0xe4c>
 800639c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80063a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063bc:	4413      	add	r3, r2
 80063be:	66bb      	str	r3, [r7, #104]	; 0x68
 80063c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	011a      	lsls	r2, r3, #4
 80063ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063d0:	4413      	add	r3, r2
 80063d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063d6:	667b      	str	r3, [r7, #100]	; 0x64
 80063d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d112      	bne.n	8006406 <USB_EPStartXfer+0xdda>
 80063e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063e2:	881b      	ldrh	r3, [r3, #0]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063ee:	801a      	strh	r2, [r3, #0]
 80063f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063fe:	b29a      	uxth	r2, r3
 8006400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	e063      	b.n	80064ce <USB_EPStartXfer+0xea2>
 8006406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640a:	2b3e      	cmp	r3, #62	; 0x3e
 800640c:	d817      	bhi.n	800643e <USB_EPStartXfer+0xe12>
 800640e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006418:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d004      	beq.n	800642e <USB_EPStartXfer+0xe02>
 8006424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006428:	3301      	adds	r3, #1
 800642a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800642e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006432:	b29b      	uxth	r3, r3
 8006434:	029b      	lsls	r3, r3, #10
 8006436:	b29a      	uxth	r2, r3
 8006438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800643a:	801a      	strh	r2, [r3, #0]
 800643c:	e047      	b.n	80064ce <USB_EPStartXfer+0xea2>
 800643e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006442:	095b      	lsrs	r3, r3, #5
 8006444:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800644c:	f003 031f 	and.w	r3, r3, #31
 8006450:	2b00      	cmp	r3, #0
 8006452:	d104      	bne.n	800645e <USB_EPStartXfer+0xe32>
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006458:	3b01      	subs	r3, #1
 800645a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800645e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006462:	b29b      	uxth	r3, r3
 8006464:	029b      	lsls	r3, r3, #10
 8006466:	b29b      	uxth	r3, r3
 8006468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800646c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006470:	b29a      	uxth	r2, r3
 8006472:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006474:	801a      	strh	r2, [r3, #0]
 8006476:	e02a      	b.n	80064ce <USB_EPStartXfer+0xea2>
 8006478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800647c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	785b      	ldrb	r3, [r3, #1]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d122      	bne.n	80064ce <USB_EPStartXfer+0xea2>
 8006488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800648c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	673b      	str	r3, [r7, #112]	; 0x70
 8006494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	461a      	mov	r2, r3
 80064a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064a8:	4413      	add	r3, r2
 80064aa:	673b      	str	r3, [r7, #112]	; 0x70
 80064ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	011a      	lsls	r2, r3, #4
 80064ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064bc:	4413      	add	r3, r2
 80064be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80064ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	891b      	ldrh	r3, [r3, #8]
 80064da:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6959      	ldr	r1, [r3, #20]
 80064ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80064f4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80064f8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80064fc:	6800      	ldr	r0, [r0, #0]
 80064fe:	f001 f80b 	bl	8007518 <USB_WritePMA>
 8006502:	e1d8      	b.n	80068b6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	785b      	ldrb	r3, [r3, #1]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d178      	bne.n	8006606 <USB_EPStartXfer+0xfda>
 8006514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006518:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006526:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006530:	b29b      	uxth	r3, r3
 8006532:	461a      	mov	r2, r3
 8006534:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006538:	4413      	add	r3, r2
 800653a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800653e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	011a      	lsls	r2, r3, #4
 800654c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006550:	4413      	add	r3, r2
 8006552:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006556:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800655a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d116      	bne.n	8006590 <USB_EPStartXfer+0xf64>
 8006562:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b29b      	uxth	r3, r3
 800656a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800656e:	b29a      	uxth	r2, r3
 8006570:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006574:	801a      	strh	r2, [r3, #0]
 8006576:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006586:	b29a      	uxth	r2, r3
 8006588:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800658c:	801a      	strh	r2, [r3, #0]
 800658e:	e06b      	b.n	8006668 <USB_EPStartXfer+0x103c>
 8006590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006594:	2b3e      	cmp	r3, #62	; 0x3e
 8006596:	d818      	bhi.n	80065ca <USB_EPStartXfer+0xf9e>
 8006598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800659c:	085b      	lsrs	r3, r3, #1
 800659e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80065a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d004      	beq.n	80065b8 <USB_EPStartXfer+0xf8c>
 80065ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065b2:	3301      	adds	r3, #1
 80065b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80065b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065bc:	b29b      	uxth	r3, r3
 80065be:	029b      	lsls	r3, r3, #10
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065c6:	801a      	strh	r2, [r3, #0]
 80065c8:	e04e      	b.n	8006668 <USB_EPStartXfer+0x103c>
 80065ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80065d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d8:	f003 031f 	and.w	r3, r3, #31
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d104      	bne.n	80065ea <USB_EPStartXfer+0xfbe>
 80065e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065e4:	3b01      	subs	r3, #1
 80065e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80065ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	029b      	lsls	r3, r3, #10
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006602:	801a      	strh	r2, [r3, #0]
 8006604:	e030      	b.n	8006668 <USB_EPStartXfer+0x103c>
 8006606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	785b      	ldrb	r3, [r3, #1]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d128      	bne.n	8006668 <USB_EPStartXfer+0x103c>
 8006616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800661a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006628:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006632:	b29b      	uxth	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800663a:	4413      	add	r3, r2
 800663c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006644:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	011a      	lsls	r2, r3, #4
 800664e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006652:	4413      	add	r3, r2
 8006654:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006658:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800665c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006660:	b29a      	uxth	r2, r3
 8006662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006666:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800666c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	891b      	ldrh	r3, [r3, #8]
 8006674:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6959      	ldr	r1, [r3, #20]
 8006684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006688:	b29b      	uxth	r3, r3
 800668a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800668e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006692:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006696:	6800      	ldr	r0, [r0, #0]
 8006698:	f000 ff3e 	bl	8007518 <USB_WritePMA>
          ep->xfer_buff += len;
 800669c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	695a      	ldr	r2, [r3, #20]
 80066a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ac:	441a      	add	r2, r3
 80066ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80066ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6a1a      	ldr	r2, [r3, #32]
 80066c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d90f      	bls.n	80066f6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80066d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6a1a      	ldr	r2, [r3, #32]
 80066e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e6:	1ad2      	subs	r2, r2, r3
 80066e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	621a      	str	r2, [r3, #32]
 80066f4:	e00e      	b.n	8006714 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80066f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6a1b      	ldr	r3, [r3, #32]
 8006702:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2200      	movs	r2, #0
 8006712:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 80cc 	beq.w	80068b6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800671e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006722:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800672c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	785b      	ldrb	r3, [r3, #1]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d178      	bne.n	800682e <USB_EPStartXfer+0x1202>
 800673c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006740:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800674a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800674e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006758:	b29b      	uxth	r3, r3
 800675a:	461a      	mov	r2, r3
 800675c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006760:	4413      	add	r3, r2
 8006762:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	011a      	lsls	r2, r3, #4
 8006774:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006778:	4413      	add	r3, r2
 800677a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800677e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006782:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d116      	bne.n	80067b8 <USB_EPStartXfer+0x118c>
 800678a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	b29b      	uxth	r3, r3
 8006792:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006796:	b29a      	uxth	r2, r3
 8006798:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800679c:	801a      	strh	r2, [r3, #0]
 800679e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067b4:	801a      	strh	r2, [r3, #0]
 80067b6:	e064      	b.n	8006882 <USB_EPStartXfer+0x1256>
 80067b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067bc:	2b3e      	cmp	r3, #62	; 0x3e
 80067be:	d818      	bhi.n	80067f2 <USB_EPStartXfer+0x11c6>
 80067c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c4:	085b      	lsrs	r3, r3, #1
 80067c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d004      	beq.n	80067e0 <USB_EPStartXfer+0x11b4>
 80067d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067da:	3301      	adds	r3, #1
 80067dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	029b      	lsls	r3, r3, #10
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067ee:	801a      	strh	r2, [r3, #0]
 80067f0:	e047      	b.n	8006882 <USB_EPStartXfer+0x1256>
 80067f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80067fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006800:	f003 031f 	and.w	r3, r3, #31
 8006804:	2b00      	cmp	r3, #0
 8006806:	d104      	bne.n	8006812 <USB_EPStartXfer+0x11e6>
 8006808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800680c:	3b01      	subs	r3, #1
 800680e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006812:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006816:	b29b      	uxth	r3, r3
 8006818:	029b      	lsls	r3, r3, #10
 800681a:	b29b      	uxth	r3, r3
 800681c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006824:	b29a      	uxth	r2, r3
 8006826:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800682a:	801a      	strh	r2, [r3, #0]
 800682c:	e029      	b.n	8006882 <USB_EPStartXfer+0x1256>
 800682e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	785b      	ldrb	r3, [r3, #1]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d121      	bne.n	8006882 <USB_EPStartXfer+0x1256>
 800683e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006842:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800684c:	b29b      	uxth	r3, r3
 800684e:	461a      	mov	r2, r3
 8006850:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006854:	4413      	add	r3, r2
 8006856:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800685a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800685e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	011a      	lsls	r2, r3, #4
 8006868:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800686c:	4413      	add	r3, r2
 800686e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800687a:	b29a      	uxth	r2, r3
 800687c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006880:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	895b      	ldrh	r3, [r3, #10]
 800688e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006896:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6959      	ldr	r1, [r3, #20]
 800689e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80068a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80068ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80068b0:	6800      	ldr	r0, [r0, #0]
 80068b2:	f000 fe31 	bl	8007518 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80068b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	4413      	add	r3, r2
 80068d0:	881b      	ldrh	r3, [r3, #0]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068d8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80068dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e4:	8013      	strh	r3, [r2, #0]
 80068e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ea:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80068ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80068f2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80068f6:	8812      	ldrh	r2, [r2, #0]
 80068f8:	f082 0210 	eor.w	r2, r2, #16
 80068fc:	801a      	strh	r2, [r3, #0]
 80068fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006902:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006906:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800690a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800690e:	8812      	ldrh	r2, [r2, #0]
 8006910:	f082 0220 	eor.w	r2, r2, #32
 8006914:	801a      	strh	r2, [r3, #0]
 8006916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800691a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006924:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	441a      	add	r2, r3
 8006930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006934:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800693e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800694a:	b29b      	uxth	r3, r3
 800694c:	8013      	strh	r3, [r2, #0]
 800694e:	f000 bc9f 	b.w	8007290 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	7b1b      	ldrb	r3, [r3, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	f040 80ae 	bne.w	8006ac0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006968:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	699a      	ldr	r2, [r3, #24]
 8006970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006974:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	429a      	cmp	r2, r3
 800697e:	d917      	bls.n	80069b0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006984:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	699a      	ldr	r2, [r3, #24]
 800699c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a0:	1ad2      	subs	r2, r2, r3
 80069a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	619a      	str	r2, [r3, #24]
 80069ae:	e00e      	b.n	80069ce <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80069b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80069c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2200      	movs	r2, #0
 80069cc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80069ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80069f2:	4413      	add	r3, r2
 80069f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	011a      	lsls	r2, r3, #4
 8006a06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d116      	bne.n	8006a4a <USB_EPStartXfer+0x141e>
 8006a1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a2e:	801a      	strh	r2, [r3, #0]
 8006a30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a46:	801a      	strh	r2, [r3, #0]
 8006a48:	e3e8      	b.n	800721c <USB_EPStartXfer+0x1bf0>
 8006a4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a4e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a50:	d818      	bhi.n	8006a84 <USB_EPStartXfer+0x1458>
 8006a52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a56:	085b      	lsrs	r3, r3, #1
 8006a58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006a5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d004      	beq.n	8006a72 <USB_EPStartXfer+0x1446>
 8006a68:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006a72:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	029b      	lsls	r3, r3, #10
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a80:	801a      	strh	r2, [r3, #0]
 8006a82:	e3cb      	b.n	800721c <USB_EPStartXfer+0x1bf0>
 8006a84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a92:	f003 031f 	and.w	r3, r3, #31
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d104      	bne.n	8006aa4 <USB_EPStartXfer+0x1478>
 8006a9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006aa4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	029b      	lsls	r3, r3, #10
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006abc:	801a      	strh	r2, [r3, #0]
 8006abe:	e3ad      	b.n	800721c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	78db      	ldrb	r3, [r3, #3]
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	f040 8200 	bne.w	8006ed2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	785b      	ldrb	r3, [r3, #1]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f040 8091 	bne.w	8006c06 <USB_EPStartXfer+0x15da>
 8006ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	461a      	mov	r2, r3
 8006b04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b08:	4413      	add	r3, r2
 8006b0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	011a      	lsls	r2, r3, #4
 8006b1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b20:	4413      	add	r3, r2
 8006b22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d116      	bne.n	8006b68 <USB_EPStartXfer+0x153c>
 8006b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b4c:	801a      	strh	r2, [r3, #0]
 8006b4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b64:	801a      	strh	r2, [r3, #0]
 8006b66:	e083      	b.n	8006c70 <USB_EPStartXfer+0x1644>
 8006b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	2b3e      	cmp	r3, #62	; 0x3e
 8006b76:	d820      	bhi.n	8006bba <USB_EPStartXfer+0x158e>
 8006b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	085b      	lsrs	r3, r3, #1
 8006b86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d004      	beq.n	8006ba8 <USB_EPStartXfer+0x157c>
 8006b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	029b      	lsls	r3, r3, #10
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006bb6:	801a      	strh	r2, [r3, #0]
 8006bb8:	e05a      	b.n	8006c70 <USB_EPStartXfer+0x1644>
 8006bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	095b      	lsrs	r3, r3, #5
 8006bc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d104      	bne.n	8006bea <USB_EPStartXfer+0x15be>
 8006be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be4:	3b01      	subs	r3, #1
 8006be6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	029b      	lsls	r3, r3, #10
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	e034      	b.n	8006c70 <USB_EPStartXfer+0x1644>
 8006c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	785b      	ldrb	r3, [r3, #1]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d12c      	bne.n	8006c70 <USB_EPStartXfer+0x1644>
 8006c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	011a      	lsls	r2, r3, #4
 8006c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c52:	4413      	add	r3, r2
 8006c54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	785b      	ldrb	r3, [r3, #1]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f040 8091 	bne.w	8006db2 <USB_EPStartXfer+0x1786>
 8006c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006c9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	011a      	lsls	r2, r3, #4
 8006cc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ccc:	4413      	add	r3, r2
 8006cce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006cd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d116      	bne.n	8006d14 <USB_EPStartXfer+0x16e8>
 8006ce6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cf8:	801a      	strh	r2, [r3, #0]
 8006cfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cfe:	881b      	ldrh	r3, [r3, #0]
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d0a:	b29a      	uxth	r2, r3
 8006d0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d10:	801a      	strh	r2, [r3, #0]
 8006d12:	e07c      	b.n	8006e0e <USB_EPStartXfer+0x17e2>
 8006d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b3e      	cmp	r3, #62	; 0x3e
 8006d22:	d820      	bhi.n	8006d66 <USB_EPStartXfer+0x173a>
 8006d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	085b      	lsrs	r3, r3, #1
 8006d32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d004      	beq.n	8006d54 <USB_EPStartXfer+0x1728>
 8006d4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d4e:	3301      	adds	r3, #1
 8006d50:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	029b      	lsls	r3, r3, #10
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006d62:	801a      	strh	r2, [r3, #0]
 8006d64:	e053      	b.n	8006e0e <USB_EPStartXfer+0x17e2>
 8006d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	095b      	lsrs	r3, r3, #5
 8006d74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	f003 031f 	and.w	r3, r3, #31
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d104      	bne.n	8006d96 <USB_EPStartXfer+0x176a>
 8006d8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d90:	3b01      	subs	r3, #1
 8006d92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006d96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	029b      	lsls	r3, r3, #10
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006dae:	801a      	strh	r2, [r3, #0]
 8006db0:	e02d      	b.n	8006e0e <USB_EPStartXfer+0x17e2>
 8006db2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	785b      	ldrb	r3, [r3, #1]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d125      	bne.n	8006e0e <USB_EPStartXfer+0x17e2>
 8006dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006dd8:	4413      	add	r3, r2
 8006dda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	011a      	lsls	r2, r3, #4
 8006dec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006df0:	4413      	add	r3, r2
 8006df2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006df6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e0c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006e0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	f000 81fe 	beq.w	800721c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	881b      	ldrh	r3, [r3, #0]
 8006e3c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e40:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <USB_EPStartXfer+0x182c>
 8006e4c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10d      	bne.n	8006e74 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e58:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f040 81db 	bne.w	800721c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006e66:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f040 81d4 	bne.w	800721c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	441a      	add	r2, r3
 8006eb8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ec8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	8013      	strh	r3, [r2, #0]
 8006ed0:	e1a4      	b.n	800721c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	78db      	ldrb	r3, [r3, #3]
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	f040 819a 	bne.w	8007218 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	699a      	ldr	r2, [r3, #24]
 8006ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d917      	bls.n	8006f30 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	699a      	ldr	r2, [r3, #24]
 8006f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f20:	1ad2      	subs	r2, r2, r3
 8006f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	619a      	str	r2, [r3, #24]
 8006f2e:	e00e      	b.n	8006f4e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006f30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	785b      	ldrb	r3, [r3, #1]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d178      	bne.n	8007050 <USB_EPStartXfer+0x1a24>
 8006f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f82:	4413      	add	r3, r2
 8006f84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	011a      	lsls	r2, r3, #4
 8006f96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fa0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d116      	bne.n	8006fda <USB_EPStartXfer+0x19ae>
 8006fac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fbe:	801a      	strh	r2, [r3, #0]
 8006fc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fc4:	881b      	ldrh	r3, [r3, #0]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006fd6:	801a      	strh	r2, [r3, #0]
 8006fd8:	e06b      	b.n	80070b2 <USB_EPStartXfer+0x1a86>
 8006fda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fde:	2b3e      	cmp	r3, #62	; 0x3e
 8006fe0:	d818      	bhi.n	8007014 <USB_EPStartXfer+0x19e8>
 8006fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe6:	085b      	lsrs	r3, r3, #1
 8006fe8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d004      	beq.n	8007002 <USB_EPStartXfer+0x19d6>
 8006ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007006:	b29b      	uxth	r3, r3
 8007008:	029b      	lsls	r3, r3, #10
 800700a:	b29a      	uxth	r2, r3
 800700c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007010:	801a      	strh	r2, [r3, #0]
 8007012:	e04e      	b.n	80070b2 <USB_EPStartXfer+0x1a86>
 8007014:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007018:	095b      	lsrs	r3, r3, #5
 800701a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800701e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007022:	f003 031f 	and.w	r3, r3, #31
 8007026:	2b00      	cmp	r3, #0
 8007028:	d104      	bne.n	8007034 <USB_EPStartXfer+0x1a08>
 800702a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800702e:	3b01      	subs	r3, #1
 8007030:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007038:	b29b      	uxth	r3, r3
 800703a:	029b      	lsls	r3, r3, #10
 800703c:	b29b      	uxth	r3, r3
 800703e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007046:	b29a      	uxth	r2, r3
 8007048:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800704c:	801a      	strh	r2, [r3, #0]
 800704e:	e030      	b.n	80070b2 <USB_EPStartXfer+0x1a86>
 8007050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d128      	bne.n	80070b2 <USB_EPStartXfer+0x1a86>
 8007060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007064:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800706e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007072:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800707c:	b29b      	uxth	r3, r3
 800707e:	461a      	mov	r2, r3
 8007080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007084:	4413      	add	r3, r2
 8007086:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800708a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800708e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	011a      	lsls	r2, r3, #4
 8007098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800709c:	4413      	add	r3, r2
 800709e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80070a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80070c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	785b      	ldrb	r3, [r3, #1]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d178      	bne.n	80071c2 <USB_EPStartXfer+0x1b96>
 80070d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	461a      	mov	r2, r3
 80070f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070f4:	4413      	add	r3, r2
 80070f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	011a      	lsls	r2, r3, #4
 8007108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800710c:	4413      	add	r3, r2
 800710e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d116      	bne.n	800714c <USB_EPStartXfer+0x1b20>
 800711e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	b29b      	uxth	r3, r3
 8007126:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800712a:	b29a      	uxth	r2, r3
 800712c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007130:	801a      	strh	r2, [r3, #0]
 8007132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	b29b      	uxth	r3, r3
 800713a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800713e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007142:	b29a      	uxth	r2, r3
 8007144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	e067      	b.n	800721c <USB_EPStartXfer+0x1bf0>
 800714c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007150:	2b3e      	cmp	r3, #62	; 0x3e
 8007152:	d818      	bhi.n	8007186 <USB_EPStartXfer+0x1b5a>
 8007154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007158:	085b      	lsrs	r3, r3, #1
 800715a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800715e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d004      	beq.n	8007174 <USB_EPStartXfer+0x1b48>
 800716a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800716e:	3301      	adds	r3, #1
 8007170:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007174:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007178:	b29b      	uxth	r3, r3
 800717a:	029b      	lsls	r3, r3, #10
 800717c:	b29a      	uxth	r2, r3
 800717e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007182:	801a      	strh	r2, [r3, #0]
 8007184:	e04a      	b.n	800721c <USB_EPStartXfer+0x1bf0>
 8007186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800718a:	095b      	lsrs	r3, r3, #5
 800718c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007190:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007194:	f003 031f 	and.w	r3, r3, #31
 8007198:	2b00      	cmp	r3, #0
 800719a:	d104      	bne.n	80071a6 <USB_EPStartXfer+0x1b7a>
 800719c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071a0:	3b01      	subs	r3, #1
 80071a2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80071a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	029b      	lsls	r3, r3, #10
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071be:	801a      	strh	r2, [r3, #0]
 80071c0:	e02c      	b.n	800721c <USB_EPStartXfer+0x1bf0>
 80071c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	785b      	ldrb	r3, [r3, #1]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d124      	bne.n	800721c <USB_EPStartXfer+0x1bf0>
 80071d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	461a      	mov	r2, r3
 80071e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e8:	4413      	add	r3, r2
 80071ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80071ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	011a      	lsls	r2, r3, #4
 80071fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007200:	4413      	add	r3, r2
 8007202:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007206:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800720a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800720e:	b29a      	uxth	r2, r3
 8007210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007214:	801a      	strh	r2, [r3, #0]
 8007216:	e001      	b.n	800721c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e03a      	b.n	8007292 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800721c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007220:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29b      	uxth	r3, r3
 800723a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800723e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007242:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007246:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800724a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800724e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007252:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007256:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800725a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800725e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007262:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	441a      	add	r2, r3
 8007278:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800727c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800728c:	b29b      	uxth	r3, r3
 800728e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	785b      	ldrb	r3, [r3, #1]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d020      	beq.n	80072f0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c4:	81bb      	strh	r3, [r7, #12]
 80072c6:	89bb      	ldrh	r3, [r7, #12]
 80072c8:	f083 0310 	eor.w	r3, r3, #16
 80072cc:	81bb      	strh	r3, [r7, #12]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	441a      	add	r2, r3
 80072d8:	89bb      	ldrh	r3, [r7, #12]
 80072da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	8013      	strh	r3, [r2, #0]
 80072ee:	e01f      	b.n	8007330 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	881b      	ldrh	r3, [r3, #0]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007306:	81fb      	strh	r3, [r7, #14]
 8007308:	89fb      	ldrh	r3, [r7, #14]
 800730a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800730e:	81fb      	strh	r3, [r7, #14]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	441a      	add	r2, r3
 800731a:	89fb      	ldrh	r3, [r7, #14]
 800731c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007324:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800732c:	b29b      	uxth	r3, r3
 800732e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	bc80      	pop	{r7}
 800733a:	4770      	bx	lr

0800733c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	7b1b      	ldrb	r3, [r3, #12]
 800734a:	2b00      	cmp	r3, #0
 800734c:	f040 809d 	bne.w	800748a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	785b      	ldrb	r3, [r3, #1]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d04c      	beq.n	80073f2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	881b      	ldrh	r3, [r3, #0]
 8007364:	823b      	strh	r3, [r7, #16]
 8007366:	8a3b      	ldrh	r3, [r7, #16]
 8007368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736c:	2b00      	cmp	r3, #0
 800736e:	d01b      	beq.n	80073a8 <USB_EPClearStall+0x6c>
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	b29b      	uxth	r3, r3
 800737e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007386:	81fb      	strh	r3, [r7, #14]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	441a      	add	r2, r3
 8007392:	89fb      	ldrh	r3, [r7, #14]
 8007394:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007398:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800739c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	78db      	ldrb	r3, [r3, #3]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d06c      	beq.n	800748a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	b29b      	uxth	r3, r3
 80073be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073c6:	81bb      	strh	r3, [r7, #12]
 80073c8:	89bb      	ldrh	r3, [r7, #12]
 80073ca:	f083 0320 	eor.w	r3, r3, #32
 80073ce:	81bb      	strh	r3, [r7, #12]
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	441a      	add	r2, r3
 80073da:	89bb      	ldrh	r3, [r7, #12]
 80073dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	8013      	strh	r3, [r2, #0]
 80073f0:	e04b      	b.n	800748a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	82fb      	strh	r3, [r7, #22]
 8007400:	8afb      	ldrh	r3, [r7, #22]
 8007402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d01b      	beq.n	8007442 <USB_EPClearStall+0x106>
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800741c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007420:	82bb      	strh	r3, [r7, #20]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	441a      	add	r2, r3
 800742c:	8abb      	ldrh	r3, [r7, #20]
 800742e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007436:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800743a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800743e:	b29b      	uxth	r3, r3
 8007440:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4413      	add	r3, r2
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	b29b      	uxth	r3, r3
 8007450:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007458:	827b      	strh	r3, [r7, #18]
 800745a:	8a7b      	ldrh	r3, [r7, #18]
 800745c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007460:	827b      	strh	r3, [r7, #18]
 8007462:	8a7b      	ldrh	r3, [r7, #18]
 8007464:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007468:	827b      	strh	r3, [r7, #18]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	441a      	add	r2, r3
 8007474:	8a7b      	ldrh	r3, [r7, #18]
 8007476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800747a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800747e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007486:	b29b      	uxth	r3, r3
 8007488:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	371c      	adds	r7, #28
 8007490:	46bd      	mov	sp, r7
 8007492:	bc80      	pop	{r7}
 8007494:	4770      	bx	lr

08007496 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007496:	b480      	push	{r7}
 8007498:	b083      	sub	sp, #12
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	460b      	mov	r3, r1
 80074a0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80074a2:	78fb      	ldrb	r3, [r7, #3]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d103      	bne.n	80074b0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2280      	movs	r2, #128	; 0x80
 80074ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bc80      	pop	{r7}
 80074ba:	4770      	bx	lr

080074bc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bc80      	pop	{r7}
 80074ce:	4770      	bx	lr

080074d0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	bc80      	pop	{r7}
 80074e2:	4770      	bx	lr

080074e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80074f6:	68fb      	ldr	r3, [r7, #12]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr

08007502 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007502:	b480      	push	{r7}
 8007504:	b083      	sub	sp, #12
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	bc80      	pop	{r7}
 8007516:	4770      	bx	lr

08007518 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007518:	b480      	push	{r7}
 800751a:	b08d      	sub	sp, #52	; 0x34
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	4611      	mov	r1, r2
 8007524:	461a      	mov	r2, r3
 8007526:	460b      	mov	r3, r1
 8007528:	80fb      	strh	r3, [r7, #6]
 800752a:	4613      	mov	r3, r2
 800752c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800752e:	88bb      	ldrh	r3, [r7, #4]
 8007530:	3301      	adds	r3, #1
 8007532:	085b      	lsrs	r3, r3, #1
 8007534:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	005a      	lsls	r2, r3, #1
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	4413      	add	r3, r2
 8007546:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800754a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007550:	e01e      	b.n	8007590 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	3301      	adds	r3, #1
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	b29b      	uxth	r3, r3
 8007564:	021b      	lsls	r3, r3, #8
 8007566:	b29b      	uxth	r3, r3
 8007568:	461a      	mov	r2, r3
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	4313      	orrs	r3, r2
 800756e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	b29a      	uxth	r2, r3
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757a:	3302      	adds	r3, #2
 800757c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007580:	3302      	adds	r3, #2
 8007582:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	3301      	adds	r3, #1
 8007588:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	3b01      	subs	r3, #1
 800758e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1dd      	bne.n	8007552 <USB_WritePMA+0x3a>
  }
}
 8007596:	bf00      	nop
 8007598:	bf00      	nop
 800759a:	3734      	adds	r7, #52	; 0x34
 800759c:	46bd      	mov	sp, r7
 800759e:	bc80      	pop	{r7}
 80075a0:	4770      	bx	lr

080075a2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b08b      	sub	sp, #44	; 0x2c
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60f8      	str	r0, [r7, #12]
 80075aa:	60b9      	str	r1, [r7, #8]
 80075ac:	4611      	mov	r1, r2
 80075ae:	461a      	mov	r2, r3
 80075b0:	460b      	mov	r3, r1
 80075b2:	80fb      	strh	r3, [r7, #6]
 80075b4:	4613      	mov	r3, r2
 80075b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80075b8:	88bb      	ldrh	r3, [r7, #4]
 80075ba:	085b      	lsrs	r3, r3, #1
 80075bc:	b29b      	uxth	r3, r3
 80075be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075c8:	88fb      	ldrh	r3, [r7, #6]
 80075ca:	005a      	lsls	r2, r3, #1
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075d4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
 80075da:	e01b      	b.n	8007614 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	3302      	adds	r3, #2
 80075e8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	3301      	adds	r3, #1
 80075f6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	0a1b      	lsrs	r3, r3, #8
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	3301      	adds	r3, #1
 8007606:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	3302      	adds	r3, #2
 800760c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	3b01      	subs	r3, #1
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1e0      	bne.n	80075dc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800761a:	88bb      	ldrh	r3, [r7, #4]
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	b29b      	uxth	r3, r3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d007      	beq.n	8007636 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	b29b      	uxth	r3, r3
 800762c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	b2da      	uxtb	r2, r3
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	701a      	strb	r2, [r3, #0]
  }
}
 8007636:	bf00      	nop
 8007638:	372c      	adds	r7, #44	; 0x2c
 800763a:	46bd      	mov	sp, r7
 800763c:	bc80      	pop	{r7}
 800763e:	4770      	bx	lr

08007640 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800764c:	2300      	movs	r3, #0
 800764e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	7c1b      	ldrb	r3, [r3, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d115      	bne.n	8007684 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800765c:	2202      	movs	r2, #2
 800765e:	2181      	movs	r1, #129	; 0x81
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f001 fe86 	bl	8009372 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800766c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007670:	2202      	movs	r2, #2
 8007672:	2101      	movs	r1, #1
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f001 fe7c 	bl	8009372 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007682:	e012      	b.n	80076aa <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007684:	2340      	movs	r3, #64	; 0x40
 8007686:	2202      	movs	r2, #2
 8007688:	2181      	movs	r1, #129	; 0x81
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f001 fe71 	bl	8009372 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007696:	2340      	movs	r3, #64	; 0x40
 8007698:	2202      	movs	r2, #2
 800769a:	2101      	movs	r1, #1
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f001 fe68 	bl	8009372 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80076aa:	2308      	movs	r3, #8
 80076ac:	2203      	movs	r2, #3
 80076ae:	2182      	movs	r1, #130	; 0x82
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f001 fe5e 	bl	8009372 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80076bc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80076c0:	f001 ff7e 	bl	80095c0 <USBD_static_malloc>
 80076c4:	4602      	mov	r2, r0
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d102      	bne.n	80076dc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80076d6:	2301      	movs	r3, #1
 80076d8:	73fb      	strb	r3, [r7, #15]
 80076da:	e026      	b.n	800772a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076e2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	7c1b      	ldrb	r3, [r3, #16]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d109      	bne.n	800771a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800770c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007710:	2101      	movs	r1, #1
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 ff1e 	bl	8009554 <USBD_LL_PrepareReceive>
 8007718:	e007      	b.n	800772a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007720:	2340      	movs	r3, #64	; 0x40
 8007722:	2101      	movs	r1, #1
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f001 ff15 	bl	8009554 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800772a:	7bfb      	ldrb	r3, [r7, #15]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007744:	2181      	movs	r1, #129	; 0x81
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f001 fe39 	bl	80093be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007752:	2101      	movs	r1, #1
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f001 fe32 	bl	80093be <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007762:	2182      	movs	r1, #130	; 0x82
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 fe2a 	bl	80093be <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00e      	beq.n	8007798 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800778a:	4618      	mov	r0, r3
 800778c:	f001 ff24 	bl	80095d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007798:	7bfb      	ldrb	r3, [r7, #15]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b086      	sub	sp, #24
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d039      	beq.n	8007840 <USBD_CDC_Setup+0x9e>
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d17f      	bne.n	80078d0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	88db      	ldrh	r3, [r3, #6]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d029      	beq.n	800782c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	b25b      	sxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	da11      	bge.n	8007806 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	683a      	ldr	r2, [r7, #0]
 80077ec:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80077ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80077f0:	683a      	ldr	r2, [r7, #0]
 80077f2:	88d2      	ldrh	r2, [r2, #6]
 80077f4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80077f6:	6939      	ldr	r1, [r7, #16]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	88db      	ldrh	r3, [r3, #6]
 80077fc:	461a      	mov	r2, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f001 fa09 	bl	8008c16 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007804:	e06b      	b.n	80078de <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	785a      	ldrb	r2, [r3, #1]
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	88db      	ldrh	r3, [r3, #6]
 8007814:	b2da      	uxtb	r2, r3
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800781c:	6939      	ldr	r1, [r7, #16]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	88db      	ldrh	r3, [r3, #6]
 8007822:	461a      	mov	r2, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f001 fa24 	bl	8008c72 <USBD_CtlPrepareRx>
      break;
 800782a:	e058      	b.n	80078de <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	7850      	ldrb	r0, [r2, #1]
 8007838:	2200      	movs	r2, #0
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	4798      	blx	r3
      break;
 800783e:	e04e      	b.n	80078de <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	785b      	ldrb	r3, [r3, #1]
 8007844:	2b0b      	cmp	r3, #11
 8007846:	d02e      	beq.n	80078a6 <USBD_CDC_Setup+0x104>
 8007848:	2b0b      	cmp	r3, #11
 800784a:	dc38      	bgt.n	80078be <USBD_CDC_Setup+0x11c>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <USBD_CDC_Setup+0xb4>
 8007850:	2b0a      	cmp	r3, #10
 8007852:	d014      	beq.n	800787e <USBD_CDC_Setup+0xdc>
 8007854:	e033      	b.n	80078be <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800785c:	2b03      	cmp	r3, #3
 800785e:	d107      	bne.n	8007870 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007860:	f107 030c 	add.w	r3, r7, #12
 8007864:	2202      	movs	r2, #2
 8007866:	4619      	mov	r1, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f001 f9d4 	bl	8008c16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800786e:	e02e      	b.n	80078ce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 f965 	bl	8008b42 <USBD_CtlError>
            ret = USBD_FAIL;
 8007878:	2302      	movs	r3, #2
 800787a:	75fb      	strb	r3, [r7, #23]
          break;
 800787c:	e027      	b.n	80078ce <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007884:	2b03      	cmp	r3, #3
 8007886:	d107      	bne.n	8007898 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007888:	f107 030f 	add.w	r3, r7, #15
 800788c:	2201      	movs	r2, #1
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 f9c0 	bl	8008c16 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007896:	e01a      	b.n	80078ce <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f001 f951 	bl	8008b42 <USBD_CtlError>
            ret = USBD_FAIL;
 80078a0:	2302      	movs	r3, #2
 80078a2:	75fb      	strb	r3, [r7, #23]
          break;
 80078a4:	e013      	b.n	80078ce <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d00d      	beq.n	80078cc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f001 f945 	bl	8008b42 <USBD_CtlError>
            ret = USBD_FAIL;
 80078b8:	2302      	movs	r3, #2
 80078ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80078bc:	e006      	b.n	80078cc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f001 f93e 	bl	8008b42 <USBD_CtlError>
          ret = USBD_FAIL;
 80078c6:	2302      	movs	r3, #2
 80078c8:	75fb      	strb	r3, [r7, #23]
          break;
 80078ca:	e000      	b.n	80078ce <USBD_CDC_Setup+0x12c>
          break;
 80078cc:	bf00      	nop
      }
      break;
 80078ce:	e006      	b.n	80078de <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 f935 	bl	8008b42 <USBD_CtlError>
      ret = USBD_FAIL;
 80078d8:	2302      	movs	r3, #2
 80078da:	75fb      	strb	r3, [r7, #23]
      break;
 80078dc:	bf00      	nop
  }

  return ret;
 80078de:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078fa:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007902:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790a:	2b00      	cmp	r3, #0
 800790c:	d03a      	beq.n	8007984 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800790e:	78fa      	ldrb	r2, [r7, #3]
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	4613      	mov	r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	4413      	add	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	440b      	add	r3, r1
 800791c:	331c      	adds	r3, #28
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d029      	beq.n	8007978 <USBD_CDC_DataIn+0x90>
 8007924:	78fa      	ldrb	r2, [r7, #3]
 8007926:	6879      	ldr	r1, [r7, #4]
 8007928:	4613      	mov	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	440b      	add	r3, r1
 8007932:	331c      	adds	r3, #28
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	78f9      	ldrb	r1, [r7, #3]
 8007938:	68b8      	ldr	r0, [r7, #8]
 800793a:	460b      	mov	r3, r1
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	440b      	add	r3, r1
 8007940:	00db      	lsls	r3, r3, #3
 8007942:	4403      	add	r3, r0
 8007944:	3338      	adds	r3, #56	; 0x38
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	fbb2 f1f3 	udiv	r1, r2, r3
 800794c:	fb01 f303 	mul.w	r3, r1, r3
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d110      	bne.n	8007978 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007956:	78fa      	ldrb	r2, [r7, #3]
 8007958:	6879      	ldr	r1, [r7, #4]
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	440b      	add	r3, r1
 8007964:	331c      	adds	r3, #28
 8007966:	2200      	movs	r2, #0
 8007968:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800796a:	78f9      	ldrb	r1, [r7, #3]
 800796c:	2300      	movs	r3, #0
 800796e:	2200      	movs	r2, #0
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 fdcc 	bl	800950e <USBD_LL_Transmit>
 8007976:	e003      	b.n	8007980 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	e000      	b.n	8007986 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007984:	2302      	movs	r3, #2
  }
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	460b      	mov	r3, r1
 8007998:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079a0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079a2:	78fb      	ldrb	r3, [r7, #3]
 80079a4:	4619      	mov	r1, r3
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f001 fdf7 	bl	800959a <USBD_LL_GetRxDataSize>
 80079ac:	4602      	mov	r2, r0
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00d      	beq.n	80079da <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80079d2:	4611      	mov	r1, r2
 80079d4:	4798      	blx	r3

    return USBD_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	e000      	b.n	80079dc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80079da:	2302      	movs	r3, #2
  }
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d015      	beq.n	8007a2a <USBD_CDC_EP0_RxReady+0x46>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007a04:	2bff      	cmp	r3, #255	; 0xff
 8007a06:	d010      	beq.n	8007a2a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007a16:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007a1e:	b292      	uxth	r2, r2
 8007a20:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	22ff      	movs	r2, #255	; 0xff
 8007a26:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2243      	movs	r2, #67	; 0x43
 8007a40:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007a42:	4b03      	ldr	r3, [pc, #12]	; (8007a50 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bc80      	pop	{r7}
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	20000094 	.word	0x20000094

08007a54 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2243      	movs	r2, #67	; 0x43
 8007a60:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007a62:	4b03      	ldr	r3, [pc, #12]	; (8007a70 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bc80      	pop	{r7}
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	20000050 	.word	0x20000050

08007a74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2243      	movs	r2, #67	; 0x43
 8007a80:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007a82:	4b03      	ldr	r3, [pc, #12]	; (8007a90 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bc80      	pop	{r7}
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	200000d8 	.word	0x200000d8

08007a94 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	220a      	movs	r2, #10
 8007aa0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007aa2:	4b03      	ldr	r3, [pc, #12]	; (8007ab0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bc80      	pop	{r7}
 8007aac:	4770      	bx	lr
 8007aae:	bf00      	nop
 8007ab0:	2000000c 	.word	0x2000000c

08007ab4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007abe:	2302      	movs	r3, #2
 8007ac0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d005      	beq.n	8007ad4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bc80      	pop	{r7}
 8007ade:	4770      	bx	lr

08007ae0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	4613      	mov	r3, r2
 8007aec:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007af4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007afe:	88fa      	ldrh	r2, [r7, #6]
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	371c      	adds	r7, #28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bc80      	pop	{r7}
 8007b10:	4770      	bx	lr

08007b12 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b085      	sub	sp, #20
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b22:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	683a      	ldr	r2, [r7, #0]
 8007b28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bc80      	pop	{r7}
 8007b36:	4770      	bx	lr

08007b38 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d01c      	beq.n	8007b8c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d115      	bne.n	8007b88 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	2181      	movs	r1, #129	; 0x81
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f001 fcc5 	bl	800950e <USBD_LL_Transmit>

      return USBD_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	e002      	b.n	8007b8e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e000      	b.n	8007b8e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007b8c:	2302      	movs	r3, #2
  }
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d017      	beq.n	8007be0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	7c1b      	ldrb	r3, [r3, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d109      	bne.n	8007bcc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 fcc5 	bl	8009554 <USBD_LL_PrepareReceive>
 8007bca:	e007      	b.n	8007bdc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007bd2:	2340      	movs	r3, #64	; 0x40
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 fcbc 	bl	8009554 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e000      	b.n	8007be2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007be0:	2302      	movs	r3, #2
  }
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007bfe:	2302      	movs	r3, #2
 8007c00:	e01a      	b.n	8007c38 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2201      	movs	r2, #1
 8007c26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	79fa      	ldrb	r2, [r7, #7]
 8007c2e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f001 fb29 	bl	8009288 <USBD_LL_Init>

  return USBD_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d006      	beq.n	8007c62 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	73fb      	strb	r3, [r7, #15]
 8007c60:	e001      	b.n	8007c66 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c62:	2302      	movs	r3, #2
 8007c64:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bc80      	pop	{r7}
 8007c70:	4770      	bx	lr

08007c72 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b082      	sub	sp, #8
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 fb5e 	bl	800933c <USBD_LL_Start>

  return USBD_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b083      	sub	sp, #12
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bc80      	pop	{r7}
 8007c9c:	4770      	bx	lr

08007c9e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007caa:	2302      	movs	r3, #2
 8007cac:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00c      	beq.n	8007cd2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	78fa      	ldrb	r2, [r7, #3]
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	4798      	blx	r3
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	78fa      	ldrb	r2, [r7, #3]
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	4798      	blx	r3

  return USBD_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3708      	adds	r7, #8
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 fed8 	bl	8008aca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d28:	461a      	mov	r2, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d36:	f003 031f 	and.w	r3, r3, #31
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d016      	beq.n	8007d6c <USBD_LL_SetupStage+0x6a>
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d81c      	bhi.n	8007d7c <USBD_LL_SetupStage+0x7a>
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <USBD_LL_SetupStage+0x4a>
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d008      	beq.n	8007d5c <USBD_LL_SetupStage+0x5a>
 8007d4a:	e017      	b.n	8007d7c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f9cb 	bl	80080f0 <USBD_StdDevReq>
      break;
 8007d5a:	e01a      	b.n	8007d92 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fa2d 	bl	80081c4 <USBD_StdItfReq>
      break;
 8007d6a:	e012      	b.n	8007d92 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007d72:	4619      	mov	r1, r3
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fa6d 	bl	8008254 <USBD_StdEPReq>
      break;
 8007d7a:	e00a      	b.n	8007d92 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007d82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f001 fb36 	bl	80093fc <USBD_LL_StallEP>
      break;
 8007d90:	bf00      	nop
  }

  return USBD_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b086      	sub	sp, #24
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	460b      	mov	r3, r1
 8007da6:	607a      	str	r2, [r7, #4]
 8007da8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007daa:	7afb      	ldrb	r3, [r7, #11]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d14b      	bne.n	8007e48 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007db6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d134      	bne.n	8007e2c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	68da      	ldr	r2, [r3, #12]
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d919      	bls.n	8007e02 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	68da      	ldr	r2, [r3, #12]
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	1ad2      	subs	r2, r2, r3
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	68da      	ldr	r2, [r3, #12]
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d203      	bcs.n	8007df0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	e002      	b.n	8007df6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	461a      	mov	r2, r3
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f000 ff57 	bl	8008cae <USBD_CtlContinueRx>
 8007e00:	e038      	b.n	8007e74 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00a      	beq.n	8007e24 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	d105      	bne.n	8007e24 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 ff54 	bl	8008cd2 <USBD_CtlSendStatus>
 8007e2a:	e023      	b.n	8007e74 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e32:	2b05      	cmp	r3, #5
 8007e34:	d11e      	bne.n	8007e74 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007e3e:	2100      	movs	r1, #0
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f001 fadb 	bl	80093fc <USBD_LL_StallEP>
 8007e46:	e015      	b.n	8007e74 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00d      	beq.n	8007e70 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d108      	bne.n	8007e70 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	7afa      	ldrb	r2, [r7, #11]
 8007e68:	4611      	mov	r1, r2
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	4798      	blx	r3
 8007e6e:	e001      	b.n	8007e74 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e70:	2302      	movs	r3, #2
 8007e72:	e000      	b.n	8007e76 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b086      	sub	sp, #24
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	460b      	mov	r3, r1
 8007e88:	607a      	str	r2, [r7, #4]
 8007e8a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e8c:	7afb      	ldrb	r3, [r7, #11]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d17f      	bne.n	8007f92 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3314      	adds	r3, #20
 8007e96:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d15c      	bne.n	8007f5c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	68da      	ldr	r2, [r3, #12]
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d915      	bls.n	8007eda <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	1ad2      	subs	r2, r2, r3
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	6879      	ldr	r1, [r7, #4]
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f000 fec1 	bl	8008c4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ecc:	2300      	movs	r3, #0
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f001 fb3e 	bl	8009554 <USBD_LL_PrepareReceive>
 8007ed8:	e04e      	b.n	8007f78 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	6912      	ldr	r2, [r2, #16]
 8007ee2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007ee6:	fb01 f202 	mul.w	r2, r1, r2
 8007eea:	1a9b      	subs	r3, r3, r2
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d11c      	bne.n	8007f2a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	689a      	ldr	r2, [r3, #8]
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d316      	bcc.n	8007f2a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	689a      	ldr	r2, [r3, #8]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d20f      	bcs.n	8007f2a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 fe9d 	bl	8008c4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	2200      	movs	r2, #0
 8007f20:	2100      	movs	r1, #0
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f001 fb16 	bl	8009554 <USBD_LL_PrepareReceive>
 8007f28:	e026      	b.n	8007f78 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00a      	beq.n	8007f4c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f3c:	2b03      	cmp	r3, #3
 8007f3e:	d105      	bne.n	8007f4c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f4c:	2180      	movs	r1, #128	; 0x80
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f001 fa54 	bl	80093fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 fecf 	bl	8008cf8 <USBD_CtlReceiveStatus>
 8007f5a:	e00d      	b.n	8007f78 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	d004      	beq.n	8007f70 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d103      	bne.n	8007f78 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f70:	2180      	movs	r1, #128	; 0x80
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f001 fa42 	bl	80093fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d11d      	bne.n	8007fbe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7ff fe81 	bl	8007c8a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f90:	e015      	b.n	8007fbe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00d      	beq.n	8007fba <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fa4:	2b03      	cmp	r3, #3
 8007fa6:	d108      	bne.n	8007fba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fae:	695b      	ldr	r3, [r3, #20]
 8007fb0:	7afa      	ldrb	r2, [r7, #11]
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	4798      	blx	r3
 8007fb8:	e001      	b.n	8007fbe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007fba:	2302      	movs	r3, #2
 8007fbc:	e000      	b.n	8007fc0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3718      	adds	r7, #24
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fd0:	2340      	movs	r3, #64	; 0x40
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f001 f9cb 	bl	8009372 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2240      	movs	r2, #64	; 0x40
 8007fe8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fec:	2340      	movs	r3, #64	; 0x40
 8007fee:	2200      	movs	r2, #0
 8007ff0:	2180      	movs	r1, #128	; 0x80
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f001 f9bd 	bl	8009372 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2240      	movs	r2, #64	; 0x40
 8008002:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008028:	2b00      	cmp	r3, #0
 800802a:	d009      	beq.n	8008040 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6852      	ldr	r2, [r2, #4]
 8008038:	b2d2      	uxtb	r2, r2
 800803a:	4611      	mov	r1, r2
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
  }

  return USBD_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800804a:	b480      	push	{r7}
 800804c:	b083      	sub	sp, #12
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	78fa      	ldrb	r2, [r7, #3]
 800805a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	370c      	adds	r7, #12
 8008062:	46bd      	mov	sp, r7
 8008064:	bc80      	pop	{r7}
 8008066:	4770      	bx	lr

08008068 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2204      	movs	r2, #4
 8008080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	bc80      	pop	{r7}
 800808e:	4770      	bx	lr

08008090 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800809e:	2b04      	cmp	r3, #4
 80080a0:	d105      	bne.n	80080ae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bc80      	pop	{r7}
 80080b8:	4770      	bx	lr

080080ba <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	d10b      	bne.n	80080e4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d005      	beq.n	80080e4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3708      	adds	r7, #8
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008106:	2b40      	cmp	r3, #64	; 0x40
 8008108:	d005      	beq.n	8008116 <USBD_StdDevReq+0x26>
 800810a:	2b40      	cmp	r3, #64	; 0x40
 800810c:	d84f      	bhi.n	80081ae <USBD_StdDevReq+0xbe>
 800810e:	2b00      	cmp	r3, #0
 8008110:	d009      	beq.n	8008126 <USBD_StdDevReq+0x36>
 8008112:	2b20      	cmp	r3, #32
 8008114:	d14b      	bne.n	80081ae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	4798      	blx	r3
      break;
 8008124:	e048      	b.n	80081b8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	785b      	ldrb	r3, [r3, #1]
 800812a:	2b09      	cmp	r3, #9
 800812c:	d839      	bhi.n	80081a2 <USBD_StdDevReq+0xb2>
 800812e:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <USBD_StdDevReq+0x44>)
 8008130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008134:	08008185 	.word	0x08008185
 8008138:	08008199 	.word	0x08008199
 800813c:	080081a3 	.word	0x080081a3
 8008140:	0800818f 	.word	0x0800818f
 8008144:	080081a3 	.word	0x080081a3
 8008148:	08008167 	.word	0x08008167
 800814c:	0800815d 	.word	0x0800815d
 8008150:	080081a3 	.word	0x080081a3
 8008154:	0800817b 	.word	0x0800817b
 8008158:	08008171 	.word	0x08008171
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f9dc 	bl	800851c <USBD_GetDescriptor>
          break;
 8008164:	e022      	b.n	80081ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 fb3f 	bl	80087ec <USBD_SetAddress>
          break;
 800816e:	e01d      	b.n	80081ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 fb7e 	bl	8008874 <USBD_SetConfig>
          break;
 8008178:	e018      	b.n	80081ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fc07 	bl	8008990 <USBD_GetConfig>
          break;
 8008182:	e013      	b.n	80081ac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fc37 	bl	80089fa <USBD_GetStatus>
          break;
 800818c:	e00e      	b.n	80081ac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fc65 	bl	8008a60 <USBD_SetFeature>
          break;
 8008196:	e009      	b.n	80081ac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fc74 	bl	8008a88 <USBD_ClrFeature>
          break;
 80081a0:	e004      	b.n	80081ac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fccc 	bl	8008b42 <USBD_CtlError>
          break;
 80081aa:	bf00      	nop
      }
      break;
 80081ac:	e004      	b.n	80081b8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fcc6 	bl	8008b42 <USBD_CtlError>
      break;
 80081b6:	bf00      	nop
  }

  return ret;
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop

080081c4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081da:	2b40      	cmp	r3, #64	; 0x40
 80081dc:	d005      	beq.n	80081ea <USBD_StdItfReq+0x26>
 80081de:	2b40      	cmp	r3, #64	; 0x40
 80081e0:	d82e      	bhi.n	8008240 <USBD_StdItfReq+0x7c>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <USBD_StdItfReq+0x26>
 80081e6:	2b20      	cmp	r3, #32
 80081e8:	d12a      	bne.n	8008240 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f0:	3b01      	subs	r3, #1
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d81d      	bhi.n	8008232 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	889b      	ldrh	r3, [r3, #4]
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d813      	bhi.n	8008228 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	6839      	ldr	r1, [r7, #0]
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	4798      	blx	r3
 800820e:	4603      	mov	r3, r0
 8008210:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	88db      	ldrh	r3, [r3, #6]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d110      	bne.n	800823c <USBD_StdItfReq+0x78>
 800821a:	7bfb      	ldrb	r3, [r7, #15]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10d      	bne.n	800823c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fd56 	bl	8008cd2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008226:	e009      	b.n	800823c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fc89 	bl	8008b42 <USBD_CtlError>
          break;
 8008230:	e004      	b.n	800823c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fc84 	bl	8008b42 <USBD_CtlError>
          break;
 800823a:	e000      	b.n	800823e <USBD_StdItfReq+0x7a>
          break;
 800823c:	bf00      	nop
      }
      break;
 800823e:	e004      	b.n	800824a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fc7d 	bl	8008b42 <USBD_CtlError>
      break;
 8008248:	bf00      	nop
  }

  return USBD_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	889b      	ldrh	r3, [r3, #4]
 8008266:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008270:	2b40      	cmp	r3, #64	; 0x40
 8008272:	d007      	beq.n	8008284 <USBD_StdEPReq+0x30>
 8008274:	2b40      	cmp	r3, #64	; 0x40
 8008276:	f200 8146 	bhi.w	8008506 <USBD_StdEPReq+0x2b2>
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00a      	beq.n	8008294 <USBD_StdEPReq+0x40>
 800827e:	2b20      	cmp	r3, #32
 8008280:	f040 8141 	bne.w	8008506 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	4798      	blx	r3
      break;
 8008292:	e13d      	b.n	8008510 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800829c:	2b20      	cmp	r3, #32
 800829e:	d10a      	bne.n	80082b6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	6839      	ldr	r1, [r7, #0]
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
 80082ae:	4603      	mov	r3, r0
 80082b0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80082b2:	7bfb      	ldrb	r3, [r7, #15]
 80082b4:	e12d      	b.n	8008512 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	785b      	ldrb	r3, [r3, #1]
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d007      	beq.n	80082ce <USBD_StdEPReq+0x7a>
 80082be:	2b03      	cmp	r3, #3
 80082c0:	f300 811b 	bgt.w	80084fa <USBD_StdEPReq+0x2a6>
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d072      	beq.n	80083ae <USBD_StdEPReq+0x15a>
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d03a      	beq.n	8008342 <USBD_StdEPReq+0xee>
 80082cc:	e115      	b.n	80084fa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d002      	beq.n	80082de <USBD_StdEPReq+0x8a>
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d015      	beq.n	8008308 <USBD_StdEPReq+0xb4>
 80082dc:	e02b      	b.n	8008336 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082de:	7bbb      	ldrb	r3, [r7, #14]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00c      	beq.n	80082fe <USBD_StdEPReq+0xaa>
 80082e4:	7bbb      	ldrb	r3, [r7, #14]
 80082e6:	2b80      	cmp	r3, #128	; 0x80
 80082e8:	d009      	beq.n	80082fe <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80082ea:	7bbb      	ldrb	r3, [r7, #14]
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 f884 	bl	80093fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80082f4:	2180      	movs	r1, #128	; 0x80
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f001 f880 	bl	80093fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082fc:	e020      	b.n	8008340 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80082fe:	6839      	ldr	r1, [r7, #0]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fc1e 	bl	8008b42 <USBD_CtlError>
              break;
 8008306:	e01b      	b.n	8008340 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	885b      	ldrh	r3, [r3, #2]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10e      	bne.n	800832e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00b      	beq.n	800832e <USBD_StdEPReq+0xda>
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	2b80      	cmp	r3, #128	; 0x80
 800831a:	d008      	beq.n	800832e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	88db      	ldrh	r3, [r3, #6]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d104      	bne.n	800832e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008324:	7bbb      	ldrb	r3, [r7, #14]
 8008326:	4619      	mov	r1, r3
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f001 f867 	bl	80093fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fccf 	bl	8008cd2 <USBD_CtlSendStatus>

              break;
 8008334:	e004      	b.n	8008340 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fc02 	bl	8008b42 <USBD_CtlError>
              break;
 800833e:	bf00      	nop
          }
          break;
 8008340:	e0e0      	b.n	8008504 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008348:	2b02      	cmp	r3, #2
 800834a:	d002      	beq.n	8008352 <USBD_StdEPReq+0xfe>
 800834c:	2b03      	cmp	r3, #3
 800834e:	d015      	beq.n	800837c <USBD_StdEPReq+0x128>
 8008350:	e026      	b.n	80083a0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008352:	7bbb      	ldrb	r3, [r7, #14]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00c      	beq.n	8008372 <USBD_StdEPReq+0x11e>
 8008358:	7bbb      	ldrb	r3, [r7, #14]
 800835a:	2b80      	cmp	r3, #128	; 0x80
 800835c:	d009      	beq.n	8008372 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	4619      	mov	r1, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f001 f84a 	bl	80093fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008368:	2180      	movs	r1, #128	; 0x80
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 f846 	bl	80093fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008370:	e01c      	b.n	80083ac <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fbe4 	bl	8008b42 <USBD_CtlError>
              break;
 800837a:	e017      	b.n	80083ac <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	885b      	ldrh	r3, [r3, #2]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d112      	bne.n	80083aa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800838a:	2b00      	cmp	r3, #0
 800838c:	d004      	beq.n	8008398 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f001 f851 	bl	800943a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fc9a 	bl	8008cd2 <USBD_CtlSendStatus>
              }
              break;
 800839e:	e004      	b.n	80083aa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fbcd 	bl	8008b42 <USBD_CtlError>
              break;
 80083a8:	e000      	b.n	80083ac <USBD_StdEPReq+0x158>
              break;
 80083aa:	bf00      	nop
          }
          break;
 80083ac:	e0aa      	b.n	8008504 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d002      	beq.n	80083be <USBD_StdEPReq+0x16a>
 80083b8:	2b03      	cmp	r3, #3
 80083ba:	d032      	beq.n	8008422 <USBD_StdEPReq+0x1ce>
 80083bc:	e097      	b.n	80084ee <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d007      	beq.n	80083d4 <USBD_StdEPReq+0x180>
 80083c4:	7bbb      	ldrb	r3, [r7, #14]
 80083c6:	2b80      	cmp	r3, #128	; 0x80
 80083c8:	d004      	beq.n	80083d4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fbb8 	bl	8008b42 <USBD_CtlError>
                break;
 80083d2:	e091      	b.n	80084f8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	da0b      	bge.n	80083f4 <USBD_StdEPReq+0x1a0>
 80083dc:	7bbb      	ldrb	r3, [r7, #14]
 80083de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083e2:	4613      	mov	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	4413      	add	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	3310      	adds	r3, #16
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	4413      	add	r3, r2
 80083f0:	3304      	adds	r3, #4
 80083f2:	e00b      	b.n	800840c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083f4:	7bbb      	ldrb	r3, [r7, #14]
 80083f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083fa:	4613      	mov	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	4413      	add	r3, r2
 800840a:	3304      	adds	r3, #4
 800840c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2200      	movs	r2, #0
 8008412:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2202      	movs	r2, #2
 8008418:	4619      	mov	r1, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fbfb 	bl	8008c16 <USBD_CtlSendData>
              break;
 8008420:	e06a      	b.n	80084f8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008422:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008426:	2b00      	cmp	r3, #0
 8008428:	da11      	bge.n	800844e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	f003 020f 	and.w	r2, r3, #15
 8008430:	6879      	ldr	r1, [r7, #4]
 8008432:	4613      	mov	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	440b      	add	r3, r1
 800843c:	3318      	adds	r3, #24
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d117      	bne.n	8008474 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fb7b 	bl	8008b42 <USBD_CtlError>
                  break;
 800844c:	e054      	b.n	80084f8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	f003 020f 	and.w	r2, r3, #15
 8008454:	6879      	ldr	r1, [r7, #4]
 8008456:	4613      	mov	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	440b      	add	r3, r1
 8008460:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d104      	bne.n	8008474 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800846a:	6839      	ldr	r1, [r7, #0]
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fb68 	bl	8008b42 <USBD_CtlError>
                  break;
 8008472:	e041      	b.n	80084f8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008474:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008478:	2b00      	cmp	r3, #0
 800847a:	da0b      	bge.n	8008494 <USBD_StdEPReq+0x240>
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008482:	4613      	mov	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	3310      	adds	r3, #16
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	4413      	add	r3, r2
 8008490:	3304      	adds	r3, #4
 8008492:	e00b      	b.n	80084ac <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008494:	7bbb      	ldrb	r3, [r7, #14]
 8008496:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800849a:	4613      	mov	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	4413      	add	r3, r2
 80084aa:	3304      	adds	r3, #4
 80084ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80084ae:	7bbb      	ldrb	r3, [r7, #14]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <USBD_StdEPReq+0x266>
 80084b4:	7bbb      	ldrb	r3, [r7, #14]
 80084b6:	2b80      	cmp	r3, #128	; 0x80
 80084b8:	d103      	bne.n	80084c2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2200      	movs	r2, #0
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	e00e      	b.n	80084e0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80084c2:	7bbb      	ldrb	r3, [r7, #14]
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 ffd6 	bl	8009478 <USBD_LL_IsStallEP>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2201      	movs	r2, #1
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	e002      	b.n	80084e0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2202      	movs	r2, #2
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fb95 	bl	8008c16 <USBD_CtlSendData>
              break;
 80084ec:	e004      	b.n	80084f8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80084ee:	6839      	ldr	r1, [r7, #0]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fb26 	bl	8008b42 <USBD_CtlError>
              break;
 80084f6:	bf00      	nop
          }
          break;
 80084f8:	e004      	b.n	8008504 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f000 fb20 	bl	8008b42 <USBD_CtlError>
          break;
 8008502:	bf00      	nop
      }
      break;
 8008504:	e004      	b.n	8008510 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008506:	6839      	ldr	r1, [r7, #0]
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 fb1a 	bl	8008b42 <USBD_CtlError>
      break;
 800850e:	bf00      	nop
  }

  return ret;
 8008510:	7bfb      	ldrb	r3, [r7, #15]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
	...

0800851c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008526:	2300      	movs	r3, #0
 8008528:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	885b      	ldrh	r3, [r3, #2]
 8008536:	0a1b      	lsrs	r3, r3, #8
 8008538:	b29b      	uxth	r3, r3
 800853a:	3b01      	subs	r3, #1
 800853c:	2b06      	cmp	r3, #6
 800853e:	f200 8128 	bhi.w	8008792 <USBD_GetDescriptor+0x276>
 8008542:	a201      	add	r2, pc, #4	; (adr r2, 8008548 <USBD_GetDescriptor+0x2c>)
 8008544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008548:	08008565 	.word	0x08008565
 800854c:	0800857d 	.word	0x0800857d
 8008550:	080085bd 	.word	0x080085bd
 8008554:	08008793 	.word	0x08008793
 8008558:	08008793 	.word	0x08008793
 800855c:	08008733 	.word	0x08008733
 8008560:	0800875f 	.word	0x0800875f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	7c12      	ldrb	r2, [r2, #16]
 8008570:	f107 0108 	add.w	r1, r7, #8
 8008574:	4610      	mov	r0, r2
 8008576:	4798      	blx	r3
 8008578:	60f8      	str	r0, [r7, #12]
      break;
 800857a:	e112      	b.n	80087a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	7c1b      	ldrb	r3, [r3, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d10d      	bne.n	80085a0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800858a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800858c:	f107 0208 	add.w	r2, r7, #8
 8008590:	4610      	mov	r0, r2
 8008592:	4798      	blx	r3
 8008594:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3301      	adds	r3, #1
 800859a:	2202      	movs	r2, #2
 800859c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800859e:	e100      	b.n	80087a2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a8:	f107 0208 	add.w	r2, r7, #8
 80085ac:	4610      	mov	r0, r2
 80085ae:	4798      	blx	r3
 80085b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	2202      	movs	r2, #2
 80085b8:	701a      	strb	r2, [r3, #0]
      break;
 80085ba:	e0f2      	b.n	80087a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	885b      	ldrh	r3, [r3, #2]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b05      	cmp	r3, #5
 80085c4:	f200 80ac 	bhi.w	8008720 <USBD_GetDescriptor+0x204>
 80085c8:	a201      	add	r2, pc, #4	; (adr r2, 80085d0 <USBD_GetDescriptor+0xb4>)
 80085ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ce:	bf00      	nop
 80085d0:	080085e9 	.word	0x080085e9
 80085d4:	0800861d 	.word	0x0800861d
 80085d8:	08008651 	.word	0x08008651
 80085dc:	08008685 	.word	0x08008685
 80085e0:	080086b9 	.word	0x080086b9
 80085e4:	080086ed 	.word	0x080086ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00b      	beq.n	800860c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	687a      	ldr	r2, [r7, #4]
 80085fe:	7c12      	ldrb	r2, [r2, #16]
 8008600:	f107 0108 	add.w	r1, r7, #8
 8008604:	4610      	mov	r0, r2
 8008606:	4798      	blx	r3
 8008608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860a:	e091      	b.n	8008730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 fa97 	bl	8008b42 <USBD_CtlError>
            err++;
 8008614:	7afb      	ldrb	r3, [r7, #11]
 8008616:	3301      	adds	r3, #1
 8008618:	72fb      	strb	r3, [r7, #11]
          break;
 800861a:	e089      	b.n	8008730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008622:	689b      	ldr	r3, [r3, #8]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00b      	beq.n	8008640 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	7c12      	ldrb	r2, [r2, #16]
 8008634:	f107 0108 	add.w	r1, r7, #8
 8008638:	4610      	mov	r0, r2
 800863a:	4798      	blx	r3
 800863c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800863e:	e077      	b.n	8008730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008640:	6839      	ldr	r1, [r7, #0]
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fa7d 	bl	8008b42 <USBD_CtlError>
            err++;
 8008648:	7afb      	ldrb	r3, [r7, #11]
 800864a:	3301      	adds	r3, #1
 800864c:	72fb      	strb	r3, [r7, #11]
          break;
 800864e:	e06f      	b.n	8008730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00b      	beq.n	8008674 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	7c12      	ldrb	r2, [r2, #16]
 8008668:	f107 0108 	add.w	r1, r7, #8
 800866c:	4610      	mov	r0, r2
 800866e:	4798      	blx	r3
 8008670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008672:	e05d      	b.n	8008730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008674:	6839      	ldr	r1, [r7, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 fa63 	bl	8008b42 <USBD_CtlError>
            err++;
 800867c:	7afb      	ldrb	r3, [r7, #11]
 800867e:	3301      	adds	r3, #1
 8008680:	72fb      	strb	r3, [r7, #11]
          break;
 8008682:	e055      	b.n	8008730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00b      	beq.n	80086a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	7c12      	ldrb	r2, [r2, #16]
 800869c:	f107 0108 	add.w	r1, r7, #8
 80086a0:	4610      	mov	r0, r2
 80086a2:	4798      	blx	r3
 80086a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086a6:	e043      	b.n	8008730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 fa49 	bl	8008b42 <USBD_CtlError>
            err++;
 80086b0:	7afb      	ldrb	r3, [r7, #11]
 80086b2:	3301      	adds	r3, #1
 80086b4:	72fb      	strb	r3, [r7, #11]
          break;
 80086b6:	e03b      	b.n	8008730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00b      	beq.n	80086dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086ca:	695b      	ldr	r3, [r3, #20]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	7c12      	ldrb	r2, [r2, #16]
 80086d0:	f107 0108 	add.w	r1, r7, #8
 80086d4:	4610      	mov	r0, r2
 80086d6:	4798      	blx	r3
 80086d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086da:	e029      	b.n	8008730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fa2f 	bl	8008b42 <USBD_CtlError>
            err++;
 80086e4:	7afb      	ldrb	r3, [r7, #11]
 80086e6:	3301      	adds	r3, #1
 80086e8:	72fb      	strb	r3, [r7, #11]
          break;
 80086ea:	e021      	b.n	8008730 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00b      	beq.n	8008710 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	7c12      	ldrb	r2, [r2, #16]
 8008704:	f107 0108 	add.w	r1, r7, #8
 8008708:	4610      	mov	r0, r2
 800870a:	4798      	blx	r3
 800870c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800870e:	e00f      	b.n	8008730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008710:	6839      	ldr	r1, [r7, #0]
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fa15 	bl	8008b42 <USBD_CtlError>
            err++;
 8008718:	7afb      	ldrb	r3, [r7, #11]
 800871a:	3301      	adds	r3, #1
 800871c:	72fb      	strb	r3, [r7, #11]
          break;
 800871e:	e007      	b.n	8008730 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008720:	6839      	ldr	r1, [r7, #0]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 fa0d 	bl	8008b42 <USBD_CtlError>
          err++;
 8008728:	7afb      	ldrb	r3, [r7, #11]
 800872a:	3301      	adds	r3, #1
 800872c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800872e:	e038      	b.n	80087a2 <USBD_GetDescriptor+0x286>
 8008730:	e037      	b.n	80087a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	7c1b      	ldrb	r3, [r3, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d109      	bne.n	800874e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008742:	f107 0208 	add.w	r2, r7, #8
 8008746:	4610      	mov	r0, r2
 8008748:	4798      	blx	r3
 800874a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800874c:	e029      	b.n	80087a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f9f6 	bl	8008b42 <USBD_CtlError>
        err++;
 8008756:	7afb      	ldrb	r3, [r7, #11]
 8008758:	3301      	adds	r3, #1
 800875a:	72fb      	strb	r3, [r7, #11]
      break;
 800875c:	e021      	b.n	80087a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	7c1b      	ldrb	r3, [r3, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10d      	bne.n	8008782 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800876c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876e:	f107 0208 	add.w	r2, r7, #8
 8008772:	4610      	mov	r0, r2
 8008774:	4798      	blx	r3
 8008776:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3301      	adds	r3, #1
 800877c:	2207      	movs	r2, #7
 800877e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008780:	e00f      	b.n	80087a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f9dc 	bl	8008b42 <USBD_CtlError>
        err++;
 800878a:	7afb      	ldrb	r3, [r7, #11]
 800878c:	3301      	adds	r3, #1
 800878e:	72fb      	strb	r3, [r7, #11]
      break;
 8008790:	e007      	b.n	80087a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f9d4 	bl	8008b42 <USBD_CtlError>
      err++;
 800879a:	7afb      	ldrb	r3, [r7, #11]
 800879c:	3301      	adds	r3, #1
 800879e:	72fb      	strb	r3, [r7, #11]
      break;
 80087a0:	bf00      	nop
  }

  if (err != 0U)
 80087a2:	7afb      	ldrb	r3, [r7, #11]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d11c      	bne.n	80087e2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80087a8:	893b      	ldrh	r3, [r7, #8]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d011      	beq.n	80087d2 <USBD_GetDescriptor+0x2b6>
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	88db      	ldrh	r3, [r3, #6]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00d      	beq.n	80087d2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	88da      	ldrh	r2, [r3, #6]
 80087ba:	893b      	ldrh	r3, [r7, #8]
 80087bc:	4293      	cmp	r3, r2
 80087be:	bf28      	it	cs
 80087c0:	4613      	movcs	r3, r2
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087c6:	893b      	ldrh	r3, [r7, #8]
 80087c8:	461a      	mov	r2, r3
 80087ca:	68f9      	ldr	r1, [r7, #12]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fa22 	bl	8008c16 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	88db      	ldrh	r3, [r3, #6]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d104      	bne.n	80087e4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fa79 	bl	8008cd2 <USBD_CtlSendStatus>
 80087e0:	e000      	b.n	80087e4 <USBD_GetDescriptor+0x2c8>
    return;
 80087e2:	bf00      	nop
    }
  }
}
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop

080087ec <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	889b      	ldrh	r3, [r3, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d130      	bne.n	8008860 <USBD_SetAddress+0x74>
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	88db      	ldrh	r3, [r3, #6]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d12c      	bne.n	8008860 <USBD_SetAddress+0x74>
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	885b      	ldrh	r3, [r3, #2]
 800880a:	2b7f      	cmp	r3, #127	; 0x7f
 800880c:	d828      	bhi.n	8008860 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	885b      	ldrh	r3, [r3, #2]
 8008812:	b2db      	uxtb	r3, r3
 8008814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008818:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008820:	2b03      	cmp	r3, #3
 8008822:	d104      	bne.n	800882e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f98b 	bl	8008b42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800882c:	e01d      	b.n	800886a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	7bfa      	ldrb	r2, [r7, #15]
 8008832:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008836:	7bfb      	ldrb	r3, [r7, #15]
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fe48 	bl	80094d0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fa46 	bl	8008cd2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008846:	7bfb      	ldrb	r3, [r7, #15]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d004      	beq.n	8008856 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2202      	movs	r2, #2
 8008850:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008854:	e009      	b.n	800886a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2201      	movs	r2, #1
 800885a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800885e:	e004      	b.n	800886a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f96d 	bl	8008b42 <USBD_CtlError>
  }
}
 8008868:	bf00      	nop
 800886a:	bf00      	nop
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
	...

08008874 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	885b      	ldrh	r3, [r3, #2]
 8008882:	b2da      	uxtb	r2, r3
 8008884:	4b41      	ldr	r3, [pc, #260]	; (800898c <USBD_SetConfig+0x118>)
 8008886:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008888:	4b40      	ldr	r3, [pc, #256]	; (800898c <USBD_SetConfig+0x118>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d904      	bls.n	800889a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f955 	bl	8008b42 <USBD_CtlError>
 8008898:	e075      	b.n	8008986 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d002      	beq.n	80088aa <USBD_SetConfig+0x36>
 80088a4:	2b03      	cmp	r3, #3
 80088a6:	d023      	beq.n	80088f0 <USBD_SetConfig+0x7c>
 80088a8:	e062      	b.n	8008970 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80088aa:	4b38      	ldr	r3, [pc, #224]	; (800898c <USBD_SetConfig+0x118>)
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d01a      	beq.n	80088e8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80088b2:	4b36      	ldr	r3, [pc, #216]	; (800898c <USBD_SetConfig+0x118>)
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	461a      	mov	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2203      	movs	r2, #3
 80088c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80088c4:	4b31      	ldr	r3, [pc, #196]	; (800898c <USBD_SetConfig+0x118>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7ff f9e7 	bl	8007c9e <USBD_SetClassConfig>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d104      	bne.n	80088e0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f932 	bl	8008b42 <USBD_CtlError>
            return;
 80088de:	e052      	b.n	8008986 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f9f6 	bl	8008cd2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80088e6:	e04e      	b.n	8008986 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f9f2 	bl	8008cd2 <USBD_CtlSendStatus>
        break;
 80088ee:	e04a      	b.n	8008986 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80088f0:	4b26      	ldr	r3, [pc, #152]	; (800898c <USBD_SetConfig+0x118>)
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d112      	bne.n	800891e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2202      	movs	r2, #2
 80088fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008900:	4b22      	ldr	r3, [pc, #136]	; (800898c <USBD_SetConfig+0x118>)
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	461a      	mov	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800890a:	4b20      	ldr	r3, [pc, #128]	; (800898c <USBD_SetConfig+0x118>)
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7ff f9e3 	bl	8007cdc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f9db 	bl	8008cd2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800891c:	e033      	b.n	8008986 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800891e:	4b1b      	ldr	r3, [pc, #108]	; (800898c <USBD_SetConfig+0x118>)
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	429a      	cmp	r2, r3
 800892a:	d01d      	beq.n	8008968 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	b2db      	uxtb	r3, r3
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff f9d1 	bl	8007cdc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800893a:	4b14      	ldr	r3, [pc, #80]	; (800898c <USBD_SetConfig+0x118>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008944:	4b11      	ldr	r3, [pc, #68]	; (800898c <USBD_SetConfig+0x118>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff f9a7 	bl	8007c9e <USBD_SetClassConfig>
 8008950:	4603      	mov	r3, r0
 8008952:	2b02      	cmp	r3, #2
 8008954:	d104      	bne.n	8008960 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f8f2 	bl	8008b42 <USBD_CtlError>
            return;
 800895e:	e012      	b.n	8008986 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f9b6 	bl	8008cd2 <USBD_CtlSendStatus>
        break;
 8008966:	e00e      	b.n	8008986 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f9b2 	bl	8008cd2 <USBD_CtlSendStatus>
        break;
 800896e:	e00a      	b.n	8008986 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f8e5 	bl	8008b42 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008978:	4b04      	ldr	r3, [pc, #16]	; (800898c <USBD_SetConfig+0x118>)
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	4619      	mov	r1, r3
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff f9ac 	bl	8007cdc <USBD_ClrClassConfig>
        break;
 8008984:	bf00      	nop
    }
  }
}
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}
 800898c:	200003f4 	.word	0x200003f4

08008990 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	88db      	ldrh	r3, [r3, #6]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d004      	beq.n	80089ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f8cc 	bl	8008b42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089aa:	e022      	b.n	80089f2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	dc02      	bgt.n	80089bc <USBD_GetConfig+0x2c>
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	dc03      	bgt.n	80089c2 <USBD_GetConfig+0x32>
 80089ba:	e015      	b.n	80089e8 <USBD_GetConfig+0x58>
 80089bc:	2b03      	cmp	r3, #3
 80089be:	d00b      	beq.n	80089d8 <USBD_GetConfig+0x48>
 80089c0:	e012      	b.n	80089e8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3308      	adds	r3, #8
 80089cc:	2201      	movs	r2, #1
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 f920 	bl	8008c16 <USBD_CtlSendData>
        break;
 80089d6:	e00c      	b.n	80089f2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	3304      	adds	r3, #4
 80089dc:	2201      	movs	r2, #1
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f918 	bl	8008c16 <USBD_CtlSendData>
        break;
 80089e6:	e004      	b.n	80089f2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f8a9 	bl	8008b42 <USBD_CtlError>
        break;
 80089f0:	bf00      	nop
}
 80089f2:	bf00      	nop
 80089f4:	3708      	adds	r7, #8
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d81e      	bhi.n	8008a4e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	88db      	ldrh	r3, [r3, #6]
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d004      	beq.n	8008a22 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f891 	bl	8008b42 <USBD_CtlError>
        break;
 8008a20:	e01a      	b.n	8008a58 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d005      	beq.n	8008a3e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	f043 0202 	orr.w	r2, r3, #2
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	330c      	adds	r3, #12
 8008a42:	2202      	movs	r2, #2
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f8e5 	bl	8008c16 <USBD_CtlSendData>
      break;
 8008a4c:	e004      	b.n	8008a58 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f876 	bl	8008b42 <USBD_CtlError>
      break;
 8008a56:	bf00      	nop
  }
}
 8008a58:	bf00      	nop
 8008a5a:	3708      	adds	r7, #8
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b082      	sub	sp, #8
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	885b      	ldrh	r3, [r3, #2]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d106      	bne.n	8008a80 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f929 	bl	8008cd2 <USBD_CtlSendStatus>
  }
}
 8008a80:	bf00      	nop
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d80b      	bhi.n	8008ab6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	885b      	ldrh	r3, [r3, #2]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d10c      	bne.n	8008ac0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f90f 	bl	8008cd2 <USBD_CtlSendStatus>
      }
      break;
 8008ab4:	e004      	b.n	8008ac0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008ab6:	6839      	ldr	r1, [r7, #0]
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 f842 	bl	8008b42 <USBD_CtlError>
      break;
 8008abe:	e000      	b.n	8008ac2 <USBD_ClrFeature+0x3a>
      break;
 8008ac0:	bf00      	nop
  }
}
 8008ac2:	bf00      	nop
 8008ac4:	3708      	adds	r7, #8
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b083      	sub	sp, #12
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	781a      	ldrb	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	785a      	ldrb	r2, [r3, #1]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	3302      	adds	r3, #2
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	3303      	adds	r3, #3
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	021b      	lsls	r3, r3, #8
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	4413      	add	r3, r2
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	3304      	adds	r3, #4
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	3305      	adds	r3, #5
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	021b      	lsls	r3, r3, #8
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	4413      	add	r3, r2
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	3306      	adds	r3, #6
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	3307      	adds	r3, #7
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	021b      	lsls	r3, r3, #8
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	4413      	add	r3, r2
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	80da      	strh	r2, [r3, #6]

}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bc80      	pop	{r7}
 8008b40:	4770      	bx	lr

08008b42 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008b4c:	2180      	movs	r1, #128	; 0x80
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fc54 	bl	80093fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008b54:	2100      	movs	r1, #0
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fc50 	bl	80093fc <USBD_LL_StallEP>
}
 8008b5c:	bf00      	nop
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d032      	beq.n	8008be0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f000 f834 	bl	8008be8 <USBD_GetLen>
 8008b80:	4603      	mov	r3, r0
 8008b82:	3301      	adds	r3, #1
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	1c5a      	adds	r2, r3, #1
 8008b92:	75fa      	strb	r2, [r7, #23]
 8008b94:	461a      	mov	r2, r3
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	4413      	add	r3, r2
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	7812      	ldrb	r2, [r2, #0]
 8008b9e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	1c5a      	adds	r2, r3, #1
 8008ba4:	75fa      	strb	r2, [r7, #23]
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	4413      	add	r3, r2
 8008bac:	2203      	movs	r2, #3
 8008bae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008bb0:	e012      	b.n	8008bd8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	60fa      	str	r2, [r7, #12]
 8008bb8:	7dfa      	ldrb	r2, [r7, #23]
 8008bba:	1c51      	adds	r1, r2, #1
 8008bbc:	75f9      	strb	r1, [r7, #23]
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	68ba      	ldr	r2, [r7, #8]
 8008bc2:	440a      	add	r2, r1
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008bc8:	7dfb      	ldrb	r3, [r7, #23]
 8008bca:	1c5a      	adds	r2, r3, #1
 8008bcc:	75fa      	strb	r2, [r7, #23]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e8      	bne.n	8008bb2 <USBD_GetString+0x4e>
    }
  }
}
 8008be0:	bf00      	nop
 8008be2:	3718      	adds	r7, #24
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008bf4:	e005      	b.n	8008c02 <USBD_GetLen+0x1a>
  {
    len++;
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1f5      	bne.n	8008bf6 <USBD_GetLen+0xe>
  }

  return len;
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bc80      	pop	{r7}
 8008c14:	4770      	bx	lr

08008c16 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b084      	sub	sp, #16
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	60f8      	str	r0, [r7, #12]
 8008c1e:	60b9      	str	r1, [r7, #8]
 8008c20:	4613      	mov	r3, r2
 8008c22:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2202      	movs	r2, #2
 8008c28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c2c:	88fa      	ldrh	r2, [r7, #6]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008c32:	88fa      	ldrh	r2, [r7, #6]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c38:	88fb      	ldrh	r3, [r7, #6]
 8008c3a:	68ba      	ldr	r2, [r7, #8]
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 fc65 	bl	800950e <USBD_LL_Transmit>

  return USBD_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	60f8      	str	r0, [r7, #12]
 8008c56:	60b9      	str	r1, [r7, #8]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c5c:	88fb      	ldrh	r3, [r7, #6]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	2100      	movs	r1, #0
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f000 fc53 	bl	800950e <USBD_LL_Transmit>

  return USBD_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3710      	adds	r7, #16
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b084      	sub	sp, #16
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	60f8      	str	r0, [r7, #12]
 8008c7a:	60b9      	str	r1, [r7, #8]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2203      	movs	r2, #3
 8008c84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c88:	88fa      	ldrh	r2, [r7, #6]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008c90:	88fa      	ldrh	r2, [r7, #6]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c98:	88fb      	ldrh	r3, [r7, #6]
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f000 fc58 	bl	8009554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	60b9      	str	r1, [r7, #8]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cbc:	88fb      	ldrh	r3, [r7, #6]
 8008cbe:	68ba      	ldr	r2, [r7, #8]
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f000 fc46 	bl	8009554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b082      	sub	sp, #8
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2204      	movs	r2, #4
 8008cde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fc10 	bl	800950e <USBD_LL_Transmit>

  return USBD_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2205      	movs	r2, #5
 8008d04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d08:	2300      	movs	r3, #0
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fc20 	bl	8009554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3708      	adds	r7, #8
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
	...

08008d20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d24:	2200      	movs	r2, #0
 8008d26:	4912      	ldr	r1, [pc, #72]	; (8008d70 <MX_USB_DEVICE_Init+0x50>)
 8008d28:	4812      	ldr	r0, [pc, #72]	; (8008d74 <MX_USB_DEVICE_Init+0x54>)
 8008d2a:	f7fe ff5e 	bl	8007bea <USBD_Init>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d34:	f7f8 f860 	bl	8000df8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d38:	490f      	ldr	r1, [pc, #60]	; (8008d78 <MX_USB_DEVICE_Init+0x58>)
 8008d3a:	480e      	ldr	r0, [pc, #56]	; (8008d74 <MX_USB_DEVICE_Init+0x54>)
 8008d3c:	f7fe ff80 	bl	8007c40 <USBD_RegisterClass>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d46:	f7f8 f857 	bl	8000df8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d4a:	490c      	ldr	r1, [pc, #48]	; (8008d7c <MX_USB_DEVICE_Init+0x5c>)
 8008d4c:	4809      	ldr	r0, [pc, #36]	; (8008d74 <MX_USB_DEVICE_Init+0x54>)
 8008d4e:	f7fe feb1 	bl	8007ab4 <USBD_CDC_RegisterInterface>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d58:	f7f8 f84e 	bl	8000df8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d5c:	4805      	ldr	r0, [pc, #20]	; (8008d74 <MX_USB_DEVICE_Init+0x54>)
 8008d5e:	f7fe ff88 	bl	8007c72 <USBD_Start>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d68:	f7f8 f846 	bl	8000df8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d6c:	bf00      	nop
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	2000012c 	.word	0x2000012c
 8008d74:	200003f8 	.word	0x200003f8
 8008d78:	20000018 	.word	0x20000018
 8008d7c:	2000011c 	.word	0x2000011c

08008d80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d84:	2200      	movs	r2, #0
 8008d86:	4905      	ldr	r1, [pc, #20]	; (8008d9c <CDC_Init_FS+0x1c>)
 8008d88:	4805      	ldr	r0, [pc, #20]	; (8008da0 <CDC_Init_FS+0x20>)
 8008d8a:	f7fe fea9 	bl	8007ae0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d8e:	4905      	ldr	r1, [pc, #20]	; (8008da4 <CDC_Init_FS+0x24>)
 8008d90:	4803      	ldr	r0, [pc, #12]	; (8008da0 <CDC_Init_FS+0x20>)
 8008d92:	f7fe febe 	bl	8007b12 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	20000abc 	.word	0x20000abc
 8008da0:	200003f8 	.word	0x200003f8
 8008da4:	200006bc 	.word	0x200006bc

08008da8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008da8:	b480      	push	{r7}
 8008daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008dac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bc80      	pop	{r7}
 8008db4:	4770      	bx	lr
	...

08008db8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	6039      	str	r1, [r7, #0]
 8008dc2:	71fb      	strb	r3, [r7, #7]
 8008dc4:	4613      	mov	r3, r2
 8008dc6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	2b23      	cmp	r3, #35	; 0x23
 8008dcc:	d84a      	bhi.n	8008e64 <CDC_Control_FS+0xac>
 8008dce:	a201      	add	r2, pc, #4	; (adr r2, 8008dd4 <CDC_Control_FS+0x1c>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008e65 	.word	0x08008e65
 8008dd8:	08008e65 	.word	0x08008e65
 8008ddc:	08008e65 	.word	0x08008e65
 8008de0:	08008e65 	.word	0x08008e65
 8008de4:	08008e65 	.word	0x08008e65
 8008de8:	08008e65 	.word	0x08008e65
 8008dec:	08008e65 	.word	0x08008e65
 8008df0:	08008e65 	.word	0x08008e65
 8008df4:	08008e65 	.word	0x08008e65
 8008df8:	08008e65 	.word	0x08008e65
 8008dfc:	08008e65 	.word	0x08008e65
 8008e00:	08008e65 	.word	0x08008e65
 8008e04:	08008e65 	.word	0x08008e65
 8008e08:	08008e65 	.word	0x08008e65
 8008e0c:	08008e65 	.word	0x08008e65
 8008e10:	08008e65 	.word	0x08008e65
 8008e14:	08008e65 	.word	0x08008e65
 8008e18:	08008e65 	.word	0x08008e65
 8008e1c:	08008e65 	.word	0x08008e65
 8008e20:	08008e65 	.word	0x08008e65
 8008e24:	08008e65 	.word	0x08008e65
 8008e28:	08008e65 	.word	0x08008e65
 8008e2c:	08008e65 	.word	0x08008e65
 8008e30:	08008e65 	.word	0x08008e65
 8008e34:	08008e65 	.word	0x08008e65
 8008e38:	08008e65 	.word	0x08008e65
 8008e3c:	08008e65 	.word	0x08008e65
 8008e40:	08008e65 	.word	0x08008e65
 8008e44:	08008e65 	.word	0x08008e65
 8008e48:	08008e65 	.word	0x08008e65
 8008e4c:	08008e65 	.word	0x08008e65
 8008e50:	08008e65 	.word	0x08008e65
 8008e54:	08008e65 	.word	0x08008e65
 8008e58:	08008e65 	.word	0x08008e65
 8008e5c:	08008e65 	.word	0x08008e65
 8008e60:	08008e65 	.word	0x08008e65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008e64:	bf00      	nop
  }

  return (USBD_OK);
 8008e66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bc80      	pop	{r7}
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop

08008e74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008e7e:	6879      	ldr	r1, [r7, #4]
 8008e80:	4805      	ldr	r0, [pc, #20]	; (8008e98 <CDC_Receive_FS+0x24>)
 8008e82:	f7fe fe46 	bl	8007b12 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008e86:	4804      	ldr	r0, [pc, #16]	; (8008e98 <CDC_Receive_FS+0x24>)
 8008e88:	f7fe fe85 	bl	8007b96 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008e8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	200003f8 	.word	0x200003f8

08008e9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008eac:	4b0d      	ldr	r3, [pc, #52]	; (8008ee4 <CDC_Transmit_FS+0x48>)
 8008eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d001      	beq.n	8008ec2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e00b      	b.n	8008eda <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008ec2:	887b      	ldrh	r3, [r7, #2]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	4806      	ldr	r0, [pc, #24]	; (8008ee4 <CDC_Transmit_FS+0x48>)
 8008eca:	f7fe fe09 	bl	8007ae0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008ece:	4805      	ldr	r0, [pc, #20]	; (8008ee4 <CDC_Transmit_FS+0x48>)
 8008ed0:	f7fe fe32 	bl	8007b38 <USBD_CDC_TransmitPacket>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	200003f8 	.word	0x200003f8

08008ee8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	6039      	str	r1, [r7, #0]
 8008ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	2212      	movs	r2, #18
 8008ef8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008efa:	4b03      	ldr	r3, [pc, #12]	; (8008f08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bc80      	pop	{r7}
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	20000148 	.word	0x20000148

08008f0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	4603      	mov	r3, r0
 8008f14:	6039      	str	r1, [r7, #0]
 8008f16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	2204      	movs	r2, #4
 8008f1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f1e:	4b03      	ldr	r3, [pc, #12]	; (8008f2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bc80      	pop	{r7}
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	2000015c 	.word	0x2000015c

08008f30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	6039      	str	r1, [r7, #0]
 8008f3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f3c:	79fb      	ldrb	r3, [r7, #7]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d105      	bne.n	8008f4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	4907      	ldr	r1, [pc, #28]	; (8008f64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f46:	4808      	ldr	r0, [pc, #32]	; (8008f68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f48:	f7ff fe0c 	bl	8008b64 <USBD_GetString>
 8008f4c:	e004      	b.n	8008f58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	4904      	ldr	r1, [pc, #16]	; (8008f64 <USBD_FS_ProductStrDescriptor+0x34>)
 8008f52:	4805      	ldr	r0, [pc, #20]	; (8008f68 <USBD_FS_ProductStrDescriptor+0x38>)
 8008f54:	f7ff fe06 	bl	8008b64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f58:	4b02      	ldr	r3, [pc, #8]	; (8008f64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20000ebc 	.word	0x20000ebc
 8008f68:	0800c4e0 	.word	0x0800c4e0

08008f6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	6039      	str	r1, [r7, #0]
 8008f76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	4904      	ldr	r1, [pc, #16]	; (8008f8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f7c:	4804      	ldr	r0, [pc, #16]	; (8008f90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f7e:	f7ff fdf1 	bl	8008b64 <USBD_GetString>
  return USBD_StrDesc;
 8008f82:	4b02      	ldr	r3, [pc, #8]	; (8008f8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	20000ebc 	.word	0x20000ebc
 8008f90:	0800c4e4 	.word	0x0800c4e4

08008f94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	6039      	str	r1, [r7, #0]
 8008f9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	221a      	movs	r2, #26
 8008fa4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008fa6:	f000 f843 	bl	8009030 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008faa:	4b02      	ldr	r3, [pc, #8]	; (8008fb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	20000160 	.word	0x20000160

08008fb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	6039      	str	r1, [r7, #0]
 8008fc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008fc4:	79fb      	ldrb	r3, [r7, #7]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d105      	bne.n	8008fd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fca:	683a      	ldr	r2, [r7, #0]
 8008fcc:	4907      	ldr	r1, [pc, #28]	; (8008fec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fce:	4808      	ldr	r0, [pc, #32]	; (8008ff0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fd0:	f7ff fdc8 	bl	8008b64 <USBD_GetString>
 8008fd4:	e004      	b.n	8008fe0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008fd6:	683a      	ldr	r2, [r7, #0]
 8008fd8:	4904      	ldr	r1, [pc, #16]	; (8008fec <USBD_FS_ConfigStrDescriptor+0x34>)
 8008fda:	4805      	ldr	r0, [pc, #20]	; (8008ff0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008fdc:	f7ff fdc2 	bl	8008b64 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fe0:	4b02      	ldr	r3, [pc, #8]	; (8008fec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3708      	adds	r7, #8
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	20000ebc 	.word	0x20000ebc
 8008ff0:	0800c4f8 	.word	0x0800c4f8

08008ff4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	6039      	str	r1, [r7, #0]
 8008ffe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d105      	bne.n	8009012 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	4907      	ldr	r1, [pc, #28]	; (8009028 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800900a:	4808      	ldr	r0, [pc, #32]	; (800902c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800900c:	f7ff fdaa 	bl	8008b64 <USBD_GetString>
 8009010:	e004      	b.n	800901c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	4904      	ldr	r1, [pc, #16]	; (8009028 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009016:	4805      	ldr	r0, [pc, #20]	; (800902c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009018:	f7ff fda4 	bl	8008b64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800901c:	4b02      	ldr	r3, [pc, #8]	; (8009028 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20000ebc 	.word	0x20000ebc
 800902c:	0800c504 	.word	0x0800c504

08009030 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009036:	4b0f      	ldr	r3, [pc, #60]	; (8009074 <Get_SerialNum+0x44>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800903c:	4b0e      	ldr	r3, [pc, #56]	; (8009078 <Get_SerialNum+0x48>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009042:	4b0e      	ldr	r3, [pc, #56]	; (800907c <Get_SerialNum+0x4c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4413      	add	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d009      	beq.n	800906a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009056:	2208      	movs	r2, #8
 8009058:	4909      	ldr	r1, [pc, #36]	; (8009080 <Get_SerialNum+0x50>)
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f000 f814 	bl	8009088 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009060:	2204      	movs	r2, #4
 8009062:	4908      	ldr	r1, [pc, #32]	; (8009084 <Get_SerialNum+0x54>)
 8009064:	68b8      	ldr	r0, [r7, #8]
 8009066:	f000 f80f 	bl	8009088 <IntToUnicode>
  }
}
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	1ffff7e8 	.word	0x1ffff7e8
 8009078:	1ffff7ec 	.word	0x1ffff7ec
 800907c:	1ffff7f0 	.word	0x1ffff7f0
 8009080:	20000162 	.word	0x20000162
 8009084:	20000172 	.word	0x20000172

08009088 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009088:	b480      	push	{r7}
 800908a:	b087      	sub	sp, #28
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	4613      	mov	r3, r2
 8009094:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800909a:	2300      	movs	r3, #0
 800909c:	75fb      	strb	r3, [r7, #23]
 800909e:	e027      	b.n	80090f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	0f1b      	lsrs	r3, r3, #28
 80090a4:	2b09      	cmp	r3, #9
 80090a6:	d80b      	bhi.n	80090c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	0f1b      	lsrs	r3, r3, #28
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	7dfb      	ldrb	r3, [r7, #23]
 80090b0:	005b      	lsls	r3, r3, #1
 80090b2:	4619      	mov	r1, r3
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	440b      	add	r3, r1
 80090b8:	3230      	adds	r2, #48	; 0x30
 80090ba:	b2d2      	uxtb	r2, r2
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	e00a      	b.n	80090d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	0f1b      	lsrs	r3, r3, #28
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	7dfb      	ldrb	r3, [r7, #23]
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	4619      	mov	r1, r3
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	440b      	add	r3, r1
 80090d0:	3237      	adds	r2, #55	; 0x37
 80090d2:	b2d2      	uxtb	r2, r2
 80090d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	011b      	lsls	r3, r3, #4
 80090da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090dc:	7dfb      	ldrb	r3, [r7, #23]
 80090de:	005b      	lsls	r3, r3, #1
 80090e0:	3301      	adds	r3, #1
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	4413      	add	r3, r2
 80090e6:	2200      	movs	r2, #0
 80090e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80090ea:	7dfb      	ldrb	r3, [r7, #23]
 80090ec:	3301      	adds	r3, #1
 80090ee:	75fb      	strb	r3, [r7, #23]
 80090f0:	7dfa      	ldrb	r2, [r7, #23]
 80090f2:	79fb      	ldrb	r3, [r7, #7]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d3d3      	bcc.n	80090a0 <IntToUnicode+0x18>
  }
}
 80090f8:	bf00      	nop
 80090fa:	bf00      	nop
 80090fc:	371c      	adds	r7, #28
 80090fe:	46bd      	mov	sp, r7
 8009100:	bc80      	pop	{r7}
 8009102:	4770      	bx	lr

08009104 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a0d      	ldr	r2, [pc, #52]	; (8009148 <HAL_PCD_MspInit+0x44>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d113      	bne.n	800913e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009116:	4b0d      	ldr	r3, [pc, #52]	; (800914c <HAL_PCD_MspInit+0x48>)
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	4a0c      	ldr	r2, [pc, #48]	; (800914c <HAL_PCD_MspInit+0x48>)
 800911c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009120:	61d3      	str	r3, [r2, #28]
 8009122:	4b0a      	ldr	r3, [pc, #40]	; (800914c <HAL_PCD_MspInit+0x48>)
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800912e:	2200      	movs	r2, #0
 8009130:	2100      	movs	r1, #0
 8009132:	2014      	movs	r0, #20
 8009134:	f7f8 feb7 	bl	8001ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009138:	2014      	movs	r0, #20
 800913a:	f7f8 fed0 	bl	8001ede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800913e:	bf00      	nop
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	40005c00 	.word	0x40005c00
 800914c:	40021000 	.word	0x40021000

08009150 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009164:	4619      	mov	r1, r3
 8009166:	4610      	mov	r0, r2
 8009168:	f7fe fdcb 	bl	8007d02 <USBD_LL_SetupStage>
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009186:	78fa      	ldrb	r2, [r7, #3]
 8009188:	6879      	ldr	r1, [r7, #4]
 800918a:	4613      	mov	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4413      	add	r3, r2
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	440b      	add	r3, r1
 8009194:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	78fb      	ldrb	r3, [r7, #3]
 800919c:	4619      	mov	r1, r3
 800919e:	f7fe fdfd 	bl	8007d9c <USBD_LL_DataOutStage>
}
 80091a2:	bf00      	nop
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b082      	sub	sp, #8
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80091bc:	78fa      	ldrb	r2, [r7, #3]
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	440b      	add	r3, r1
 80091ca:	333c      	adds	r3, #60	; 0x3c
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	78fb      	ldrb	r3, [r7, #3]
 80091d0:	4619      	mov	r1, r3
 80091d2:	f7fe fe54 	bl	8007e7e <USBD_LL_DataInStage>
}
 80091d6:	bf00      	nop
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b082      	sub	sp, #8
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fe ff64 	bl	80080ba <USBD_LL_SOF>
}
 80091f2:	bf00      	nop
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b084      	sub	sp, #16
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009202:	2301      	movs	r3, #1
 8009204:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	2b02      	cmp	r3, #2
 800920c:	d001      	beq.n	8009212 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800920e:	f7f7 fdf3 	bl	8000df8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009218:	7bfa      	ldrb	r2, [r7, #15]
 800921a:	4611      	mov	r1, r2
 800921c:	4618      	mov	r0, r3
 800921e:	f7fe ff14 	bl	800804a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009228:	4618      	mov	r0, r3
 800922a:	f7fe fecd 	bl	8007fc8 <USBD_LL_Reset>
}
 800922e:	bf00      	nop
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe ff0e 	bl	8008068 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d005      	beq.n	8009260 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009254:	4b04      	ldr	r3, [pc, #16]	; (8009268 <HAL_PCD_SuspendCallback+0x30>)
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	4a03      	ldr	r2, [pc, #12]	; (8009268 <HAL_PCD_SuspendCallback+0x30>)
 800925a:	f043 0306 	orr.w	r3, r3, #6
 800925e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	e000ed00 	.word	0xe000ed00

0800926c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800927a:	4618      	mov	r0, r3
 800927c:	f7fe ff08 	bl	8008090 <USBD_LL_Resume>
}
 8009280:	bf00      	nop
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009290:	4a28      	ldr	r2, [pc, #160]	; (8009334 <USBD_LL_Init+0xac>)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a26      	ldr	r2, [pc, #152]	; (8009334 <USBD_LL_Init+0xac>)
 800929c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80092a0:	4b24      	ldr	r3, [pc, #144]	; (8009334 <USBD_LL_Init+0xac>)
 80092a2:	4a25      	ldr	r2, [pc, #148]	; (8009338 <USBD_LL_Init+0xb0>)
 80092a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80092a6:	4b23      	ldr	r3, [pc, #140]	; (8009334 <USBD_LL_Init+0xac>)
 80092a8:	2208      	movs	r2, #8
 80092aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80092ac:	4b21      	ldr	r3, [pc, #132]	; (8009334 <USBD_LL_Init+0xac>)
 80092ae:	2202      	movs	r2, #2
 80092b0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80092b2:	4b20      	ldr	r3, [pc, #128]	; (8009334 <USBD_LL_Init+0xac>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80092b8:	4b1e      	ldr	r3, [pc, #120]	; (8009334 <USBD_LL_Init+0xac>)
 80092ba:	2200      	movs	r2, #0
 80092bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80092be:	4b1d      	ldr	r3, [pc, #116]	; (8009334 <USBD_LL_Init+0xac>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80092c4:	481b      	ldr	r0, [pc, #108]	; (8009334 <USBD_LL_Init+0xac>)
 80092c6:	f7f9 f9af 	bl	8002628 <HAL_PCD_Init>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80092d0:	f7f7 fd92 	bl	8000df8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092da:	2318      	movs	r3, #24
 80092dc:	2200      	movs	r2, #0
 80092de:	2100      	movs	r1, #0
 80092e0:	f7fa fe23 	bl	8003f2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092ea:	2358      	movs	r3, #88	; 0x58
 80092ec:	2200      	movs	r2, #0
 80092ee:	2180      	movs	r1, #128	; 0x80
 80092f0:	f7fa fe1b 	bl	8003f2a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80092fa:	23c0      	movs	r3, #192	; 0xc0
 80092fc:	2200      	movs	r2, #0
 80092fe:	2181      	movs	r1, #129	; 0x81
 8009300:	f7fa fe13 	bl	8003f2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800930a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800930e:	2200      	movs	r2, #0
 8009310:	2101      	movs	r1, #1
 8009312:	f7fa fe0a 	bl	8003f2a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800931c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009320:	2200      	movs	r2, #0
 8009322:	2182      	movs	r1, #130	; 0x82
 8009324:	f7fa fe01 	bl	8003f2a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	200010bc 	.word	0x200010bc
 8009338:	40005c00 	.word	0x40005c00

0800933c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009344:	2300      	movs	r3, #0
 8009346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009352:	4618      	mov	r0, r3
 8009354:	f7f9 fa73 	bl	800283e <HAL_PCD_Start>
 8009358:	4603      	mov	r3, r0
 800935a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	4618      	mov	r0, r3
 8009360:	f000 f94e 	bl	8009600 <USBD_Get_USB_Status>
 8009364:	4603      	mov	r3, r0
 8009366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009368:	7bbb      	ldrb	r3, [r7, #14]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b084      	sub	sp, #16
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	4608      	mov	r0, r1
 800937c:	4611      	mov	r1, r2
 800937e:	461a      	mov	r2, r3
 8009380:	4603      	mov	r3, r0
 8009382:	70fb      	strb	r3, [r7, #3]
 8009384:	460b      	mov	r3, r1
 8009386:	70bb      	strb	r3, [r7, #2]
 8009388:	4613      	mov	r3, r2
 800938a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009390:	2300      	movs	r3, #0
 8009392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800939a:	78bb      	ldrb	r3, [r7, #2]
 800939c:	883a      	ldrh	r2, [r7, #0]
 800939e:	78f9      	ldrb	r1, [r7, #3]
 80093a0:	f7f9 fbeb 	bl	8002b7a <HAL_PCD_EP_Open>
 80093a4:	4603      	mov	r3, r0
 80093a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 f928 	bl	8009600 <USBD_Get_USB_Status>
 80093b0:	4603      	mov	r3, r0
 80093b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b084      	sub	sp, #16
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	460b      	mov	r3, r1
 80093c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093ca:	2300      	movs	r3, #0
 80093cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093ce:	2300      	movs	r3, #0
 80093d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80093d8:	78fa      	ldrb	r2, [r7, #3]
 80093da:	4611      	mov	r1, r2
 80093dc:	4618      	mov	r0, r3
 80093de:	f7f9 fc32 	bl	8002c46 <HAL_PCD_EP_Close>
 80093e2:	4603      	mov	r3, r0
 80093e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 f909 	bl	8009600 <USBD_Get_USB_Status>
 80093ee:	4603      	mov	r3, r0
 80093f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009416:	78fa      	ldrb	r2, [r7, #3]
 8009418:	4611      	mov	r1, r2
 800941a:	4618      	mov	r0, r3
 800941c:	f7f9 fcf2 	bl	8002e04 <HAL_PCD_EP_SetStall>
 8009420:	4603      	mov	r3, r0
 8009422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009424:	7bfb      	ldrb	r3, [r7, #15]
 8009426:	4618      	mov	r0, r3
 8009428:	f000 f8ea 	bl	8009600 <USBD_Get_USB_Status>
 800942c:	4603      	mov	r3, r0
 800942e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009430:	7bbb      	ldrb	r3, [r7, #14]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	460b      	mov	r3, r1
 8009444:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009446:	2300      	movs	r3, #0
 8009448:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009454:	78fa      	ldrb	r2, [r7, #3]
 8009456:	4611      	mov	r1, r2
 8009458:	4618      	mov	r0, r3
 800945a:	f7f9 fd33 	bl	8002ec4 <HAL_PCD_EP_ClrStall>
 800945e:	4603      	mov	r3, r0
 8009460:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009462:	7bfb      	ldrb	r3, [r7, #15]
 8009464:	4618      	mov	r0, r3
 8009466:	f000 f8cb 	bl	8009600 <USBD_Get_USB_Status>
 800946a:	4603      	mov	r3, r0
 800946c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800946e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009470:	4618      	mov	r0, r3
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800948a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800948c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009490:	2b00      	cmp	r3, #0
 8009492:	da0c      	bge.n	80094ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800949a:	68f9      	ldr	r1, [r7, #12]
 800949c:	1c5a      	adds	r2, r3, #1
 800949e:	4613      	mov	r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	00db      	lsls	r3, r3, #3
 80094a6:	440b      	add	r3, r1
 80094a8:	3302      	adds	r3, #2
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	e00b      	b.n	80094c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80094ae:	78fb      	ldrb	r3, [r7, #3]
 80094b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094b4:	68f9      	ldr	r1, [r7, #12]
 80094b6:	4613      	mov	r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	00db      	lsls	r3, r3, #3
 80094be:	440b      	add	r3, r1
 80094c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80094c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3714      	adds	r7, #20
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bc80      	pop	{r7}
 80094ce:	4770      	bx	lr

080094d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094dc:	2300      	movs	r3, #0
 80094de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e0:	2300      	movs	r3, #0
 80094e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80094ea:	78fa      	ldrb	r2, [r7, #3]
 80094ec:	4611      	mov	r1, r2
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7f9 fb1e 	bl	8002b30 <HAL_PCD_SetAddress>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 f880 	bl	8009600 <USBD_Get_USB_Status>
 8009500:	4603      	mov	r3, r0
 8009502:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009504:	7bbb      	ldrb	r3, [r7, #14]
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b086      	sub	sp, #24
 8009512:	af00      	add	r7, sp, #0
 8009514:	60f8      	str	r0, [r7, #12]
 8009516:	607a      	str	r2, [r7, #4]
 8009518:	461a      	mov	r2, r3
 800951a:	460b      	mov	r3, r1
 800951c:	72fb      	strb	r3, [r7, #11]
 800951e:	4613      	mov	r3, r2
 8009520:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009530:	893b      	ldrh	r3, [r7, #8]
 8009532:	7af9      	ldrb	r1, [r7, #11]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	f7f9 fc22 	bl	8002d7e <HAL_PCD_EP_Transmit>
 800953a:	4603      	mov	r3, r0
 800953c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800953e:	7dfb      	ldrb	r3, [r7, #23]
 8009540:	4618      	mov	r0, r3
 8009542:	f000 f85d 	bl	8009600 <USBD_Get_USB_Status>
 8009546:	4603      	mov	r3, r0
 8009548:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800954a:	7dbb      	ldrb	r3, [r7, #22]
}
 800954c:	4618      	mov	r0, r3
 800954e:	3718      	adds	r7, #24
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	607a      	str	r2, [r7, #4]
 800955e:	461a      	mov	r2, r3
 8009560:	460b      	mov	r3, r1
 8009562:	72fb      	strb	r3, [r7, #11]
 8009564:	4613      	mov	r3, r2
 8009566:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009576:	893b      	ldrh	r3, [r7, #8]
 8009578:	7af9      	ldrb	r1, [r7, #11]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	f7f9 fbab 	bl	8002cd6 <HAL_PCD_EP_Receive>
 8009580:	4603      	mov	r3, r0
 8009582:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009584:	7dfb      	ldrb	r3, [r7, #23]
 8009586:	4618      	mov	r0, r3
 8009588:	f000 f83a 	bl	8009600 <USBD_Get_USB_Status>
 800958c:	4603      	mov	r3, r0
 800958e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009590:	7dbb      	ldrb	r3, [r7, #22]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3718      	adds	r7, #24
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b082      	sub	sp, #8
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	460b      	mov	r3, r1
 80095a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095ac:	78fa      	ldrb	r2, [r7, #3]
 80095ae:	4611      	mov	r1, r2
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7f9 fbcd 	bl	8002d50 <HAL_PCD_EP_GetRxCount>
 80095b6:	4603      	mov	r3, r0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80095c8:	4b02      	ldr	r3, [pc, #8]	; (80095d4 <USBD_static_malloc+0x14>)
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bc80      	pop	{r7}
 80095d2:	4770      	bx	lr
 80095d4:	200013a8 	.word	0x200013a8

080095d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]

}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bc80      	pop	{r7}
 80095e8:	4770      	bx	lr

080095ea <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ea:	b480      	push	{r7}
 80095ec:	b083      	sub	sp, #12
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bc80      	pop	{r7}
 80095fe:	4770      	bx	lr

08009600 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
 8009606:	4603      	mov	r3, r0
 8009608:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800960a:	2300      	movs	r3, #0
 800960c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800960e:	79fb      	ldrb	r3, [r7, #7]
 8009610:	2b03      	cmp	r3, #3
 8009612:	d817      	bhi.n	8009644 <USBD_Get_USB_Status+0x44>
 8009614:	a201      	add	r2, pc, #4	; (adr r2, 800961c <USBD_Get_USB_Status+0x1c>)
 8009616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961a:	bf00      	nop
 800961c:	0800962d 	.word	0x0800962d
 8009620:	08009633 	.word	0x08009633
 8009624:	08009639 	.word	0x08009639
 8009628:	0800963f 	.word	0x0800963f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	73fb      	strb	r3, [r7, #15]
    break;
 8009630:	e00b      	b.n	800964a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009632:	2302      	movs	r3, #2
 8009634:	73fb      	strb	r3, [r7, #15]
    break;
 8009636:	e008      	b.n	800964a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009638:	2301      	movs	r3, #1
 800963a:	73fb      	strb	r3, [r7, #15]
    break;
 800963c:	e005      	b.n	800964a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800963e:	2302      	movs	r3, #2
 8009640:	73fb      	strb	r3, [r7, #15]
    break;
 8009642:	e002      	b.n	800964a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009644:	2302      	movs	r3, #2
 8009646:	73fb      	strb	r3, [r7, #15]
    break;
 8009648:	bf00      	nop
  }
  return usb_status;
 800964a:	7bfb      	ldrb	r3, [r7, #15]
}
 800964c:	4618      	mov	r0, r3
 800964e:	3714      	adds	r7, #20
 8009650:	46bd      	mov	sp, r7
 8009652:	bc80      	pop	{r7}
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop

08009658 <__errno>:
 8009658:	4b01      	ldr	r3, [pc, #4]	; (8009660 <__errno+0x8>)
 800965a:	6818      	ldr	r0, [r3, #0]
 800965c:	4770      	bx	lr
 800965e:	bf00      	nop
 8009660:	2000017c 	.word	0x2000017c

08009664 <__libc_init_array>:
 8009664:	b570      	push	{r4, r5, r6, lr}
 8009666:	2600      	movs	r6, #0
 8009668:	4d0c      	ldr	r5, [pc, #48]	; (800969c <__libc_init_array+0x38>)
 800966a:	4c0d      	ldr	r4, [pc, #52]	; (80096a0 <__libc_init_array+0x3c>)
 800966c:	1b64      	subs	r4, r4, r5
 800966e:	10a4      	asrs	r4, r4, #2
 8009670:	42a6      	cmp	r6, r4
 8009672:	d109      	bne.n	8009688 <__libc_init_array+0x24>
 8009674:	f002 ff10 	bl	800c498 <_init>
 8009678:	2600      	movs	r6, #0
 800967a:	4d0a      	ldr	r5, [pc, #40]	; (80096a4 <__libc_init_array+0x40>)
 800967c:	4c0a      	ldr	r4, [pc, #40]	; (80096a8 <__libc_init_array+0x44>)
 800967e:	1b64      	subs	r4, r4, r5
 8009680:	10a4      	asrs	r4, r4, #2
 8009682:	42a6      	cmp	r6, r4
 8009684:	d105      	bne.n	8009692 <__libc_init_array+0x2e>
 8009686:	bd70      	pop	{r4, r5, r6, pc}
 8009688:	f855 3b04 	ldr.w	r3, [r5], #4
 800968c:	4798      	blx	r3
 800968e:	3601      	adds	r6, #1
 8009690:	e7ee      	b.n	8009670 <__libc_init_array+0xc>
 8009692:	f855 3b04 	ldr.w	r3, [r5], #4
 8009696:	4798      	blx	r3
 8009698:	3601      	adds	r6, #1
 800969a:	e7f2      	b.n	8009682 <__libc_init_array+0x1e>
 800969c:	0800c904 	.word	0x0800c904
 80096a0:	0800c904 	.word	0x0800c904
 80096a4:	0800c904 	.word	0x0800c904
 80096a8:	0800c908 	.word	0x0800c908

080096ac <memset>:
 80096ac:	4603      	mov	r3, r0
 80096ae:	4402      	add	r2, r0
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d100      	bne.n	80096b6 <memset+0xa>
 80096b4:	4770      	bx	lr
 80096b6:	f803 1b01 	strb.w	r1, [r3], #1
 80096ba:	e7f9      	b.n	80096b0 <memset+0x4>

080096bc <__cvt>:
 80096bc:	2b00      	cmp	r3, #0
 80096be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096c2:	461f      	mov	r7, r3
 80096c4:	bfbb      	ittet	lt
 80096c6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80096ca:	461f      	movlt	r7, r3
 80096cc:	2300      	movge	r3, #0
 80096ce:	232d      	movlt	r3, #45	; 0x2d
 80096d0:	b088      	sub	sp, #32
 80096d2:	4614      	mov	r4, r2
 80096d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096d6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80096d8:	7013      	strb	r3, [r2, #0]
 80096da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80096dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80096e0:	f023 0820 	bic.w	r8, r3, #32
 80096e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80096e8:	d005      	beq.n	80096f6 <__cvt+0x3a>
 80096ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80096ee:	d100      	bne.n	80096f2 <__cvt+0x36>
 80096f0:	3501      	adds	r5, #1
 80096f2:	2302      	movs	r3, #2
 80096f4:	e000      	b.n	80096f8 <__cvt+0x3c>
 80096f6:	2303      	movs	r3, #3
 80096f8:	aa07      	add	r2, sp, #28
 80096fa:	9204      	str	r2, [sp, #16]
 80096fc:	aa06      	add	r2, sp, #24
 80096fe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009702:	e9cd 3500 	strd	r3, r5, [sp]
 8009706:	4622      	mov	r2, r4
 8009708:	463b      	mov	r3, r7
 800970a:	f000 fcf9 	bl	800a100 <_dtoa_r>
 800970e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009712:	4606      	mov	r6, r0
 8009714:	d102      	bne.n	800971c <__cvt+0x60>
 8009716:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009718:	07db      	lsls	r3, r3, #31
 800971a:	d522      	bpl.n	8009762 <__cvt+0xa6>
 800971c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009720:	eb06 0905 	add.w	r9, r6, r5
 8009724:	d110      	bne.n	8009748 <__cvt+0x8c>
 8009726:	7833      	ldrb	r3, [r6, #0]
 8009728:	2b30      	cmp	r3, #48	; 0x30
 800972a:	d10a      	bne.n	8009742 <__cvt+0x86>
 800972c:	2200      	movs	r2, #0
 800972e:	2300      	movs	r3, #0
 8009730:	4620      	mov	r0, r4
 8009732:	4639      	mov	r1, r7
 8009734:	f7f7 f938 	bl	80009a8 <__aeabi_dcmpeq>
 8009738:	b918      	cbnz	r0, 8009742 <__cvt+0x86>
 800973a:	f1c5 0501 	rsb	r5, r5, #1
 800973e:	f8ca 5000 	str.w	r5, [sl]
 8009742:	f8da 3000 	ldr.w	r3, [sl]
 8009746:	4499      	add	r9, r3
 8009748:	2200      	movs	r2, #0
 800974a:	2300      	movs	r3, #0
 800974c:	4620      	mov	r0, r4
 800974e:	4639      	mov	r1, r7
 8009750:	f7f7 f92a 	bl	80009a8 <__aeabi_dcmpeq>
 8009754:	b108      	cbz	r0, 800975a <__cvt+0x9e>
 8009756:	f8cd 901c 	str.w	r9, [sp, #28]
 800975a:	2230      	movs	r2, #48	; 0x30
 800975c:	9b07      	ldr	r3, [sp, #28]
 800975e:	454b      	cmp	r3, r9
 8009760:	d307      	bcc.n	8009772 <__cvt+0xb6>
 8009762:	4630      	mov	r0, r6
 8009764:	9b07      	ldr	r3, [sp, #28]
 8009766:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009768:	1b9b      	subs	r3, r3, r6
 800976a:	6013      	str	r3, [r2, #0]
 800976c:	b008      	add	sp, #32
 800976e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009772:	1c59      	adds	r1, r3, #1
 8009774:	9107      	str	r1, [sp, #28]
 8009776:	701a      	strb	r2, [r3, #0]
 8009778:	e7f0      	b.n	800975c <__cvt+0xa0>

0800977a <__exponent>:
 800977a:	4603      	mov	r3, r0
 800977c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800977e:	2900      	cmp	r1, #0
 8009780:	f803 2b02 	strb.w	r2, [r3], #2
 8009784:	bfb6      	itet	lt
 8009786:	222d      	movlt	r2, #45	; 0x2d
 8009788:	222b      	movge	r2, #43	; 0x2b
 800978a:	4249      	neglt	r1, r1
 800978c:	2909      	cmp	r1, #9
 800978e:	7042      	strb	r2, [r0, #1]
 8009790:	dd2b      	ble.n	80097ea <__exponent+0x70>
 8009792:	f10d 0407 	add.w	r4, sp, #7
 8009796:	46a4      	mov	ip, r4
 8009798:	270a      	movs	r7, #10
 800979a:	fb91 f6f7 	sdiv	r6, r1, r7
 800979e:	460a      	mov	r2, r1
 80097a0:	46a6      	mov	lr, r4
 80097a2:	fb07 1516 	mls	r5, r7, r6, r1
 80097a6:	2a63      	cmp	r2, #99	; 0x63
 80097a8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80097ac:	4631      	mov	r1, r6
 80097ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80097b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80097b6:	dcf0      	bgt.n	800979a <__exponent+0x20>
 80097b8:	3130      	adds	r1, #48	; 0x30
 80097ba:	f1ae 0502 	sub.w	r5, lr, #2
 80097be:	f804 1c01 	strb.w	r1, [r4, #-1]
 80097c2:	4629      	mov	r1, r5
 80097c4:	1c44      	adds	r4, r0, #1
 80097c6:	4561      	cmp	r1, ip
 80097c8:	d30a      	bcc.n	80097e0 <__exponent+0x66>
 80097ca:	f10d 0209 	add.w	r2, sp, #9
 80097ce:	eba2 020e 	sub.w	r2, r2, lr
 80097d2:	4565      	cmp	r5, ip
 80097d4:	bf88      	it	hi
 80097d6:	2200      	movhi	r2, #0
 80097d8:	4413      	add	r3, r2
 80097da:	1a18      	subs	r0, r3, r0
 80097dc:	b003      	add	sp, #12
 80097de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097e4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80097e8:	e7ed      	b.n	80097c6 <__exponent+0x4c>
 80097ea:	2330      	movs	r3, #48	; 0x30
 80097ec:	3130      	adds	r1, #48	; 0x30
 80097ee:	7083      	strb	r3, [r0, #2]
 80097f0:	70c1      	strb	r1, [r0, #3]
 80097f2:	1d03      	adds	r3, r0, #4
 80097f4:	e7f1      	b.n	80097da <__exponent+0x60>
	...

080097f8 <_printf_float>:
 80097f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fc:	b091      	sub	sp, #68	; 0x44
 80097fe:	460c      	mov	r4, r1
 8009800:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009804:	4616      	mov	r6, r2
 8009806:	461f      	mov	r7, r3
 8009808:	4605      	mov	r5, r0
 800980a:	f001 fa67 	bl	800acdc <_localeconv_r>
 800980e:	6803      	ldr	r3, [r0, #0]
 8009810:	4618      	mov	r0, r3
 8009812:	9309      	str	r3, [sp, #36]	; 0x24
 8009814:	f7f6 fc9c 	bl	8000150 <strlen>
 8009818:	2300      	movs	r3, #0
 800981a:	930e      	str	r3, [sp, #56]	; 0x38
 800981c:	f8d8 3000 	ldr.w	r3, [r8]
 8009820:	900a      	str	r0, [sp, #40]	; 0x28
 8009822:	3307      	adds	r3, #7
 8009824:	f023 0307 	bic.w	r3, r3, #7
 8009828:	f103 0208 	add.w	r2, r3, #8
 800982c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009830:	f8d4 b000 	ldr.w	fp, [r4]
 8009834:	f8c8 2000 	str.w	r2, [r8]
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009840:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009844:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009848:	930b      	str	r3, [sp, #44]	; 0x2c
 800984a:	f04f 32ff 	mov.w	r2, #4294967295
 800984e:	4640      	mov	r0, r8
 8009850:	4b9c      	ldr	r3, [pc, #624]	; (8009ac4 <_printf_float+0x2cc>)
 8009852:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009854:	f7f7 f8da 	bl	8000a0c <__aeabi_dcmpun>
 8009858:	bb70      	cbnz	r0, 80098b8 <_printf_float+0xc0>
 800985a:	f04f 32ff 	mov.w	r2, #4294967295
 800985e:	4640      	mov	r0, r8
 8009860:	4b98      	ldr	r3, [pc, #608]	; (8009ac4 <_printf_float+0x2cc>)
 8009862:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009864:	f7f7 f8b4 	bl	80009d0 <__aeabi_dcmple>
 8009868:	bb30      	cbnz	r0, 80098b8 <_printf_float+0xc0>
 800986a:	2200      	movs	r2, #0
 800986c:	2300      	movs	r3, #0
 800986e:	4640      	mov	r0, r8
 8009870:	4651      	mov	r1, sl
 8009872:	f7f7 f8a3 	bl	80009bc <__aeabi_dcmplt>
 8009876:	b110      	cbz	r0, 800987e <_printf_float+0x86>
 8009878:	232d      	movs	r3, #45	; 0x2d
 800987a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800987e:	4b92      	ldr	r3, [pc, #584]	; (8009ac8 <_printf_float+0x2d0>)
 8009880:	4892      	ldr	r0, [pc, #584]	; (8009acc <_printf_float+0x2d4>)
 8009882:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009886:	bf94      	ite	ls
 8009888:	4698      	movls	r8, r3
 800988a:	4680      	movhi	r8, r0
 800988c:	2303      	movs	r3, #3
 800988e:	f04f 0a00 	mov.w	sl, #0
 8009892:	6123      	str	r3, [r4, #16]
 8009894:	f02b 0304 	bic.w	r3, fp, #4
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	4633      	mov	r3, r6
 800989c:	4621      	mov	r1, r4
 800989e:	4628      	mov	r0, r5
 80098a0:	9700      	str	r7, [sp, #0]
 80098a2:	aa0f      	add	r2, sp, #60	; 0x3c
 80098a4:	f000 f9d4 	bl	8009c50 <_printf_common>
 80098a8:	3001      	adds	r0, #1
 80098aa:	f040 8090 	bne.w	80099ce <_printf_float+0x1d6>
 80098ae:	f04f 30ff 	mov.w	r0, #4294967295
 80098b2:	b011      	add	sp, #68	; 0x44
 80098b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b8:	4642      	mov	r2, r8
 80098ba:	4653      	mov	r3, sl
 80098bc:	4640      	mov	r0, r8
 80098be:	4651      	mov	r1, sl
 80098c0:	f7f7 f8a4 	bl	8000a0c <__aeabi_dcmpun>
 80098c4:	b148      	cbz	r0, 80098da <_printf_float+0xe2>
 80098c6:	f1ba 0f00 	cmp.w	sl, #0
 80098ca:	bfb8      	it	lt
 80098cc:	232d      	movlt	r3, #45	; 0x2d
 80098ce:	4880      	ldr	r0, [pc, #512]	; (8009ad0 <_printf_float+0x2d8>)
 80098d0:	bfb8      	it	lt
 80098d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80098d6:	4b7f      	ldr	r3, [pc, #508]	; (8009ad4 <_printf_float+0x2dc>)
 80098d8:	e7d3      	b.n	8009882 <_printf_float+0x8a>
 80098da:	6863      	ldr	r3, [r4, #4]
 80098dc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80098e0:	1c5a      	adds	r2, r3, #1
 80098e2:	d142      	bne.n	800996a <_printf_float+0x172>
 80098e4:	2306      	movs	r3, #6
 80098e6:	6063      	str	r3, [r4, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	9206      	str	r2, [sp, #24]
 80098ec:	aa0e      	add	r2, sp, #56	; 0x38
 80098ee:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80098f2:	aa0d      	add	r2, sp, #52	; 0x34
 80098f4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80098f8:	9203      	str	r2, [sp, #12]
 80098fa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80098fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009902:	6023      	str	r3, [r4, #0]
 8009904:	6863      	ldr	r3, [r4, #4]
 8009906:	4642      	mov	r2, r8
 8009908:	9300      	str	r3, [sp, #0]
 800990a:	4628      	mov	r0, r5
 800990c:	4653      	mov	r3, sl
 800990e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009910:	f7ff fed4 	bl	80096bc <__cvt>
 8009914:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009916:	4680      	mov	r8, r0
 8009918:	2947      	cmp	r1, #71	; 0x47
 800991a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800991c:	d108      	bne.n	8009930 <_printf_float+0x138>
 800991e:	1cc8      	adds	r0, r1, #3
 8009920:	db02      	blt.n	8009928 <_printf_float+0x130>
 8009922:	6863      	ldr	r3, [r4, #4]
 8009924:	4299      	cmp	r1, r3
 8009926:	dd40      	ble.n	80099aa <_printf_float+0x1b2>
 8009928:	f1a9 0902 	sub.w	r9, r9, #2
 800992c:	fa5f f989 	uxtb.w	r9, r9
 8009930:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009934:	d81f      	bhi.n	8009976 <_printf_float+0x17e>
 8009936:	464a      	mov	r2, r9
 8009938:	3901      	subs	r1, #1
 800993a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800993e:	910d      	str	r1, [sp, #52]	; 0x34
 8009940:	f7ff ff1b 	bl	800977a <__exponent>
 8009944:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009946:	4682      	mov	sl, r0
 8009948:	1813      	adds	r3, r2, r0
 800994a:	2a01      	cmp	r2, #1
 800994c:	6123      	str	r3, [r4, #16]
 800994e:	dc02      	bgt.n	8009956 <_printf_float+0x15e>
 8009950:	6822      	ldr	r2, [r4, #0]
 8009952:	07d2      	lsls	r2, r2, #31
 8009954:	d501      	bpl.n	800995a <_printf_float+0x162>
 8009956:	3301      	adds	r3, #1
 8009958:	6123      	str	r3, [r4, #16]
 800995a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800995e:	2b00      	cmp	r3, #0
 8009960:	d09b      	beq.n	800989a <_printf_float+0xa2>
 8009962:	232d      	movs	r3, #45	; 0x2d
 8009964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009968:	e797      	b.n	800989a <_printf_float+0xa2>
 800996a:	2947      	cmp	r1, #71	; 0x47
 800996c:	d1bc      	bne.n	80098e8 <_printf_float+0xf0>
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1ba      	bne.n	80098e8 <_printf_float+0xf0>
 8009972:	2301      	movs	r3, #1
 8009974:	e7b7      	b.n	80098e6 <_printf_float+0xee>
 8009976:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800997a:	d118      	bne.n	80099ae <_printf_float+0x1b6>
 800997c:	2900      	cmp	r1, #0
 800997e:	6863      	ldr	r3, [r4, #4]
 8009980:	dd0b      	ble.n	800999a <_printf_float+0x1a2>
 8009982:	6121      	str	r1, [r4, #16]
 8009984:	b913      	cbnz	r3, 800998c <_printf_float+0x194>
 8009986:	6822      	ldr	r2, [r4, #0]
 8009988:	07d0      	lsls	r0, r2, #31
 800998a:	d502      	bpl.n	8009992 <_printf_float+0x19a>
 800998c:	3301      	adds	r3, #1
 800998e:	440b      	add	r3, r1
 8009990:	6123      	str	r3, [r4, #16]
 8009992:	f04f 0a00 	mov.w	sl, #0
 8009996:	65a1      	str	r1, [r4, #88]	; 0x58
 8009998:	e7df      	b.n	800995a <_printf_float+0x162>
 800999a:	b913      	cbnz	r3, 80099a2 <_printf_float+0x1aa>
 800999c:	6822      	ldr	r2, [r4, #0]
 800999e:	07d2      	lsls	r2, r2, #31
 80099a0:	d501      	bpl.n	80099a6 <_printf_float+0x1ae>
 80099a2:	3302      	adds	r3, #2
 80099a4:	e7f4      	b.n	8009990 <_printf_float+0x198>
 80099a6:	2301      	movs	r3, #1
 80099a8:	e7f2      	b.n	8009990 <_printf_float+0x198>
 80099aa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80099ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099b0:	4299      	cmp	r1, r3
 80099b2:	db05      	blt.n	80099c0 <_printf_float+0x1c8>
 80099b4:	6823      	ldr	r3, [r4, #0]
 80099b6:	6121      	str	r1, [r4, #16]
 80099b8:	07d8      	lsls	r0, r3, #31
 80099ba:	d5ea      	bpl.n	8009992 <_printf_float+0x19a>
 80099bc:	1c4b      	adds	r3, r1, #1
 80099be:	e7e7      	b.n	8009990 <_printf_float+0x198>
 80099c0:	2900      	cmp	r1, #0
 80099c2:	bfcc      	ite	gt
 80099c4:	2201      	movgt	r2, #1
 80099c6:	f1c1 0202 	rsble	r2, r1, #2
 80099ca:	4413      	add	r3, r2
 80099cc:	e7e0      	b.n	8009990 <_printf_float+0x198>
 80099ce:	6823      	ldr	r3, [r4, #0]
 80099d0:	055a      	lsls	r2, r3, #21
 80099d2:	d407      	bmi.n	80099e4 <_printf_float+0x1ec>
 80099d4:	6923      	ldr	r3, [r4, #16]
 80099d6:	4642      	mov	r2, r8
 80099d8:	4631      	mov	r1, r6
 80099da:	4628      	mov	r0, r5
 80099dc:	47b8      	blx	r7
 80099de:	3001      	adds	r0, #1
 80099e0:	d12b      	bne.n	8009a3a <_printf_float+0x242>
 80099e2:	e764      	b.n	80098ae <_printf_float+0xb6>
 80099e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80099e8:	f240 80dd 	bls.w	8009ba6 <_printf_float+0x3ae>
 80099ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80099f0:	2200      	movs	r2, #0
 80099f2:	2300      	movs	r3, #0
 80099f4:	f7f6 ffd8 	bl	80009a8 <__aeabi_dcmpeq>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d033      	beq.n	8009a64 <_printf_float+0x26c>
 80099fc:	2301      	movs	r3, #1
 80099fe:	4631      	mov	r1, r6
 8009a00:	4628      	mov	r0, r5
 8009a02:	4a35      	ldr	r2, [pc, #212]	; (8009ad8 <_printf_float+0x2e0>)
 8009a04:	47b8      	blx	r7
 8009a06:	3001      	adds	r0, #1
 8009a08:	f43f af51 	beq.w	80098ae <_printf_float+0xb6>
 8009a0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a10:	429a      	cmp	r2, r3
 8009a12:	db02      	blt.n	8009a1a <_printf_float+0x222>
 8009a14:	6823      	ldr	r3, [r4, #0]
 8009a16:	07d8      	lsls	r0, r3, #31
 8009a18:	d50f      	bpl.n	8009a3a <_printf_float+0x242>
 8009a1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a1e:	4631      	mov	r1, r6
 8009a20:	4628      	mov	r0, r5
 8009a22:	47b8      	blx	r7
 8009a24:	3001      	adds	r0, #1
 8009a26:	f43f af42 	beq.w	80098ae <_printf_float+0xb6>
 8009a2a:	f04f 0800 	mov.w	r8, #0
 8009a2e:	f104 091a 	add.w	r9, r4, #26
 8009a32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a34:	3b01      	subs	r3, #1
 8009a36:	4543      	cmp	r3, r8
 8009a38:	dc09      	bgt.n	8009a4e <_printf_float+0x256>
 8009a3a:	6823      	ldr	r3, [r4, #0]
 8009a3c:	079b      	lsls	r3, r3, #30
 8009a3e:	f100 8102 	bmi.w	8009c46 <_printf_float+0x44e>
 8009a42:	68e0      	ldr	r0, [r4, #12]
 8009a44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a46:	4298      	cmp	r0, r3
 8009a48:	bfb8      	it	lt
 8009a4a:	4618      	movlt	r0, r3
 8009a4c:	e731      	b.n	80098b2 <_printf_float+0xba>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	464a      	mov	r2, r9
 8009a52:	4631      	mov	r1, r6
 8009a54:	4628      	mov	r0, r5
 8009a56:	47b8      	blx	r7
 8009a58:	3001      	adds	r0, #1
 8009a5a:	f43f af28 	beq.w	80098ae <_printf_float+0xb6>
 8009a5e:	f108 0801 	add.w	r8, r8, #1
 8009a62:	e7e6      	b.n	8009a32 <_printf_float+0x23a>
 8009a64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	dc38      	bgt.n	8009adc <_printf_float+0x2e4>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	4631      	mov	r1, r6
 8009a6e:	4628      	mov	r0, r5
 8009a70:	4a19      	ldr	r2, [pc, #100]	; (8009ad8 <_printf_float+0x2e0>)
 8009a72:	47b8      	blx	r7
 8009a74:	3001      	adds	r0, #1
 8009a76:	f43f af1a 	beq.w	80098ae <_printf_float+0xb6>
 8009a7a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	d102      	bne.n	8009a88 <_printf_float+0x290>
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	07d9      	lsls	r1, r3, #31
 8009a86:	d5d8      	bpl.n	8009a3a <_printf_float+0x242>
 8009a88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a8c:	4631      	mov	r1, r6
 8009a8e:	4628      	mov	r0, r5
 8009a90:	47b8      	blx	r7
 8009a92:	3001      	adds	r0, #1
 8009a94:	f43f af0b 	beq.w	80098ae <_printf_float+0xb6>
 8009a98:	f04f 0900 	mov.w	r9, #0
 8009a9c:	f104 0a1a 	add.w	sl, r4, #26
 8009aa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009aa2:	425b      	negs	r3, r3
 8009aa4:	454b      	cmp	r3, r9
 8009aa6:	dc01      	bgt.n	8009aac <_printf_float+0x2b4>
 8009aa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009aaa:	e794      	b.n	80099d6 <_printf_float+0x1de>
 8009aac:	2301      	movs	r3, #1
 8009aae:	4652      	mov	r2, sl
 8009ab0:	4631      	mov	r1, r6
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	47b8      	blx	r7
 8009ab6:	3001      	adds	r0, #1
 8009ab8:	f43f aef9 	beq.w	80098ae <_printf_float+0xb6>
 8009abc:	f109 0901 	add.w	r9, r9, #1
 8009ac0:	e7ee      	b.n	8009aa0 <_printf_float+0x2a8>
 8009ac2:	bf00      	nop
 8009ac4:	7fefffff 	.word	0x7fefffff
 8009ac8:	0800c530 	.word	0x0800c530
 8009acc:	0800c534 	.word	0x0800c534
 8009ad0:	0800c53c 	.word	0x0800c53c
 8009ad4:	0800c538 	.word	0x0800c538
 8009ad8:	0800c540 	.word	0x0800c540
 8009adc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ade:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	bfa8      	it	ge
 8009ae4:	461a      	movge	r2, r3
 8009ae6:	2a00      	cmp	r2, #0
 8009ae8:	4691      	mov	r9, r2
 8009aea:	dc37      	bgt.n	8009b5c <_printf_float+0x364>
 8009aec:	f04f 0b00 	mov.w	fp, #0
 8009af0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009af4:	f104 021a 	add.w	r2, r4, #26
 8009af8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009afc:	ebaa 0309 	sub.w	r3, sl, r9
 8009b00:	455b      	cmp	r3, fp
 8009b02:	dc33      	bgt.n	8009b6c <_printf_float+0x374>
 8009b04:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	db3b      	blt.n	8009b84 <_printf_float+0x38c>
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	07da      	lsls	r2, r3, #31
 8009b10:	d438      	bmi.n	8009b84 <_printf_float+0x38c>
 8009b12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b14:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009b16:	eba3 020a 	sub.w	r2, r3, sl
 8009b1a:	eba3 0901 	sub.w	r9, r3, r1
 8009b1e:	4591      	cmp	r9, r2
 8009b20:	bfa8      	it	ge
 8009b22:	4691      	movge	r9, r2
 8009b24:	f1b9 0f00 	cmp.w	r9, #0
 8009b28:	dc34      	bgt.n	8009b94 <_printf_float+0x39c>
 8009b2a:	f04f 0800 	mov.w	r8, #0
 8009b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b32:	f104 0a1a 	add.w	sl, r4, #26
 8009b36:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009b3a:	1a9b      	subs	r3, r3, r2
 8009b3c:	eba3 0309 	sub.w	r3, r3, r9
 8009b40:	4543      	cmp	r3, r8
 8009b42:	f77f af7a 	ble.w	8009a3a <_printf_float+0x242>
 8009b46:	2301      	movs	r3, #1
 8009b48:	4652      	mov	r2, sl
 8009b4a:	4631      	mov	r1, r6
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	47b8      	blx	r7
 8009b50:	3001      	adds	r0, #1
 8009b52:	f43f aeac 	beq.w	80098ae <_printf_float+0xb6>
 8009b56:	f108 0801 	add.w	r8, r8, #1
 8009b5a:	e7ec      	b.n	8009b36 <_printf_float+0x33e>
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	4631      	mov	r1, r6
 8009b60:	4642      	mov	r2, r8
 8009b62:	4628      	mov	r0, r5
 8009b64:	47b8      	blx	r7
 8009b66:	3001      	adds	r0, #1
 8009b68:	d1c0      	bne.n	8009aec <_printf_float+0x2f4>
 8009b6a:	e6a0      	b.n	80098ae <_printf_float+0xb6>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	4631      	mov	r1, r6
 8009b70:	4628      	mov	r0, r5
 8009b72:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b74:	47b8      	blx	r7
 8009b76:	3001      	adds	r0, #1
 8009b78:	f43f ae99 	beq.w	80098ae <_printf_float+0xb6>
 8009b7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b7e:	f10b 0b01 	add.w	fp, fp, #1
 8009b82:	e7b9      	b.n	8009af8 <_printf_float+0x300>
 8009b84:	4631      	mov	r1, r6
 8009b86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	47b8      	blx	r7
 8009b8e:	3001      	adds	r0, #1
 8009b90:	d1bf      	bne.n	8009b12 <_printf_float+0x31a>
 8009b92:	e68c      	b.n	80098ae <_printf_float+0xb6>
 8009b94:	464b      	mov	r3, r9
 8009b96:	4631      	mov	r1, r6
 8009b98:	4628      	mov	r0, r5
 8009b9a:	eb08 020a 	add.w	r2, r8, sl
 8009b9e:	47b8      	blx	r7
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d1c2      	bne.n	8009b2a <_printf_float+0x332>
 8009ba4:	e683      	b.n	80098ae <_printf_float+0xb6>
 8009ba6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ba8:	2a01      	cmp	r2, #1
 8009baa:	dc01      	bgt.n	8009bb0 <_printf_float+0x3b8>
 8009bac:	07db      	lsls	r3, r3, #31
 8009bae:	d537      	bpl.n	8009c20 <_printf_float+0x428>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	4642      	mov	r2, r8
 8009bb4:	4631      	mov	r1, r6
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	47b8      	blx	r7
 8009bba:	3001      	adds	r0, #1
 8009bbc:	f43f ae77 	beq.w	80098ae <_printf_float+0xb6>
 8009bc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bc4:	4631      	mov	r1, r6
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	47b8      	blx	r7
 8009bca:	3001      	adds	r0, #1
 8009bcc:	f43f ae6f 	beq.w	80098ae <_printf_float+0xb6>
 8009bd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	f7f6 fee6 	bl	80009a8 <__aeabi_dcmpeq>
 8009bdc:	b9d8      	cbnz	r0, 8009c16 <_printf_float+0x41e>
 8009bde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009be0:	f108 0201 	add.w	r2, r8, #1
 8009be4:	3b01      	subs	r3, #1
 8009be6:	4631      	mov	r1, r6
 8009be8:	4628      	mov	r0, r5
 8009bea:	47b8      	blx	r7
 8009bec:	3001      	adds	r0, #1
 8009bee:	d10e      	bne.n	8009c0e <_printf_float+0x416>
 8009bf0:	e65d      	b.n	80098ae <_printf_float+0xb6>
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	464a      	mov	r2, r9
 8009bf6:	4631      	mov	r1, r6
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	47b8      	blx	r7
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	f43f ae56 	beq.w	80098ae <_printf_float+0xb6>
 8009c02:	f108 0801 	add.w	r8, r8, #1
 8009c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	4543      	cmp	r3, r8
 8009c0c:	dcf1      	bgt.n	8009bf2 <_printf_float+0x3fa>
 8009c0e:	4653      	mov	r3, sl
 8009c10:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c14:	e6e0      	b.n	80099d8 <_printf_float+0x1e0>
 8009c16:	f04f 0800 	mov.w	r8, #0
 8009c1a:	f104 091a 	add.w	r9, r4, #26
 8009c1e:	e7f2      	b.n	8009c06 <_printf_float+0x40e>
 8009c20:	2301      	movs	r3, #1
 8009c22:	4642      	mov	r2, r8
 8009c24:	e7df      	b.n	8009be6 <_printf_float+0x3ee>
 8009c26:	2301      	movs	r3, #1
 8009c28:	464a      	mov	r2, r9
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b8      	blx	r7
 8009c30:	3001      	adds	r0, #1
 8009c32:	f43f ae3c 	beq.w	80098ae <_printf_float+0xb6>
 8009c36:	f108 0801 	add.w	r8, r8, #1
 8009c3a:	68e3      	ldr	r3, [r4, #12]
 8009c3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009c3e:	1a5b      	subs	r3, r3, r1
 8009c40:	4543      	cmp	r3, r8
 8009c42:	dcf0      	bgt.n	8009c26 <_printf_float+0x42e>
 8009c44:	e6fd      	b.n	8009a42 <_printf_float+0x24a>
 8009c46:	f04f 0800 	mov.w	r8, #0
 8009c4a:	f104 0919 	add.w	r9, r4, #25
 8009c4e:	e7f4      	b.n	8009c3a <_printf_float+0x442>

08009c50 <_printf_common>:
 8009c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c54:	4616      	mov	r6, r2
 8009c56:	4699      	mov	r9, r3
 8009c58:	688a      	ldr	r2, [r1, #8]
 8009c5a:	690b      	ldr	r3, [r1, #16]
 8009c5c:	4607      	mov	r7, r0
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	bfb8      	it	lt
 8009c62:	4613      	movlt	r3, r2
 8009c64:	6033      	str	r3, [r6, #0]
 8009c66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c6a:	460c      	mov	r4, r1
 8009c6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c70:	b10a      	cbz	r2, 8009c76 <_printf_common+0x26>
 8009c72:	3301      	adds	r3, #1
 8009c74:	6033      	str	r3, [r6, #0]
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	0699      	lsls	r1, r3, #26
 8009c7a:	bf42      	ittt	mi
 8009c7c:	6833      	ldrmi	r3, [r6, #0]
 8009c7e:	3302      	addmi	r3, #2
 8009c80:	6033      	strmi	r3, [r6, #0]
 8009c82:	6825      	ldr	r5, [r4, #0]
 8009c84:	f015 0506 	ands.w	r5, r5, #6
 8009c88:	d106      	bne.n	8009c98 <_printf_common+0x48>
 8009c8a:	f104 0a19 	add.w	sl, r4, #25
 8009c8e:	68e3      	ldr	r3, [r4, #12]
 8009c90:	6832      	ldr	r2, [r6, #0]
 8009c92:	1a9b      	subs	r3, r3, r2
 8009c94:	42ab      	cmp	r3, r5
 8009c96:	dc28      	bgt.n	8009cea <_printf_common+0x9a>
 8009c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c9c:	1e13      	subs	r3, r2, #0
 8009c9e:	6822      	ldr	r2, [r4, #0]
 8009ca0:	bf18      	it	ne
 8009ca2:	2301      	movne	r3, #1
 8009ca4:	0692      	lsls	r2, r2, #26
 8009ca6:	d42d      	bmi.n	8009d04 <_printf_common+0xb4>
 8009ca8:	4649      	mov	r1, r9
 8009caa:	4638      	mov	r0, r7
 8009cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cb0:	47c0      	blx	r8
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	d020      	beq.n	8009cf8 <_printf_common+0xa8>
 8009cb6:	6823      	ldr	r3, [r4, #0]
 8009cb8:	68e5      	ldr	r5, [r4, #12]
 8009cba:	f003 0306 	and.w	r3, r3, #6
 8009cbe:	2b04      	cmp	r3, #4
 8009cc0:	bf18      	it	ne
 8009cc2:	2500      	movne	r5, #0
 8009cc4:	6832      	ldr	r2, [r6, #0]
 8009cc6:	f04f 0600 	mov.w	r6, #0
 8009cca:	68a3      	ldr	r3, [r4, #8]
 8009ccc:	bf08      	it	eq
 8009cce:	1aad      	subeq	r5, r5, r2
 8009cd0:	6922      	ldr	r2, [r4, #16]
 8009cd2:	bf08      	it	eq
 8009cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	bfc4      	itt	gt
 8009cdc:	1a9b      	subgt	r3, r3, r2
 8009cde:	18ed      	addgt	r5, r5, r3
 8009ce0:	341a      	adds	r4, #26
 8009ce2:	42b5      	cmp	r5, r6
 8009ce4:	d11a      	bne.n	8009d1c <_printf_common+0xcc>
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	e008      	b.n	8009cfc <_printf_common+0xac>
 8009cea:	2301      	movs	r3, #1
 8009cec:	4652      	mov	r2, sl
 8009cee:	4649      	mov	r1, r9
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	47c0      	blx	r8
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	d103      	bne.n	8009d00 <_printf_common+0xb0>
 8009cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d00:	3501      	adds	r5, #1
 8009d02:	e7c4      	b.n	8009c8e <_printf_common+0x3e>
 8009d04:	2030      	movs	r0, #48	; 0x30
 8009d06:	18e1      	adds	r1, r4, r3
 8009d08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d0c:	1c5a      	adds	r2, r3, #1
 8009d0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d12:	4422      	add	r2, r4
 8009d14:	3302      	adds	r3, #2
 8009d16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d1a:	e7c5      	b.n	8009ca8 <_printf_common+0x58>
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	4622      	mov	r2, r4
 8009d20:	4649      	mov	r1, r9
 8009d22:	4638      	mov	r0, r7
 8009d24:	47c0      	blx	r8
 8009d26:	3001      	adds	r0, #1
 8009d28:	d0e6      	beq.n	8009cf8 <_printf_common+0xa8>
 8009d2a:	3601      	adds	r6, #1
 8009d2c:	e7d9      	b.n	8009ce2 <_printf_common+0x92>
	...

08009d30 <_printf_i>:
 8009d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d34:	7e0f      	ldrb	r7, [r1, #24]
 8009d36:	4691      	mov	r9, r2
 8009d38:	2f78      	cmp	r7, #120	; 0x78
 8009d3a:	4680      	mov	r8, r0
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	469a      	mov	sl, r3
 8009d40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d46:	d807      	bhi.n	8009d58 <_printf_i+0x28>
 8009d48:	2f62      	cmp	r7, #98	; 0x62
 8009d4a:	d80a      	bhi.n	8009d62 <_printf_i+0x32>
 8009d4c:	2f00      	cmp	r7, #0
 8009d4e:	f000 80d9 	beq.w	8009f04 <_printf_i+0x1d4>
 8009d52:	2f58      	cmp	r7, #88	; 0x58
 8009d54:	f000 80a4 	beq.w	8009ea0 <_printf_i+0x170>
 8009d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d60:	e03a      	b.n	8009dd8 <_printf_i+0xa8>
 8009d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d66:	2b15      	cmp	r3, #21
 8009d68:	d8f6      	bhi.n	8009d58 <_printf_i+0x28>
 8009d6a:	a101      	add	r1, pc, #4	; (adr r1, 8009d70 <_printf_i+0x40>)
 8009d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d70:	08009dc9 	.word	0x08009dc9
 8009d74:	08009ddd 	.word	0x08009ddd
 8009d78:	08009d59 	.word	0x08009d59
 8009d7c:	08009d59 	.word	0x08009d59
 8009d80:	08009d59 	.word	0x08009d59
 8009d84:	08009d59 	.word	0x08009d59
 8009d88:	08009ddd 	.word	0x08009ddd
 8009d8c:	08009d59 	.word	0x08009d59
 8009d90:	08009d59 	.word	0x08009d59
 8009d94:	08009d59 	.word	0x08009d59
 8009d98:	08009d59 	.word	0x08009d59
 8009d9c:	08009eeb 	.word	0x08009eeb
 8009da0:	08009e0d 	.word	0x08009e0d
 8009da4:	08009ecd 	.word	0x08009ecd
 8009da8:	08009d59 	.word	0x08009d59
 8009dac:	08009d59 	.word	0x08009d59
 8009db0:	08009f0d 	.word	0x08009f0d
 8009db4:	08009d59 	.word	0x08009d59
 8009db8:	08009e0d 	.word	0x08009e0d
 8009dbc:	08009d59 	.word	0x08009d59
 8009dc0:	08009d59 	.word	0x08009d59
 8009dc4:	08009ed5 	.word	0x08009ed5
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	1d1a      	adds	r2, r3, #4
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	602a      	str	r2, [r5, #0]
 8009dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e0a4      	b.n	8009f26 <_printf_i+0x1f6>
 8009ddc:	6820      	ldr	r0, [r4, #0]
 8009dde:	6829      	ldr	r1, [r5, #0]
 8009de0:	0606      	lsls	r6, r0, #24
 8009de2:	f101 0304 	add.w	r3, r1, #4
 8009de6:	d50a      	bpl.n	8009dfe <_printf_i+0xce>
 8009de8:	680e      	ldr	r6, [r1, #0]
 8009dea:	602b      	str	r3, [r5, #0]
 8009dec:	2e00      	cmp	r6, #0
 8009dee:	da03      	bge.n	8009df8 <_printf_i+0xc8>
 8009df0:	232d      	movs	r3, #45	; 0x2d
 8009df2:	4276      	negs	r6, r6
 8009df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009df8:	230a      	movs	r3, #10
 8009dfa:	485e      	ldr	r0, [pc, #376]	; (8009f74 <_printf_i+0x244>)
 8009dfc:	e019      	b.n	8009e32 <_printf_i+0x102>
 8009dfe:	680e      	ldr	r6, [r1, #0]
 8009e00:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009e04:	602b      	str	r3, [r5, #0]
 8009e06:	bf18      	it	ne
 8009e08:	b236      	sxthne	r6, r6
 8009e0a:	e7ef      	b.n	8009dec <_printf_i+0xbc>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	6820      	ldr	r0, [r4, #0]
 8009e10:	1d19      	adds	r1, r3, #4
 8009e12:	6029      	str	r1, [r5, #0]
 8009e14:	0601      	lsls	r1, r0, #24
 8009e16:	d501      	bpl.n	8009e1c <_printf_i+0xec>
 8009e18:	681e      	ldr	r6, [r3, #0]
 8009e1a:	e002      	b.n	8009e22 <_printf_i+0xf2>
 8009e1c:	0646      	lsls	r6, r0, #25
 8009e1e:	d5fb      	bpl.n	8009e18 <_printf_i+0xe8>
 8009e20:	881e      	ldrh	r6, [r3, #0]
 8009e22:	2f6f      	cmp	r7, #111	; 0x6f
 8009e24:	bf0c      	ite	eq
 8009e26:	2308      	moveq	r3, #8
 8009e28:	230a      	movne	r3, #10
 8009e2a:	4852      	ldr	r0, [pc, #328]	; (8009f74 <_printf_i+0x244>)
 8009e2c:	2100      	movs	r1, #0
 8009e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e32:	6865      	ldr	r5, [r4, #4]
 8009e34:	2d00      	cmp	r5, #0
 8009e36:	bfa8      	it	ge
 8009e38:	6821      	ldrge	r1, [r4, #0]
 8009e3a:	60a5      	str	r5, [r4, #8]
 8009e3c:	bfa4      	itt	ge
 8009e3e:	f021 0104 	bicge.w	r1, r1, #4
 8009e42:	6021      	strge	r1, [r4, #0]
 8009e44:	b90e      	cbnz	r6, 8009e4a <_printf_i+0x11a>
 8009e46:	2d00      	cmp	r5, #0
 8009e48:	d04d      	beq.n	8009ee6 <_printf_i+0x1b6>
 8009e4a:	4615      	mov	r5, r2
 8009e4c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e50:	fb03 6711 	mls	r7, r3, r1, r6
 8009e54:	5dc7      	ldrb	r7, [r0, r7]
 8009e56:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e5a:	4637      	mov	r7, r6
 8009e5c:	42bb      	cmp	r3, r7
 8009e5e:	460e      	mov	r6, r1
 8009e60:	d9f4      	bls.n	8009e4c <_printf_i+0x11c>
 8009e62:	2b08      	cmp	r3, #8
 8009e64:	d10b      	bne.n	8009e7e <_printf_i+0x14e>
 8009e66:	6823      	ldr	r3, [r4, #0]
 8009e68:	07de      	lsls	r6, r3, #31
 8009e6a:	d508      	bpl.n	8009e7e <_printf_i+0x14e>
 8009e6c:	6923      	ldr	r3, [r4, #16]
 8009e6e:	6861      	ldr	r1, [r4, #4]
 8009e70:	4299      	cmp	r1, r3
 8009e72:	bfde      	ittt	le
 8009e74:	2330      	movle	r3, #48	; 0x30
 8009e76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e7e:	1b52      	subs	r2, r2, r5
 8009e80:	6122      	str	r2, [r4, #16]
 8009e82:	464b      	mov	r3, r9
 8009e84:	4621      	mov	r1, r4
 8009e86:	4640      	mov	r0, r8
 8009e88:	f8cd a000 	str.w	sl, [sp]
 8009e8c:	aa03      	add	r2, sp, #12
 8009e8e:	f7ff fedf 	bl	8009c50 <_printf_common>
 8009e92:	3001      	adds	r0, #1
 8009e94:	d14c      	bne.n	8009f30 <_printf_i+0x200>
 8009e96:	f04f 30ff 	mov.w	r0, #4294967295
 8009e9a:	b004      	add	sp, #16
 8009e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea0:	4834      	ldr	r0, [pc, #208]	; (8009f74 <_printf_i+0x244>)
 8009ea2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009ea6:	6829      	ldr	r1, [r5, #0]
 8009ea8:	6823      	ldr	r3, [r4, #0]
 8009eaa:	f851 6b04 	ldr.w	r6, [r1], #4
 8009eae:	6029      	str	r1, [r5, #0]
 8009eb0:	061d      	lsls	r5, r3, #24
 8009eb2:	d514      	bpl.n	8009ede <_printf_i+0x1ae>
 8009eb4:	07df      	lsls	r7, r3, #31
 8009eb6:	bf44      	itt	mi
 8009eb8:	f043 0320 	orrmi.w	r3, r3, #32
 8009ebc:	6023      	strmi	r3, [r4, #0]
 8009ebe:	b91e      	cbnz	r6, 8009ec8 <_printf_i+0x198>
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	f023 0320 	bic.w	r3, r3, #32
 8009ec6:	6023      	str	r3, [r4, #0]
 8009ec8:	2310      	movs	r3, #16
 8009eca:	e7af      	b.n	8009e2c <_printf_i+0xfc>
 8009ecc:	6823      	ldr	r3, [r4, #0]
 8009ece:	f043 0320 	orr.w	r3, r3, #32
 8009ed2:	6023      	str	r3, [r4, #0]
 8009ed4:	2378      	movs	r3, #120	; 0x78
 8009ed6:	4828      	ldr	r0, [pc, #160]	; (8009f78 <_printf_i+0x248>)
 8009ed8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009edc:	e7e3      	b.n	8009ea6 <_printf_i+0x176>
 8009ede:	0659      	lsls	r1, r3, #25
 8009ee0:	bf48      	it	mi
 8009ee2:	b2b6      	uxthmi	r6, r6
 8009ee4:	e7e6      	b.n	8009eb4 <_printf_i+0x184>
 8009ee6:	4615      	mov	r5, r2
 8009ee8:	e7bb      	b.n	8009e62 <_printf_i+0x132>
 8009eea:	682b      	ldr	r3, [r5, #0]
 8009eec:	6826      	ldr	r6, [r4, #0]
 8009eee:	1d18      	adds	r0, r3, #4
 8009ef0:	6961      	ldr	r1, [r4, #20]
 8009ef2:	6028      	str	r0, [r5, #0]
 8009ef4:	0635      	lsls	r5, r6, #24
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	d501      	bpl.n	8009efe <_printf_i+0x1ce>
 8009efa:	6019      	str	r1, [r3, #0]
 8009efc:	e002      	b.n	8009f04 <_printf_i+0x1d4>
 8009efe:	0670      	lsls	r0, r6, #25
 8009f00:	d5fb      	bpl.n	8009efa <_printf_i+0x1ca>
 8009f02:	8019      	strh	r1, [r3, #0]
 8009f04:	2300      	movs	r3, #0
 8009f06:	4615      	mov	r5, r2
 8009f08:	6123      	str	r3, [r4, #16]
 8009f0a:	e7ba      	b.n	8009e82 <_printf_i+0x152>
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	2100      	movs	r1, #0
 8009f10:	1d1a      	adds	r2, r3, #4
 8009f12:	602a      	str	r2, [r5, #0]
 8009f14:	681d      	ldr	r5, [r3, #0]
 8009f16:	6862      	ldr	r2, [r4, #4]
 8009f18:	4628      	mov	r0, r5
 8009f1a:	f000 feeb 	bl	800acf4 <memchr>
 8009f1e:	b108      	cbz	r0, 8009f24 <_printf_i+0x1f4>
 8009f20:	1b40      	subs	r0, r0, r5
 8009f22:	6060      	str	r0, [r4, #4]
 8009f24:	6863      	ldr	r3, [r4, #4]
 8009f26:	6123      	str	r3, [r4, #16]
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f2e:	e7a8      	b.n	8009e82 <_printf_i+0x152>
 8009f30:	462a      	mov	r2, r5
 8009f32:	4649      	mov	r1, r9
 8009f34:	4640      	mov	r0, r8
 8009f36:	6923      	ldr	r3, [r4, #16]
 8009f38:	47d0      	blx	sl
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	d0ab      	beq.n	8009e96 <_printf_i+0x166>
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	079b      	lsls	r3, r3, #30
 8009f42:	d413      	bmi.n	8009f6c <_printf_i+0x23c>
 8009f44:	68e0      	ldr	r0, [r4, #12]
 8009f46:	9b03      	ldr	r3, [sp, #12]
 8009f48:	4298      	cmp	r0, r3
 8009f4a:	bfb8      	it	lt
 8009f4c:	4618      	movlt	r0, r3
 8009f4e:	e7a4      	b.n	8009e9a <_printf_i+0x16a>
 8009f50:	2301      	movs	r3, #1
 8009f52:	4632      	mov	r2, r6
 8009f54:	4649      	mov	r1, r9
 8009f56:	4640      	mov	r0, r8
 8009f58:	47d0      	blx	sl
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	d09b      	beq.n	8009e96 <_printf_i+0x166>
 8009f5e:	3501      	adds	r5, #1
 8009f60:	68e3      	ldr	r3, [r4, #12]
 8009f62:	9903      	ldr	r1, [sp, #12]
 8009f64:	1a5b      	subs	r3, r3, r1
 8009f66:	42ab      	cmp	r3, r5
 8009f68:	dcf2      	bgt.n	8009f50 <_printf_i+0x220>
 8009f6a:	e7eb      	b.n	8009f44 <_printf_i+0x214>
 8009f6c:	2500      	movs	r5, #0
 8009f6e:	f104 0619 	add.w	r6, r4, #25
 8009f72:	e7f5      	b.n	8009f60 <_printf_i+0x230>
 8009f74:	0800c542 	.word	0x0800c542
 8009f78:	0800c553 	.word	0x0800c553

08009f7c <sniprintf>:
 8009f7c:	b40c      	push	{r2, r3}
 8009f7e:	b530      	push	{r4, r5, lr}
 8009f80:	4b17      	ldr	r3, [pc, #92]	; (8009fe0 <sniprintf+0x64>)
 8009f82:	1e0c      	subs	r4, r1, #0
 8009f84:	681d      	ldr	r5, [r3, #0]
 8009f86:	b09d      	sub	sp, #116	; 0x74
 8009f88:	da08      	bge.n	8009f9c <sniprintf+0x20>
 8009f8a:	238b      	movs	r3, #139	; 0x8b
 8009f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f90:	602b      	str	r3, [r5, #0]
 8009f92:	b01d      	add	sp, #116	; 0x74
 8009f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f98:	b002      	add	sp, #8
 8009f9a:	4770      	bx	lr
 8009f9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009fa0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009fa4:	bf0c      	ite	eq
 8009fa6:	4623      	moveq	r3, r4
 8009fa8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009fac:	9304      	str	r3, [sp, #16]
 8009fae:	9307      	str	r3, [sp, #28]
 8009fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009fb4:	9002      	str	r0, [sp, #8]
 8009fb6:	9006      	str	r0, [sp, #24]
 8009fb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	ab21      	add	r3, sp, #132	; 0x84
 8009fc0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009fc2:	a902      	add	r1, sp, #8
 8009fc4:	9301      	str	r3, [sp, #4]
 8009fc6:	f001 fb7f 	bl	800b6c8 <_svfiprintf_r>
 8009fca:	1c43      	adds	r3, r0, #1
 8009fcc:	bfbc      	itt	lt
 8009fce:	238b      	movlt	r3, #139	; 0x8b
 8009fd0:	602b      	strlt	r3, [r5, #0]
 8009fd2:	2c00      	cmp	r4, #0
 8009fd4:	d0dd      	beq.n	8009f92 <sniprintf+0x16>
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	9b02      	ldr	r3, [sp, #8]
 8009fda:	701a      	strb	r2, [r3, #0]
 8009fdc:	e7d9      	b.n	8009f92 <sniprintf+0x16>
 8009fde:	bf00      	nop
 8009fe0:	2000017c 	.word	0x2000017c

08009fe4 <quorem>:
 8009fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe8:	6903      	ldr	r3, [r0, #16]
 8009fea:	690c      	ldr	r4, [r1, #16]
 8009fec:	4607      	mov	r7, r0
 8009fee:	42a3      	cmp	r3, r4
 8009ff0:	f2c0 8082 	blt.w	800a0f8 <quorem+0x114>
 8009ff4:	3c01      	subs	r4, #1
 8009ff6:	f100 0514 	add.w	r5, r0, #20
 8009ffa:	f101 0814 	add.w	r8, r1, #20
 8009ffe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a002:	9301      	str	r3, [sp, #4]
 800a004:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a008:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a00c:	3301      	adds	r3, #1
 800a00e:	429a      	cmp	r2, r3
 800a010:	fbb2 f6f3 	udiv	r6, r2, r3
 800a014:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a018:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a01c:	d331      	bcc.n	800a082 <quorem+0x9e>
 800a01e:	f04f 0e00 	mov.w	lr, #0
 800a022:	4640      	mov	r0, r8
 800a024:	46ac      	mov	ip, r5
 800a026:	46f2      	mov	sl, lr
 800a028:	f850 2b04 	ldr.w	r2, [r0], #4
 800a02c:	b293      	uxth	r3, r2
 800a02e:	fb06 e303 	mla	r3, r6, r3, lr
 800a032:	0c12      	lsrs	r2, r2, #16
 800a034:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a038:	b29b      	uxth	r3, r3
 800a03a:	fb06 e202 	mla	r2, r6, r2, lr
 800a03e:	ebaa 0303 	sub.w	r3, sl, r3
 800a042:	f8dc a000 	ldr.w	sl, [ip]
 800a046:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a04a:	fa1f fa8a 	uxth.w	sl, sl
 800a04e:	4453      	add	r3, sl
 800a050:	f8dc a000 	ldr.w	sl, [ip]
 800a054:	b292      	uxth	r2, r2
 800a056:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a05a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a05e:	b29b      	uxth	r3, r3
 800a060:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a064:	4581      	cmp	r9, r0
 800a066:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a06a:	f84c 3b04 	str.w	r3, [ip], #4
 800a06e:	d2db      	bcs.n	800a028 <quorem+0x44>
 800a070:	f855 300b 	ldr.w	r3, [r5, fp]
 800a074:	b92b      	cbnz	r3, 800a082 <quorem+0x9e>
 800a076:	9b01      	ldr	r3, [sp, #4]
 800a078:	3b04      	subs	r3, #4
 800a07a:	429d      	cmp	r5, r3
 800a07c:	461a      	mov	r2, r3
 800a07e:	d32f      	bcc.n	800a0e0 <quorem+0xfc>
 800a080:	613c      	str	r4, [r7, #16]
 800a082:	4638      	mov	r0, r7
 800a084:	f001 f8d0 	bl	800b228 <__mcmp>
 800a088:	2800      	cmp	r0, #0
 800a08a:	db25      	blt.n	800a0d8 <quorem+0xf4>
 800a08c:	4628      	mov	r0, r5
 800a08e:	f04f 0c00 	mov.w	ip, #0
 800a092:	3601      	adds	r6, #1
 800a094:	f858 1b04 	ldr.w	r1, [r8], #4
 800a098:	f8d0 e000 	ldr.w	lr, [r0]
 800a09c:	b28b      	uxth	r3, r1
 800a09e:	ebac 0303 	sub.w	r3, ip, r3
 800a0a2:	fa1f f28e 	uxth.w	r2, lr
 800a0a6:	4413      	add	r3, r2
 800a0a8:	0c0a      	lsrs	r2, r1, #16
 800a0aa:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a0ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0b8:	45c1      	cmp	r9, r8
 800a0ba:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a0be:	f840 3b04 	str.w	r3, [r0], #4
 800a0c2:	d2e7      	bcs.n	800a094 <quorem+0xb0>
 800a0c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0cc:	b922      	cbnz	r2, 800a0d8 <quorem+0xf4>
 800a0ce:	3b04      	subs	r3, #4
 800a0d0:	429d      	cmp	r5, r3
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	d30a      	bcc.n	800a0ec <quorem+0x108>
 800a0d6:	613c      	str	r4, [r7, #16]
 800a0d8:	4630      	mov	r0, r6
 800a0da:	b003      	add	sp, #12
 800a0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e0:	6812      	ldr	r2, [r2, #0]
 800a0e2:	3b04      	subs	r3, #4
 800a0e4:	2a00      	cmp	r2, #0
 800a0e6:	d1cb      	bne.n	800a080 <quorem+0x9c>
 800a0e8:	3c01      	subs	r4, #1
 800a0ea:	e7c6      	b.n	800a07a <quorem+0x96>
 800a0ec:	6812      	ldr	r2, [r2, #0]
 800a0ee:	3b04      	subs	r3, #4
 800a0f0:	2a00      	cmp	r2, #0
 800a0f2:	d1f0      	bne.n	800a0d6 <quorem+0xf2>
 800a0f4:	3c01      	subs	r4, #1
 800a0f6:	e7eb      	b.n	800a0d0 <quorem+0xec>
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	e7ee      	b.n	800a0da <quorem+0xf6>
 800a0fc:	0000      	movs	r0, r0
	...

0800a100 <_dtoa_r>:
 800a100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a104:	4616      	mov	r6, r2
 800a106:	461f      	mov	r7, r3
 800a108:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a10a:	b099      	sub	sp, #100	; 0x64
 800a10c:	4605      	mov	r5, r0
 800a10e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a112:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a116:	b974      	cbnz	r4, 800a136 <_dtoa_r+0x36>
 800a118:	2010      	movs	r0, #16
 800a11a:	f000 fde3 	bl	800ace4 <malloc>
 800a11e:	4602      	mov	r2, r0
 800a120:	6268      	str	r0, [r5, #36]	; 0x24
 800a122:	b920      	cbnz	r0, 800a12e <_dtoa_r+0x2e>
 800a124:	21ea      	movs	r1, #234	; 0xea
 800a126:	4ba8      	ldr	r3, [pc, #672]	; (800a3c8 <_dtoa_r+0x2c8>)
 800a128:	48a8      	ldr	r0, [pc, #672]	; (800a3cc <_dtoa_r+0x2cc>)
 800a12a:	f001 fbdd 	bl	800b8e8 <__assert_func>
 800a12e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a132:	6004      	str	r4, [r0, #0]
 800a134:	60c4      	str	r4, [r0, #12]
 800a136:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a138:	6819      	ldr	r1, [r3, #0]
 800a13a:	b151      	cbz	r1, 800a152 <_dtoa_r+0x52>
 800a13c:	685a      	ldr	r2, [r3, #4]
 800a13e:	2301      	movs	r3, #1
 800a140:	4093      	lsls	r3, r2
 800a142:	604a      	str	r2, [r1, #4]
 800a144:	608b      	str	r3, [r1, #8]
 800a146:	4628      	mov	r0, r5
 800a148:	f000 fe30 	bl	800adac <_Bfree>
 800a14c:	2200      	movs	r2, #0
 800a14e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a150:	601a      	str	r2, [r3, #0]
 800a152:	1e3b      	subs	r3, r7, #0
 800a154:	bfaf      	iteee	ge
 800a156:	2300      	movge	r3, #0
 800a158:	2201      	movlt	r2, #1
 800a15a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a15e:	9305      	strlt	r3, [sp, #20]
 800a160:	bfa8      	it	ge
 800a162:	f8c8 3000 	strge.w	r3, [r8]
 800a166:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a16a:	4b99      	ldr	r3, [pc, #612]	; (800a3d0 <_dtoa_r+0x2d0>)
 800a16c:	bfb8      	it	lt
 800a16e:	f8c8 2000 	strlt.w	r2, [r8]
 800a172:	ea33 0309 	bics.w	r3, r3, r9
 800a176:	d119      	bne.n	800a1ac <_dtoa_r+0xac>
 800a178:	f242 730f 	movw	r3, #9999	; 0x270f
 800a17c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a17e:	6013      	str	r3, [r2, #0]
 800a180:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a184:	4333      	orrs	r3, r6
 800a186:	f000 857f 	beq.w	800ac88 <_dtoa_r+0xb88>
 800a18a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a18c:	b953      	cbnz	r3, 800a1a4 <_dtoa_r+0xa4>
 800a18e:	4b91      	ldr	r3, [pc, #580]	; (800a3d4 <_dtoa_r+0x2d4>)
 800a190:	e022      	b.n	800a1d8 <_dtoa_r+0xd8>
 800a192:	4b91      	ldr	r3, [pc, #580]	; (800a3d8 <_dtoa_r+0x2d8>)
 800a194:	9303      	str	r3, [sp, #12]
 800a196:	3308      	adds	r3, #8
 800a198:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a19a:	6013      	str	r3, [r2, #0]
 800a19c:	9803      	ldr	r0, [sp, #12]
 800a19e:	b019      	add	sp, #100	; 0x64
 800a1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a4:	4b8b      	ldr	r3, [pc, #556]	; (800a3d4 <_dtoa_r+0x2d4>)
 800a1a6:	9303      	str	r3, [sp, #12]
 800a1a8:	3303      	adds	r3, #3
 800a1aa:	e7f5      	b.n	800a198 <_dtoa_r+0x98>
 800a1ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a1b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a1b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	f7f6 fbf4 	bl	80009a8 <__aeabi_dcmpeq>
 800a1c0:	4680      	mov	r8, r0
 800a1c2:	b158      	cbz	r0, 800a1dc <_dtoa_r+0xdc>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a1c8:	6013      	str	r3, [r2, #0]
 800a1ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f000 8558 	beq.w	800ac82 <_dtoa_r+0xb82>
 800a1d2:	4882      	ldr	r0, [pc, #520]	; (800a3dc <_dtoa_r+0x2dc>)
 800a1d4:	6018      	str	r0, [r3, #0]
 800a1d6:	1e43      	subs	r3, r0, #1
 800a1d8:	9303      	str	r3, [sp, #12]
 800a1da:	e7df      	b.n	800a19c <_dtoa_r+0x9c>
 800a1dc:	ab16      	add	r3, sp, #88	; 0x58
 800a1de:	9301      	str	r3, [sp, #4]
 800a1e0:	ab17      	add	r3, sp, #92	; 0x5c
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	4628      	mov	r0, r5
 800a1e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a1ea:	f001 f8c5 	bl	800b378 <__d2b>
 800a1ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a1f2:	4683      	mov	fp, r0
 800a1f4:	2c00      	cmp	r4, #0
 800a1f6:	d07f      	beq.n	800a2f8 <_dtoa_r+0x1f8>
 800a1f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a1fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a202:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a206:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a20a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a20e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a212:	2200      	movs	r2, #0
 800a214:	4b72      	ldr	r3, [pc, #456]	; (800a3e0 <_dtoa_r+0x2e0>)
 800a216:	f7f5 ffa7 	bl	8000168 <__aeabi_dsub>
 800a21a:	a365      	add	r3, pc, #404	; (adr r3, 800a3b0 <_dtoa_r+0x2b0>)
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	f7f6 f95a 	bl	80004d8 <__aeabi_dmul>
 800a224:	a364      	add	r3, pc, #400	; (adr r3, 800a3b8 <_dtoa_r+0x2b8>)
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	f7f5 ff9f 	bl	800016c <__adddf3>
 800a22e:	4606      	mov	r6, r0
 800a230:	4620      	mov	r0, r4
 800a232:	460f      	mov	r7, r1
 800a234:	f7f6 f8e6 	bl	8000404 <__aeabi_i2d>
 800a238:	a361      	add	r3, pc, #388	; (adr r3, 800a3c0 <_dtoa_r+0x2c0>)
 800a23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23e:	f7f6 f94b 	bl	80004d8 <__aeabi_dmul>
 800a242:	4602      	mov	r2, r0
 800a244:	460b      	mov	r3, r1
 800a246:	4630      	mov	r0, r6
 800a248:	4639      	mov	r1, r7
 800a24a:	f7f5 ff8f 	bl	800016c <__adddf3>
 800a24e:	4606      	mov	r6, r0
 800a250:	460f      	mov	r7, r1
 800a252:	f7f6 fbf1 	bl	8000a38 <__aeabi_d2iz>
 800a256:	2200      	movs	r2, #0
 800a258:	4682      	mov	sl, r0
 800a25a:	2300      	movs	r3, #0
 800a25c:	4630      	mov	r0, r6
 800a25e:	4639      	mov	r1, r7
 800a260:	f7f6 fbac 	bl	80009bc <__aeabi_dcmplt>
 800a264:	b148      	cbz	r0, 800a27a <_dtoa_r+0x17a>
 800a266:	4650      	mov	r0, sl
 800a268:	f7f6 f8cc 	bl	8000404 <__aeabi_i2d>
 800a26c:	4632      	mov	r2, r6
 800a26e:	463b      	mov	r3, r7
 800a270:	f7f6 fb9a 	bl	80009a8 <__aeabi_dcmpeq>
 800a274:	b908      	cbnz	r0, 800a27a <_dtoa_r+0x17a>
 800a276:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a27a:	f1ba 0f16 	cmp.w	sl, #22
 800a27e:	d858      	bhi.n	800a332 <_dtoa_r+0x232>
 800a280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a284:	4b57      	ldr	r3, [pc, #348]	; (800a3e4 <_dtoa_r+0x2e4>)
 800a286:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	f7f6 fb95 	bl	80009bc <__aeabi_dcmplt>
 800a292:	2800      	cmp	r0, #0
 800a294:	d04f      	beq.n	800a336 <_dtoa_r+0x236>
 800a296:	2300      	movs	r3, #0
 800a298:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a29c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a29e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a2a0:	1b1c      	subs	r4, r3, r4
 800a2a2:	1e63      	subs	r3, r4, #1
 800a2a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a2a6:	bf49      	itett	mi
 800a2a8:	f1c4 0301 	rsbmi	r3, r4, #1
 800a2ac:	2300      	movpl	r3, #0
 800a2ae:	9306      	strmi	r3, [sp, #24]
 800a2b0:	2300      	movmi	r3, #0
 800a2b2:	bf54      	ite	pl
 800a2b4:	9306      	strpl	r3, [sp, #24]
 800a2b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a2b8:	f1ba 0f00 	cmp.w	sl, #0
 800a2bc:	db3d      	blt.n	800a33a <_dtoa_r+0x23a>
 800a2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2c0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a2c4:	4453      	add	r3, sl
 800a2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a2cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2ce:	2b09      	cmp	r3, #9
 800a2d0:	f200 808c 	bhi.w	800a3ec <_dtoa_r+0x2ec>
 800a2d4:	2b05      	cmp	r3, #5
 800a2d6:	bfc4      	itt	gt
 800a2d8:	3b04      	subgt	r3, #4
 800a2da:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a2dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2de:	bfc8      	it	gt
 800a2e0:	2400      	movgt	r4, #0
 800a2e2:	f1a3 0302 	sub.w	r3, r3, #2
 800a2e6:	bfd8      	it	le
 800a2e8:	2401      	movle	r4, #1
 800a2ea:	2b03      	cmp	r3, #3
 800a2ec:	f200 808a 	bhi.w	800a404 <_dtoa_r+0x304>
 800a2f0:	e8df f003 	tbb	[pc, r3]
 800a2f4:	5b4d4f2d 	.word	0x5b4d4f2d
 800a2f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a2fc:	441c      	add	r4, r3
 800a2fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a302:	2b20      	cmp	r3, #32
 800a304:	bfc3      	ittte	gt
 800a306:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a30a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a30e:	fa09 f303 	lslgt.w	r3, r9, r3
 800a312:	f1c3 0320 	rsble	r3, r3, #32
 800a316:	bfc6      	itte	gt
 800a318:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a31c:	4318      	orrgt	r0, r3
 800a31e:	fa06 f003 	lslle.w	r0, r6, r3
 800a322:	f7f6 f85f 	bl	80003e4 <__aeabi_ui2d>
 800a326:	2301      	movs	r3, #1
 800a328:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a32c:	3c01      	subs	r4, #1
 800a32e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a330:	e76f      	b.n	800a212 <_dtoa_r+0x112>
 800a332:	2301      	movs	r3, #1
 800a334:	e7b2      	b.n	800a29c <_dtoa_r+0x19c>
 800a336:	900f      	str	r0, [sp, #60]	; 0x3c
 800a338:	e7b1      	b.n	800a29e <_dtoa_r+0x19e>
 800a33a:	9b06      	ldr	r3, [sp, #24]
 800a33c:	eba3 030a 	sub.w	r3, r3, sl
 800a340:	9306      	str	r3, [sp, #24]
 800a342:	f1ca 0300 	rsb	r3, sl, #0
 800a346:	930a      	str	r3, [sp, #40]	; 0x28
 800a348:	2300      	movs	r3, #0
 800a34a:	930e      	str	r3, [sp, #56]	; 0x38
 800a34c:	e7be      	b.n	800a2cc <_dtoa_r+0x1cc>
 800a34e:	2300      	movs	r3, #0
 800a350:	930b      	str	r3, [sp, #44]	; 0x2c
 800a352:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a354:	2b00      	cmp	r3, #0
 800a356:	dc58      	bgt.n	800a40a <_dtoa_r+0x30a>
 800a358:	f04f 0901 	mov.w	r9, #1
 800a35c:	464b      	mov	r3, r9
 800a35e:	f8cd 9020 	str.w	r9, [sp, #32]
 800a362:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a366:	2200      	movs	r2, #0
 800a368:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a36a:	6042      	str	r2, [r0, #4]
 800a36c:	2204      	movs	r2, #4
 800a36e:	f102 0614 	add.w	r6, r2, #20
 800a372:	429e      	cmp	r6, r3
 800a374:	6841      	ldr	r1, [r0, #4]
 800a376:	d94e      	bls.n	800a416 <_dtoa_r+0x316>
 800a378:	4628      	mov	r0, r5
 800a37a:	f000 fcd7 	bl	800ad2c <_Balloc>
 800a37e:	9003      	str	r0, [sp, #12]
 800a380:	2800      	cmp	r0, #0
 800a382:	d14c      	bne.n	800a41e <_dtoa_r+0x31e>
 800a384:	4602      	mov	r2, r0
 800a386:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a38a:	4b17      	ldr	r3, [pc, #92]	; (800a3e8 <_dtoa_r+0x2e8>)
 800a38c:	e6cc      	b.n	800a128 <_dtoa_r+0x28>
 800a38e:	2301      	movs	r3, #1
 800a390:	e7de      	b.n	800a350 <_dtoa_r+0x250>
 800a392:	2300      	movs	r3, #0
 800a394:	930b      	str	r3, [sp, #44]	; 0x2c
 800a396:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a398:	eb0a 0903 	add.w	r9, sl, r3
 800a39c:	f109 0301 	add.w	r3, r9, #1
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	9308      	str	r3, [sp, #32]
 800a3a4:	bfb8      	it	lt
 800a3a6:	2301      	movlt	r3, #1
 800a3a8:	e7dd      	b.n	800a366 <_dtoa_r+0x266>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e7f2      	b.n	800a394 <_dtoa_r+0x294>
 800a3ae:	bf00      	nop
 800a3b0:	636f4361 	.word	0x636f4361
 800a3b4:	3fd287a7 	.word	0x3fd287a7
 800a3b8:	8b60c8b3 	.word	0x8b60c8b3
 800a3bc:	3fc68a28 	.word	0x3fc68a28
 800a3c0:	509f79fb 	.word	0x509f79fb
 800a3c4:	3fd34413 	.word	0x3fd34413
 800a3c8:	0800c571 	.word	0x0800c571
 800a3cc:	0800c588 	.word	0x0800c588
 800a3d0:	7ff00000 	.word	0x7ff00000
 800a3d4:	0800c56d 	.word	0x0800c56d
 800a3d8:	0800c564 	.word	0x0800c564
 800a3dc:	0800c541 	.word	0x0800c541
 800a3e0:	3ff80000 	.word	0x3ff80000
 800a3e4:	0800c678 	.word	0x0800c678
 800a3e8:	0800c5e3 	.word	0x0800c5e3
 800a3ec:	2401      	movs	r4, #1
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	940b      	str	r4, [sp, #44]	; 0x2c
 800a3f2:	9322      	str	r3, [sp, #136]	; 0x88
 800a3f4:	f04f 39ff 	mov.w	r9, #4294967295
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	2312      	movs	r3, #18
 800a3fc:	f8cd 9020 	str.w	r9, [sp, #32]
 800a400:	9223      	str	r2, [sp, #140]	; 0x8c
 800a402:	e7b0      	b.n	800a366 <_dtoa_r+0x266>
 800a404:	2301      	movs	r3, #1
 800a406:	930b      	str	r3, [sp, #44]	; 0x2c
 800a408:	e7f4      	b.n	800a3f4 <_dtoa_r+0x2f4>
 800a40a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a40e:	464b      	mov	r3, r9
 800a410:	f8cd 9020 	str.w	r9, [sp, #32]
 800a414:	e7a7      	b.n	800a366 <_dtoa_r+0x266>
 800a416:	3101      	adds	r1, #1
 800a418:	6041      	str	r1, [r0, #4]
 800a41a:	0052      	lsls	r2, r2, #1
 800a41c:	e7a7      	b.n	800a36e <_dtoa_r+0x26e>
 800a41e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a420:	9a03      	ldr	r2, [sp, #12]
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	9b08      	ldr	r3, [sp, #32]
 800a426:	2b0e      	cmp	r3, #14
 800a428:	f200 80a8 	bhi.w	800a57c <_dtoa_r+0x47c>
 800a42c:	2c00      	cmp	r4, #0
 800a42e:	f000 80a5 	beq.w	800a57c <_dtoa_r+0x47c>
 800a432:	f1ba 0f00 	cmp.w	sl, #0
 800a436:	dd34      	ble.n	800a4a2 <_dtoa_r+0x3a2>
 800a438:	4a9a      	ldr	r2, [pc, #616]	; (800a6a4 <_dtoa_r+0x5a4>)
 800a43a:	f00a 030f 	and.w	r3, sl, #15
 800a43e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a442:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a446:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a44a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a44e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800a452:	d016      	beq.n	800a482 <_dtoa_r+0x382>
 800a454:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a458:	4b93      	ldr	r3, [pc, #588]	; (800a6a8 <_dtoa_r+0x5a8>)
 800a45a:	2703      	movs	r7, #3
 800a45c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a460:	f7f6 f964 	bl	800072c <__aeabi_ddiv>
 800a464:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a468:	f004 040f 	and.w	r4, r4, #15
 800a46c:	4e8e      	ldr	r6, [pc, #568]	; (800a6a8 <_dtoa_r+0x5a8>)
 800a46e:	b954      	cbnz	r4, 800a486 <_dtoa_r+0x386>
 800a470:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a478:	f7f6 f958 	bl	800072c <__aeabi_ddiv>
 800a47c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a480:	e029      	b.n	800a4d6 <_dtoa_r+0x3d6>
 800a482:	2702      	movs	r7, #2
 800a484:	e7f2      	b.n	800a46c <_dtoa_r+0x36c>
 800a486:	07e1      	lsls	r1, r4, #31
 800a488:	d508      	bpl.n	800a49c <_dtoa_r+0x39c>
 800a48a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a48e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a492:	f7f6 f821 	bl	80004d8 <__aeabi_dmul>
 800a496:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a49a:	3701      	adds	r7, #1
 800a49c:	1064      	asrs	r4, r4, #1
 800a49e:	3608      	adds	r6, #8
 800a4a0:	e7e5      	b.n	800a46e <_dtoa_r+0x36e>
 800a4a2:	f000 80a5 	beq.w	800a5f0 <_dtoa_r+0x4f0>
 800a4a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4aa:	f1ca 0400 	rsb	r4, sl, #0
 800a4ae:	4b7d      	ldr	r3, [pc, #500]	; (800a6a4 <_dtoa_r+0x5a4>)
 800a4b0:	f004 020f 	and.w	r2, r4, #15
 800a4b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4bc:	f7f6 f80c 	bl	80004d8 <__aeabi_dmul>
 800a4c0:	2702      	movs	r7, #2
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4c8:	4e77      	ldr	r6, [pc, #476]	; (800a6a8 <_dtoa_r+0x5a8>)
 800a4ca:	1124      	asrs	r4, r4, #4
 800a4cc:	2c00      	cmp	r4, #0
 800a4ce:	f040 8084 	bne.w	800a5da <_dtoa_r+0x4da>
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1d2      	bne.n	800a47c <_dtoa_r+0x37c>
 800a4d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 808b 	beq.w	800a5f4 <_dtoa_r+0x4f4>
 800a4de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a4e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a4e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	4b6f      	ldr	r3, [pc, #444]	; (800a6ac <_dtoa_r+0x5ac>)
 800a4ee:	f7f6 fa65 	bl	80009bc <__aeabi_dcmplt>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	d07e      	beq.n	800a5f4 <_dtoa_r+0x4f4>
 800a4f6:	9b08      	ldr	r3, [sp, #32]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d07b      	beq.n	800a5f4 <_dtoa_r+0x4f4>
 800a4fc:	f1b9 0f00 	cmp.w	r9, #0
 800a500:	dd38      	ble.n	800a574 <_dtoa_r+0x474>
 800a502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a506:	2200      	movs	r2, #0
 800a508:	4b69      	ldr	r3, [pc, #420]	; (800a6b0 <_dtoa_r+0x5b0>)
 800a50a:	f7f5 ffe5 	bl	80004d8 <__aeabi_dmul>
 800a50e:	464c      	mov	r4, r9
 800a510:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a514:	f10a 38ff 	add.w	r8, sl, #4294967295
 800a518:	3701      	adds	r7, #1
 800a51a:	4638      	mov	r0, r7
 800a51c:	f7f5 ff72 	bl	8000404 <__aeabi_i2d>
 800a520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a524:	f7f5 ffd8 	bl	80004d8 <__aeabi_dmul>
 800a528:	2200      	movs	r2, #0
 800a52a:	4b62      	ldr	r3, [pc, #392]	; (800a6b4 <_dtoa_r+0x5b4>)
 800a52c:	f7f5 fe1e 	bl	800016c <__adddf3>
 800a530:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a534:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a538:	9611      	str	r6, [sp, #68]	; 0x44
 800a53a:	2c00      	cmp	r4, #0
 800a53c:	d15d      	bne.n	800a5fa <_dtoa_r+0x4fa>
 800a53e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a542:	2200      	movs	r2, #0
 800a544:	4b5c      	ldr	r3, [pc, #368]	; (800a6b8 <_dtoa_r+0x5b8>)
 800a546:	f7f5 fe0f 	bl	8000168 <__aeabi_dsub>
 800a54a:	4602      	mov	r2, r0
 800a54c:	460b      	mov	r3, r1
 800a54e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a552:	4633      	mov	r3, r6
 800a554:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a556:	f7f6 fa4f 	bl	80009f8 <__aeabi_dcmpgt>
 800a55a:	2800      	cmp	r0, #0
 800a55c:	f040 829c 	bne.w	800aa98 <_dtoa_r+0x998>
 800a560:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a564:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a566:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a56a:	f7f6 fa27 	bl	80009bc <__aeabi_dcmplt>
 800a56e:	2800      	cmp	r0, #0
 800a570:	f040 8290 	bne.w	800aa94 <_dtoa_r+0x994>
 800a574:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a578:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a57c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a57e:	2b00      	cmp	r3, #0
 800a580:	f2c0 8152 	blt.w	800a828 <_dtoa_r+0x728>
 800a584:	f1ba 0f0e 	cmp.w	sl, #14
 800a588:	f300 814e 	bgt.w	800a828 <_dtoa_r+0x728>
 800a58c:	4b45      	ldr	r3, [pc, #276]	; (800a6a4 <_dtoa_r+0x5a4>)
 800a58e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a592:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a596:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a59a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f280 80db 	bge.w	800a758 <_dtoa_r+0x658>
 800a5a2:	9b08      	ldr	r3, [sp, #32]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f300 80d7 	bgt.w	800a758 <_dtoa_r+0x658>
 800a5aa:	f040 8272 	bne.w	800aa92 <_dtoa_r+0x992>
 800a5ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	4b40      	ldr	r3, [pc, #256]	; (800a6b8 <_dtoa_r+0x5b8>)
 800a5b6:	f7f5 ff8f 	bl	80004d8 <__aeabi_dmul>
 800a5ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5be:	f7f6 fa11 	bl	80009e4 <__aeabi_dcmpge>
 800a5c2:	9c08      	ldr	r4, [sp, #32]
 800a5c4:	4626      	mov	r6, r4
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	f040 8248 	bne.w	800aa5c <_dtoa_r+0x95c>
 800a5cc:	2331      	movs	r3, #49	; 0x31
 800a5ce:	9f03      	ldr	r7, [sp, #12]
 800a5d0:	f10a 0a01 	add.w	sl, sl, #1
 800a5d4:	f807 3b01 	strb.w	r3, [r7], #1
 800a5d8:	e244      	b.n	800aa64 <_dtoa_r+0x964>
 800a5da:	07e2      	lsls	r2, r4, #31
 800a5dc:	d505      	bpl.n	800a5ea <_dtoa_r+0x4ea>
 800a5de:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5e2:	f7f5 ff79 	bl	80004d8 <__aeabi_dmul>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	3701      	adds	r7, #1
 800a5ea:	1064      	asrs	r4, r4, #1
 800a5ec:	3608      	adds	r6, #8
 800a5ee:	e76d      	b.n	800a4cc <_dtoa_r+0x3cc>
 800a5f0:	2702      	movs	r7, #2
 800a5f2:	e770      	b.n	800a4d6 <_dtoa_r+0x3d6>
 800a5f4:	46d0      	mov	r8, sl
 800a5f6:	9c08      	ldr	r4, [sp, #32]
 800a5f8:	e78f      	b.n	800a51a <_dtoa_r+0x41a>
 800a5fa:	9903      	ldr	r1, [sp, #12]
 800a5fc:	4b29      	ldr	r3, [pc, #164]	; (800a6a4 <_dtoa_r+0x5a4>)
 800a5fe:	4421      	add	r1, r4
 800a600:	9112      	str	r1, [sp, #72]	; 0x48
 800a602:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a604:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a608:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a60c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a610:	2900      	cmp	r1, #0
 800a612:	d055      	beq.n	800a6c0 <_dtoa_r+0x5c0>
 800a614:	2000      	movs	r0, #0
 800a616:	4929      	ldr	r1, [pc, #164]	; (800a6bc <_dtoa_r+0x5bc>)
 800a618:	f7f6 f888 	bl	800072c <__aeabi_ddiv>
 800a61c:	463b      	mov	r3, r7
 800a61e:	4632      	mov	r2, r6
 800a620:	f7f5 fda2 	bl	8000168 <__aeabi_dsub>
 800a624:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a628:	9f03      	ldr	r7, [sp, #12]
 800a62a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a62e:	f7f6 fa03 	bl	8000a38 <__aeabi_d2iz>
 800a632:	4604      	mov	r4, r0
 800a634:	f7f5 fee6 	bl	8000404 <__aeabi_i2d>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a640:	f7f5 fd92 	bl	8000168 <__aeabi_dsub>
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	3430      	adds	r4, #48	; 0x30
 800a64a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a64e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a652:	f807 4b01 	strb.w	r4, [r7], #1
 800a656:	f7f6 f9b1 	bl	80009bc <__aeabi_dcmplt>
 800a65a:	2800      	cmp	r0, #0
 800a65c:	d174      	bne.n	800a748 <_dtoa_r+0x648>
 800a65e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a662:	2000      	movs	r0, #0
 800a664:	4911      	ldr	r1, [pc, #68]	; (800a6ac <_dtoa_r+0x5ac>)
 800a666:	f7f5 fd7f 	bl	8000168 <__aeabi_dsub>
 800a66a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a66e:	f7f6 f9a5 	bl	80009bc <__aeabi_dcmplt>
 800a672:	2800      	cmp	r0, #0
 800a674:	f040 80b7 	bne.w	800a7e6 <_dtoa_r+0x6e6>
 800a678:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a67a:	429f      	cmp	r7, r3
 800a67c:	f43f af7a 	beq.w	800a574 <_dtoa_r+0x474>
 800a680:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a684:	2200      	movs	r2, #0
 800a686:	4b0a      	ldr	r3, [pc, #40]	; (800a6b0 <_dtoa_r+0x5b0>)
 800a688:	f7f5 ff26 	bl	80004d8 <__aeabi_dmul>
 800a68c:	2200      	movs	r2, #0
 800a68e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a692:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a696:	4b06      	ldr	r3, [pc, #24]	; (800a6b0 <_dtoa_r+0x5b0>)
 800a698:	f7f5 ff1e 	bl	80004d8 <__aeabi_dmul>
 800a69c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6a0:	e7c3      	b.n	800a62a <_dtoa_r+0x52a>
 800a6a2:	bf00      	nop
 800a6a4:	0800c678 	.word	0x0800c678
 800a6a8:	0800c650 	.word	0x0800c650
 800a6ac:	3ff00000 	.word	0x3ff00000
 800a6b0:	40240000 	.word	0x40240000
 800a6b4:	401c0000 	.word	0x401c0000
 800a6b8:	40140000 	.word	0x40140000
 800a6bc:	3fe00000 	.word	0x3fe00000
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	4639      	mov	r1, r7
 800a6c4:	f7f5 ff08 	bl	80004d8 <__aeabi_dmul>
 800a6c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a6ce:	9c03      	ldr	r4, [sp, #12]
 800a6d0:	9314      	str	r3, [sp, #80]	; 0x50
 800a6d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6d6:	f7f6 f9af 	bl	8000a38 <__aeabi_d2iz>
 800a6da:	9015      	str	r0, [sp, #84]	; 0x54
 800a6dc:	f7f5 fe92 	bl	8000404 <__aeabi_i2d>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6e8:	f7f5 fd3e 	bl	8000168 <__aeabi_dsub>
 800a6ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	3330      	adds	r3, #48	; 0x30
 800a6f2:	f804 3b01 	strb.w	r3, [r4], #1
 800a6f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6f8:	460f      	mov	r7, r1
 800a6fa:	429c      	cmp	r4, r3
 800a6fc:	f04f 0200 	mov.w	r2, #0
 800a700:	d124      	bne.n	800a74c <_dtoa_r+0x64c>
 800a702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a706:	4bb0      	ldr	r3, [pc, #704]	; (800a9c8 <_dtoa_r+0x8c8>)
 800a708:	f7f5 fd30 	bl	800016c <__adddf3>
 800a70c:	4602      	mov	r2, r0
 800a70e:	460b      	mov	r3, r1
 800a710:	4630      	mov	r0, r6
 800a712:	4639      	mov	r1, r7
 800a714:	f7f6 f970 	bl	80009f8 <__aeabi_dcmpgt>
 800a718:	2800      	cmp	r0, #0
 800a71a:	d163      	bne.n	800a7e4 <_dtoa_r+0x6e4>
 800a71c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a720:	2000      	movs	r0, #0
 800a722:	49a9      	ldr	r1, [pc, #676]	; (800a9c8 <_dtoa_r+0x8c8>)
 800a724:	f7f5 fd20 	bl	8000168 <__aeabi_dsub>
 800a728:	4602      	mov	r2, r0
 800a72a:	460b      	mov	r3, r1
 800a72c:	4630      	mov	r0, r6
 800a72e:	4639      	mov	r1, r7
 800a730:	f7f6 f944 	bl	80009bc <__aeabi_dcmplt>
 800a734:	2800      	cmp	r0, #0
 800a736:	f43f af1d 	beq.w	800a574 <_dtoa_r+0x474>
 800a73a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a73c:	1e7b      	subs	r3, r7, #1
 800a73e:	9314      	str	r3, [sp, #80]	; 0x50
 800a740:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a744:	2b30      	cmp	r3, #48	; 0x30
 800a746:	d0f8      	beq.n	800a73a <_dtoa_r+0x63a>
 800a748:	46c2      	mov	sl, r8
 800a74a:	e03b      	b.n	800a7c4 <_dtoa_r+0x6c4>
 800a74c:	4b9f      	ldr	r3, [pc, #636]	; (800a9cc <_dtoa_r+0x8cc>)
 800a74e:	f7f5 fec3 	bl	80004d8 <__aeabi_dmul>
 800a752:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a756:	e7bc      	b.n	800a6d2 <_dtoa_r+0x5d2>
 800a758:	9f03      	ldr	r7, [sp, #12]
 800a75a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a75e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a762:	4640      	mov	r0, r8
 800a764:	4649      	mov	r1, r9
 800a766:	f7f5 ffe1 	bl	800072c <__aeabi_ddiv>
 800a76a:	f7f6 f965 	bl	8000a38 <__aeabi_d2iz>
 800a76e:	4604      	mov	r4, r0
 800a770:	f7f5 fe48 	bl	8000404 <__aeabi_i2d>
 800a774:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a778:	f7f5 feae 	bl	80004d8 <__aeabi_dmul>
 800a77c:	4602      	mov	r2, r0
 800a77e:	460b      	mov	r3, r1
 800a780:	4640      	mov	r0, r8
 800a782:	4649      	mov	r1, r9
 800a784:	f7f5 fcf0 	bl	8000168 <__aeabi_dsub>
 800a788:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a78c:	f807 6b01 	strb.w	r6, [r7], #1
 800a790:	9e03      	ldr	r6, [sp, #12]
 800a792:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a796:	1bbe      	subs	r6, r7, r6
 800a798:	45b4      	cmp	ip, r6
 800a79a:	4602      	mov	r2, r0
 800a79c:	460b      	mov	r3, r1
 800a79e:	d136      	bne.n	800a80e <_dtoa_r+0x70e>
 800a7a0:	f7f5 fce4 	bl	800016c <__adddf3>
 800a7a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7a8:	4680      	mov	r8, r0
 800a7aa:	4689      	mov	r9, r1
 800a7ac:	f7f6 f924 	bl	80009f8 <__aeabi_dcmpgt>
 800a7b0:	bb58      	cbnz	r0, 800a80a <_dtoa_r+0x70a>
 800a7b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	f7f6 f8f5 	bl	80009a8 <__aeabi_dcmpeq>
 800a7be:	b108      	cbz	r0, 800a7c4 <_dtoa_r+0x6c4>
 800a7c0:	07e1      	lsls	r1, r4, #31
 800a7c2:	d422      	bmi.n	800a80a <_dtoa_r+0x70a>
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	4659      	mov	r1, fp
 800a7c8:	f000 faf0 	bl	800adac <_Bfree>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	703b      	strb	r3, [r7, #0]
 800a7d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a7d2:	f10a 0001 	add.w	r0, sl, #1
 800a7d6:	6018      	str	r0, [r3, #0]
 800a7d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	f43f acde 	beq.w	800a19c <_dtoa_r+0x9c>
 800a7e0:	601f      	str	r7, [r3, #0]
 800a7e2:	e4db      	b.n	800a19c <_dtoa_r+0x9c>
 800a7e4:	4627      	mov	r7, r4
 800a7e6:	463b      	mov	r3, r7
 800a7e8:	461f      	mov	r7, r3
 800a7ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7ee:	2a39      	cmp	r2, #57	; 0x39
 800a7f0:	d107      	bne.n	800a802 <_dtoa_r+0x702>
 800a7f2:	9a03      	ldr	r2, [sp, #12]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d1f7      	bne.n	800a7e8 <_dtoa_r+0x6e8>
 800a7f8:	2230      	movs	r2, #48	; 0x30
 800a7fa:	9903      	ldr	r1, [sp, #12]
 800a7fc:	f108 0801 	add.w	r8, r8, #1
 800a800:	700a      	strb	r2, [r1, #0]
 800a802:	781a      	ldrb	r2, [r3, #0]
 800a804:	3201      	adds	r2, #1
 800a806:	701a      	strb	r2, [r3, #0]
 800a808:	e79e      	b.n	800a748 <_dtoa_r+0x648>
 800a80a:	46d0      	mov	r8, sl
 800a80c:	e7eb      	b.n	800a7e6 <_dtoa_r+0x6e6>
 800a80e:	2200      	movs	r2, #0
 800a810:	4b6e      	ldr	r3, [pc, #440]	; (800a9cc <_dtoa_r+0x8cc>)
 800a812:	f7f5 fe61 	bl	80004d8 <__aeabi_dmul>
 800a816:	2200      	movs	r2, #0
 800a818:	2300      	movs	r3, #0
 800a81a:	4680      	mov	r8, r0
 800a81c:	4689      	mov	r9, r1
 800a81e:	f7f6 f8c3 	bl	80009a8 <__aeabi_dcmpeq>
 800a822:	2800      	cmp	r0, #0
 800a824:	d09b      	beq.n	800a75e <_dtoa_r+0x65e>
 800a826:	e7cd      	b.n	800a7c4 <_dtoa_r+0x6c4>
 800a828:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a82a:	2a00      	cmp	r2, #0
 800a82c:	f000 80d0 	beq.w	800a9d0 <_dtoa_r+0x8d0>
 800a830:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a832:	2a01      	cmp	r2, #1
 800a834:	f300 80ae 	bgt.w	800a994 <_dtoa_r+0x894>
 800a838:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a83a:	2a00      	cmp	r2, #0
 800a83c:	f000 80a6 	beq.w	800a98c <_dtoa_r+0x88c>
 800a840:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a844:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a846:	9f06      	ldr	r7, [sp, #24]
 800a848:	9a06      	ldr	r2, [sp, #24]
 800a84a:	2101      	movs	r1, #1
 800a84c:	441a      	add	r2, r3
 800a84e:	9206      	str	r2, [sp, #24]
 800a850:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a852:	4628      	mov	r0, r5
 800a854:	441a      	add	r2, r3
 800a856:	9209      	str	r2, [sp, #36]	; 0x24
 800a858:	f000 fb5e 	bl	800af18 <__i2b>
 800a85c:	4606      	mov	r6, r0
 800a85e:	2f00      	cmp	r7, #0
 800a860:	dd0c      	ble.n	800a87c <_dtoa_r+0x77c>
 800a862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a864:	2b00      	cmp	r3, #0
 800a866:	dd09      	ble.n	800a87c <_dtoa_r+0x77c>
 800a868:	42bb      	cmp	r3, r7
 800a86a:	bfa8      	it	ge
 800a86c:	463b      	movge	r3, r7
 800a86e:	9a06      	ldr	r2, [sp, #24]
 800a870:	1aff      	subs	r7, r7, r3
 800a872:	1ad2      	subs	r2, r2, r3
 800a874:	9206      	str	r2, [sp, #24]
 800a876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	9309      	str	r3, [sp, #36]	; 0x24
 800a87c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a87e:	b1f3      	cbz	r3, 800a8be <_dtoa_r+0x7be>
 800a880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a882:	2b00      	cmp	r3, #0
 800a884:	f000 80a8 	beq.w	800a9d8 <_dtoa_r+0x8d8>
 800a888:	2c00      	cmp	r4, #0
 800a88a:	dd10      	ble.n	800a8ae <_dtoa_r+0x7ae>
 800a88c:	4631      	mov	r1, r6
 800a88e:	4622      	mov	r2, r4
 800a890:	4628      	mov	r0, r5
 800a892:	f000 fbff 	bl	800b094 <__pow5mult>
 800a896:	465a      	mov	r2, fp
 800a898:	4601      	mov	r1, r0
 800a89a:	4606      	mov	r6, r0
 800a89c:	4628      	mov	r0, r5
 800a89e:	f000 fb51 	bl	800af44 <__multiply>
 800a8a2:	4680      	mov	r8, r0
 800a8a4:	4659      	mov	r1, fp
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	f000 fa80 	bl	800adac <_Bfree>
 800a8ac:	46c3      	mov	fp, r8
 800a8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8b0:	1b1a      	subs	r2, r3, r4
 800a8b2:	d004      	beq.n	800a8be <_dtoa_r+0x7be>
 800a8b4:	4659      	mov	r1, fp
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	f000 fbec 	bl	800b094 <__pow5mult>
 800a8bc:	4683      	mov	fp, r0
 800a8be:	2101      	movs	r1, #1
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	f000 fb29 	bl	800af18 <__i2b>
 800a8c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	f340 8086 	ble.w	800a9dc <_dtoa_r+0x8dc>
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	4601      	mov	r1, r0
 800a8d4:	4628      	mov	r0, r5
 800a8d6:	f000 fbdd 	bl	800b094 <__pow5mult>
 800a8da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8dc:	4604      	mov	r4, r0
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	dd7f      	ble.n	800a9e2 <_dtoa_r+0x8e2>
 800a8e2:	f04f 0800 	mov.w	r8, #0
 800a8e6:	6923      	ldr	r3, [r4, #16]
 800a8e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a8ec:	6918      	ldr	r0, [r3, #16]
 800a8ee:	f000 fac5 	bl	800ae7c <__hi0bits>
 800a8f2:	f1c0 0020 	rsb	r0, r0, #32
 800a8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f8:	4418      	add	r0, r3
 800a8fa:	f010 001f 	ands.w	r0, r0, #31
 800a8fe:	f000 8092 	beq.w	800aa26 <_dtoa_r+0x926>
 800a902:	f1c0 0320 	rsb	r3, r0, #32
 800a906:	2b04      	cmp	r3, #4
 800a908:	f340 808a 	ble.w	800aa20 <_dtoa_r+0x920>
 800a90c:	f1c0 001c 	rsb	r0, r0, #28
 800a910:	9b06      	ldr	r3, [sp, #24]
 800a912:	4407      	add	r7, r0
 800a914:	4403      	add	r3, r0
 800a916:	9306      	str	r3, [sp, #24]
 800a918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a91a:	4403      	add	r3, r0
 800a91c:	9309      	str	r3, [sp, #36]	; 0x24
 800a91e:	9b06      	ldr	r3, [sp, #24]
 800a920:	2b00      	cmp	r3, #0
 800a922:	dd05      	ble.n	800a930 <_dtoa_r+0x830>
 800a924:	4659      	mov	r1, fp
 800a926:	461a      	mov	r2, r3
 800a928:	4628      	mov	r0, r5
 800a92a:	f000 fc0d 	bl	800b148 <__lshift>
 800a92e:	4683      	mov	fp, r0
 800a930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a932:	2b00      	cmp	r3, #0
 800a934:	dd05      	ble.n	800a942 <_dtoa_r+0x842>
 800a936:	4621      	mov	r1, r4
 800a938:	461a      	mov	r2, r3
 800a93a:	4628      	mov	r0, r5
 800a93c:	f000 fc04 	bl	800b148 <__lshift>
 800a940:	4604      	mov	r4, r0
 800a942:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a944:	2b00      	cmp	r3, #0
 800a946:	d070      	beq.n	800aa2a <_dtoa_r+0x92a>
 800a948:	4621      	mov	r1, r4
 800a94a:	4658      	mov	r0, fp
 800a94c:	f000 fc6c 	bl	800b228 <__mcmp>
 800a950:	2800      	cmp	r0, #0
 800a952:	da6a      	bge.n	800aa2a <_dtoa_r+0x92a>
 800a954:	2300      	movs	r3, #0
 800a956:	4659      	mov	r1, fp
 800a958:	220a      	movs	r2, #10
 800a95a:	4628      	mov	r0, r5
 800a95c:	f000 fa48 	bl	800adf0 <__multadd>
 800a960:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a962:	4683      	mov	fp, r0
 800a964:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 8194 	beq.w	800ac96 <_dtoa_r+0xb96>
 800a96e:	4631      	mov	r1, r6
 800a970:	2300      	movs	r3, #0
 800a972:	220a      	movs	r2, #10
 800a974:	4628      	mov	r0, r5
 800a976:	f000 fa3b 	bl	800adf0 <__multadd>
 800a97a:	f1b9 0f00 	cmp.w	r9, #0
 800a97e:	4606      	mov	r6, r0
 800a980:	f300 8093 	bgt.w	800aaaa <_dtoa_r+0x9aa>
 800a984:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a986:	2b02      	cmp	r3, #2
 800a988:	dc57      	bgt.n	800aa3a <_dtoa_r+0x93a>
 800a98a:	e08e      	b.n	800aaaa <_dtoa_r+0x9aa>
 800a98c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a98e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a992:	e757      	b.n	800a844 <_dtoa_r+0x744>
 800a994:	9b08      	ldr	r3, [sp, #32]
 800a996:	1e5c      	subs	r4, r3, #1
 800a998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a99a:	42a3      	cmp	r3, r4
 800a99c:	bfb7      	itett	lt
 800a99e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a9a0:	1b1c      	subge	r4, r3, r4
 800a9a2:	1ae2      	sublt	r2, r4, r3
 800a9a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a9a6:	bfbe      	ittt	lt
 800a9a8:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a9aa:	189b      	addlt	r3, r3, r2
 800a9ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a9ae:	9b08      	ldr	r3, [sp, #32]
 800a9b0:	bfb8      	it	lt
 800a9b2:	2400      	movlt	r4, #0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	bfbb      	ittet	lt
 800a9b8:	9b06      	ldrlt	r3, [sp, #24]
 800a9ba:	9a08      	ldrlt	r2, [sp, #32]
 800a9bc:	9f06      	ldrge	r7, [sp, #24]
 800a9be:	1a9f      	sublt	r7, r3, r2
 800a9c0:	bfac      	ite	ge
 800a9c2:	9b08      	ldrge	r3, [sp, #32]
 800a9c4:	2300      	movlt	r3, #0
 800a9c6:	e73f      	b.n	800a848 <_dtoa_r+0x748>
 800a9c8:	3fe00000 	.word	0x3fe00000
 800a9cc:	40240000 	.word	0x40240000
 800a9d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a9d2:	9f06      	ldr	r7, [sp, #24]
 800a9d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a9d6:	e742      	b.n	800a85e <_dtoa_r+0x75e>
 800a9d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9da:	e76b      	b.n	800a8b4 <_dtoa_r+0x7b4>
 800a9dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	dc19      	bgt.n	800aa16 <_dtoa_r+0x916>
 800a9e2:	9b04      	ldr	r3, [sp, #16]
 800a9e4:	b9bb      	cbnz	r3, 800aa16 <_dtoa_r+0x916>
 800a9e6:	9b05      	ldr	r3, [sp, #20]
 800a9e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9ec:	b99b      	cbnz	r3, 800aa16 <_dtoa_r+0x916>
 800a9ee:	9b05      	ldr	r3, [sp, #20]
 800a9f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9f4:	0d1b      	lsrs	r3, r3, #20
 800a9f6:	051b      	lsls	r3, r3, #20
 800a9f8:	b183      	cbz	r3, 800aa1c <_dtoa_r+0x91c>
 800a9fa:	f04f 0801 	mov.w	r8, #1
 800a9fe:	9b06      	ldr	r3, [sp, #24]
 800aa00:	3301      	adds	r3, #1
 800aa02:	9306      	str	r3, [sp, #24]
 800aa04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa06:	3301      	adds	r3, #1
 800aa08:	9309      	str	r3, [sp, #36]	; 0x24
 800aa0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f47f af6a 	bne.w	800a8e6 <_dtoa_r+0x7e6>
 800aa12:	2001      	movs	r0, #1
 800aa14:	e76f      	b.n	800a8f6 <_dtoa_r+0x7f6>
 800aa16:	f04f 0800 	mov.w	r8, #0
 800aa1a:	e7f6      	b.n	800aa0a <_dtoa_r+0x90a>
 800aa1c:	4698      	mov	r8, r3
 800aa1e:	e7f4      	b.n	800aa0a <_dtoa_r+0x90a>
 800aa20:	f43f af7d 	beq.w	800a91e <_dtoa_r+0x81e>
 800aa24:	4618      	mov	r0, r3
 800aa26:	301c      	adds	r0, #28
 800aa28:	e772      	b.n	800a910 <_dtoa_r+0x810>
 800aa2a:	9b08      	ldr	r3, [sp, #32]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	dc36      	bgt.n	800aa9e <_dtoa_r+0x99e>
 800aa30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa32:	2b02      	cmp	r3, #2
 800aa34:	dd33      	ble.n	800aa9e <_dtoa_r+0x99e>
 800aa36:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa3a:	f1b9 0f00 	cmp.w	r9, #0
 800aa3e:	d10d      	bne.n	800aa5c <_dtoa_r+0x95c>
 800aa40:	4621      	mov	r1, r4
 800aa42:	464b      	mov	r3, r9
 800aa44:	2205      	movs	r2, #5
 800aa46:	4628      	mov	r0, r5
 800aa48:	f000 f9d2 	bl	800adf0 <__multadd>
 800aa4c:	4601      	mov	r1, r0
 800aa4e:	4604      	mov	r4, r0
 800aa50:	4658      	mov	r0, fp
 800aa52:	f000 fbe9 	bl	800b228 <__mcmp>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f73f adb8 	bgt.w	800a5cc <_dtoa_r+0x4cc>
 800aa5c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aa5e:	9f03      	ldr	r7, [sp, #12]
 800aa60:	ea6f 0a03 	mvn.w	sl, r3
 800aa64:	f04f 0800 	mov.w	r8, #0
 800aa68:	4621      	mov	r1, r4
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f000 f99e 	bl	800adac <_Bfree>
 800aa70:	2e00      	cmp	r6, #0
 800aa72:	f43f aea7 	beq.w	800a7c4 <_dtoa_r+0x6c4>
 800aa76:	f1b8 0f00 	cmp.w	r8, #0
 800aa7a:	d005      	beq.n	800aa88 <_dtoa_r+0x988>
 800aa7c:	45b0      	cmp	r8, r6
 800aa7e:	d003      	beq.n	800aa88 <_dtoa_r+0x988>
 800aa80:	4641      	mov	r1, r8
 800aa82:	4628      	mov	r0, r5
 800aa84:	f000 f992 	bl	800adac <_Bfree>
 800aa88:	4631      	mov	r1, r6
 800aa8a:	4628      	mov	r0, r5
 800aa8c:	f000 f98e 	bl	800adac <_Bfree>
 800aa90:	e698      	b.n	800a7c4 <_dtoa_r+0x6c4>
 800aa92:	2400      	movs	r4, #0
 800aa94:	4626      	mov	r6, r4
 800aa96:	e7e1      	b.n	800aa5c <_dtoa_r+0x95c>
 800aa98:	46c2      	mov	sl, r8
 800aa9a:	4626      	mov	r6, r4
 800aa9c:	e596      	b.n	800a5cc <_dtoa_r+0x4cc>
 800aa9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaa0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f000 80fd 	beq.w	800aca4 <_dtoa_r+0xba4>
 800aaaa:	2f00      	cmp	r7, #0
 800aaac:	dd05      	ble.n	800aaba <_dtoa_r+0x9ba>
 800aaae:	4631      	mov	r1, r6
 800aab0:	463a      	mov	r2, r7
 800aab2:	4628      	mov	r0, r5
 800aab4:	f000 fb48 	bl	800b148 <__lshift>
 800aab8:	4606      	mov	r6, r0
 800aaba:	f1b8 0f00 	cmp.w	r8, #0
 800aabe:	d05c      	beq.n	800ab7a <_dtoa_r+0xa7a>
 800aac0:	4628      	mov	r0, r5
 800aac2:	6871      	ldr	r1, [r6, #4]
 800aac4:	f000 f932 	bl	800ad2c <_Balloc>
 800aac8:	4607      	mov	r7, r0
 800aaca:	b928      	cbnz	r0, 800aad8 <_dtoa_r+0x9d8>
 800aacc:	4602      	mov	r2, r0
 800aace:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aad2:	4b7f      	ldr	r3, [pc, #508]	; (800acd0 <_dtoa_r+0xbd0>)
 800aad4:	f7ff bb28 	b.w	800a128 <_dtoa_r+0x28>
 800aad8:	6932      	ldr	r2, [r6, #16]
 800aada:	f106 010c 	add.w	r1, r6, #12
 800aade:	3202      	adds	r2, #2
 800aae0:	0092      	lsls	r2, r2, #2
 800aae2:	300c      	adds	r0, #12
 800aae4:	f000 f914 	bl	800ad10 <memcpy>
 800aae8:	2201      	movs	r2, #1
 800aaea:	4639      	mov	r1, r7
 800aaec:	4628      	mov	r0, r5
 800aaee:	f000 fb2b 	bl	800b148 <__lshift>
 800aaf2:	46b0      	mov	r8, r6
 800aaf4:	4606      	mov	r6, r0
 800aaf6:	9b03      	ldr	r3, [sp, #12]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	9308      	str	r3, [sp, #32]
 800aafc:	9b03      	ldr	r3, [sp, #12]
 800aafe:	444b      	add	r3, r9
 800ab00:	930a      	str	r3, [sp, #40]	; 0x28
 800ab02:	9b04      	ldr	r3, [sp, #16]
 800ab04:	f003 0301 	and.w	r3, r3, #1
 800ab08:	9309      	str	r3, [sp, #36]	; 0x24
 800ab0a:	9b08      	ldr	r3, [sp, #32]
 800ab0c:	4621      	mov	r1, r4
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	4658      	mov	r0, fp
 800ab12:	9304      	str	r3, [sp, #16]
 800ab14:	f7ff fa66 	bl	8009fe4 <quorem>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	4641      	mov	r1, r8
 800ab1c:	3330      	adds	r3, #48	; 0x30
 800ab1e:	9006      	str	r0, [sp, #24]
 800ab20:	4658      	mov	r0, fp
 800ab22:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab24:	f000 fb80 	bl	800b228 <__mcmp>
 800ab28:	4632      	mov	r2, r6
 800ab2a:	4681      	mov	r9, r0
 800ab2c:	4621      	mov	r1, r4
 800ab2e:	4628      	mov	r0, r5
 800ab30:	f000 fb96 	bl	800b260 <__mdiff>
 800ab34:	68c2      	ldr	r2, [r0, #12]
 800ab36:	4607      	mov	r7, r0
 800ab38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab3a:	bb02      	cbnz	r2, 800ab7e <_dtoa_r+0xa7e>
 800ab3c:	4601      	mov	r1, r0
 800ab3e:	4658      	mov	r0, fp
 800ab40:	f000 fb72 	bl	800b228 <__mcmp>
 800ab44:	4602      	mov	r2, r0
 800ab46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab48:	4639      	mov	r1, r7
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800ab50:	f000 f92c 	bl	800adac <_Bfree>
 800ab54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab58:	9f08      	ldr	r7, [sp, #32]
 800ab5a:	ea43 0102 	orr.w	r1, r3, r2
 800ab5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab60:	430b      	orrs	r3, r1
 800ab62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab64:	d10d      	bne.n	800ab82 <_dtoa_r+0xa82>
 800ab66:	2b39      	cmp	r3, #57	; 0x39
 800ab68:	d029      	beq.n	800abbe <_dtoa_r+0xabe>
 800ab6a:	f1b9 0f00 	cmp.w	r9, #0
 800ab6e:	dd01      	ble.n	800ab74 <_dtoa_r+0xa74>
 800ab70:	9b06      	ldr	r3, [sp, #24]
 800ab72:	3331      	adds	r3, #49	; 0x31
 800ab74:	9a04      	ldr	r2, [sp, #16]
 800ab76:	7013      	strb	r3, [r2, #0]
 800ab78:	e776      	b.n	800aa68 <_dtoa_r+0x968>
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	e7b9      	b.n	800aaf2 <_dtoa_r+0x9f2>
 800ab7e:	2201      	movs	r2, #1
 800ab80:	e7e2      	b.n	800ab48 <_dtoa_r+0xa48>
 800ab82:	f1b9 0f00 	cmp.w	r9, #0
 800ab86:	db06      	blt.n	800ab96 <_dtoa_r+0xa96>
 800ab88:	9922      	ldr	r1, [sp, #136]	; 0x88
 800ab8a:	ea41 0909 	orr.w	r9, r1, r9
 800ab8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab90:	ea59 0101 	orrs.w	r1, r9, r1
 800ab94:	d120      	bne.n	800abd8 <_dtoa_r+0xad8>
 800ab96:	2a00      	cmp	r2, #0
 800ab98:	ddec      	ble.n	800ab74 <_dtoa_r+0xa74>
 800ab9a:	4659      	mov	r1, fp
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	4628      	mov	r0, r5
 800aba0:	9308      	str	r3, [sp, #32]
 800aba2:	f000 fad1 	bl	800b148 <__lshift>
 800aba6:	4621      	mov	r1, r4
 800aba8:	4683      	mov	fp, r0
 800abaa:	f000 fb3d 	bl	800b228 <__mcmp>
 800abae:	2800      	cmp	r0, #0
 800abb0:	9b08      	ldr	r3, [sp, #32]
 800abb2:	dc02      	bgt.n	800abba <_dtoa_r+0xaba>
 800abb4:	d1de      	bne.n	800ab74 <_dtoa_r+0xa74>
 800abb6:	07da      	lsls	r2, r3, #31
 800abb8:	d5dc      	bpl.n	800ab74 <_dtoa_r+0xa74>
 800abba:	2b39      	cmp	r3, #57	; 0x39
 800abbc:	d1d8      	bne.n	800ab70 <_dtoa_r+0xa70>
 800abbe:	2339      	movs	r3, #57	; 0x39
 800abc0:	9a04      	ldr	r2, [sp, #16]
 800abc2:	7013      	strb	r3, [r2, #0]
 800abc4:	463b      	mov	r3, r7
 800abc6:	461f      	mov	r7, r3
 800abc8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800abcc:	3b01      	subs	r3, #1
 800abce:	2a39      	cmp	r2, #57	; 0x39
 800abd0:	d050      	beq.n	800ac74 <_dtoa_r+0xb74>
 800abd2:	3201      	adds	r2, #1
 800abd4:	701a      	strb	r2, [r3, #0]
 800abd6:	e747      	b.n	800aa68 <_dtoa_r+0x968>
 800abd8:	2a00      	cmp	r2, #0
 800abda:	dd03      	ble.n	800abe4 <_dtoa_r+0xae4>
 800abdc:	2b39      	cmp	r3, #57	; 0x39
 800abde:	d0ee      	beq.n	800abbe <_dtoa_r+0xabe>
 800abe0:	3301      	adds	r3, #1
 800abe2:	e7c7      	b.n	800ab74 <_dtoa_r+0xa74>
 800abe4:	9a08      	ldr	r2, [sp, #32]
 800abe6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800abe8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800abec:	428a      	cmp	r2, r1
 800abee:	d02a      	beq.n	800ac46 <_dtoa_r+0xb46>
 800abf0:	4659      	mov	r1, fp
 800abf2:	2300      	movs	r3, #0
 800abf4:	220a      	movs	r2, #10
 800abf6:	4628      	mov	r0, r5
 800abf8:	f000 f8fa 	bl	800adf0 <__multadd>
 800abfc:	45b0      	cmp	r8, r6
 800abfe:	4683      	mov	fp, r0
 800ac00:	f04f 0300 	mov.w	r3, #0
 800ac04:	f04f 020a 	mov.w	r2, #10
 800ac08:	4641      	mov	r1, r8
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	d107      	bne.n	800ac1e <_dtoa_r+0xb1e>
 800ac0e:	f000 f8ef 	bl	800adf0 <__multadd>
 800ac12:	4680      	mov	r8, r0
 800ac14:	4606      	mov	r6, r0
 800ac16:	9b08      	ldr	r3, [sp, #32]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	9308      	str	r3, [sp, #32]
 800ac1c:	e775      	b.n	800ab0a <_dtoa_r+0xa0a>
 800ac1e:	f000 f8e7 	bl	800adf0 <__multadd>
 800ac22:	4631      	mov	r1, r6
 800ac24:	4680      	mov	r8, r0
 800ac26:	2300      	movs	r3, #0
 800ac28:	220a      	movs	r2, #10
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	f000 f8e0 	bl	800adf0 <__multadd>
 800ac30:	4606      	mov	r6, r0
 800ac32:	e7f0      	b.n	800ac16 <_dtoa_r+0xb16>
 800ac34:	f1b9 0f00 	cmp.w	r9, #0
 800ac38:	bfcc      	ite	gt
 800ac3a:	464f      	movgt	r7, r9
 800ac3c:	2701      	movle	r7, #1
 800ac3e:	f04f 0800 	mov.w	r8, #0
 800ac42:	9a03      	ldr	r2, [sp, #12]
 800ac44:	4417      	add	r7, r2
 800ac46:	4659      	mov	r1, fp
 800ac48:	2201      	movs	r2, #1
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	9308      	str	r3, [sp, #32]
 800ac4e:	f000 fa7b 	bl	800b148 <__lshift>
 800ac52:	4621      	mov	r1, r4
 800ac54:	4683      	mov	fp, r0
 800ac56:	f000 fae7 	bl	800b228 <__mcmp>
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	dcb2      	bgt.n	800abc4 <_dtoa_r+0xac4>
 800ac5e:	d102      	bne.n	800ac66 <_dtoa_r+0xb66>
 800ac60:	9b08      	ldr	r3, [sp, #32]
 800ac62:	07db      	lsls	r3, r3, #31
 800ac64:	d4ae      	bmi.n	800abc4 <_dtoa_r+0xac4>
 800ac66:	463b      	mov	r3, r7
 800ac68:	461f      	mov	r7, r3
 800ac6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac6e:	2a30      	cmp	r2, #48	; 0x30
 800ac70:	d0fa      	beq.n	800ac68 <_dtoa_r+0xb68>
 800ac72:	e6f9      	b.n	800aa68 <_dtoa_r+0x968>
 800ac74:	9a03      	ldr	r2, [sp, #12]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d1a5      	bne.n	800abc6 <_dtoa_r+0xac6>
 800ac7a:	2331      	movs	r3, #49	; 0x31
 800ac7c:	f10a 0a01 	add.w	sl, sl, #1
 800ac80:	e779      	b.n	800ab76 <_dtoa_r+0xa76>
 800ac82:	4b14      	ldr	r3, [pc, #80]	; (800acd4 <_dtoa_r+0xbd4>)
 800ac84:	f7ff baa8 	b.w	800a1d8 <_dtoa_r+0xd8>
 800ac88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f47f aa81 	bne.w	800a192 <_dtoa_r+0x92>
 800ac90:	4b11      	ldr	r3, [pc, #68]	; (800acd8 <_dtoa_r+0xbd8>)
 800ac92:	f7ff baa1 	b.w	800a1d8 <_dtoa_r+0xd8>
 800ac96:	f1b9 0f00 	cmp.w	r9, #0
 800ac9a:	dc03      	bgt.n	800aca4 <_dtoa_r+0xba4>
 800ac9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	f73f aecb 	bgt.w	800aa3a <_dtoa_r+0x93a>
 800aca4:	9f03      	ldr	r7, [sp, #12]
 800aca6:	4621      	mov	r1, r4
 800aca8:	4658      	mov	r0, fp
 800acaa:	f7ff f99b 	bl	8009fe4 <quorem>
 800acae:	9a03      	ldr	r2, [sp, #12]
 800acb0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800acb4:	f807 3b01 	strb.w	r3, [r7], #1
 800acb8:	1aba      	subs	r2, r7, r2
 800acba:	4591      	cmp	r9, r2
 800acbc:	ddba      	ble.n	800ac34 <_dtoa_r+0xb34>
 800acbe:	4659      	mov	r1, fp
 800acc0:	2300      	movs	r3, #0
 800acc2:	220a      	movs	r2, #10
 800acc4:	4628      	mov	r0, r5
 800acc6:	f000 f893 	bl	800adf0 <__multadd>
 800acca:	4683      	mov	fp, r0
 800accc:	e7eb      	b.n	800aca6 <_dtoa_r+0xba6>
 800acce:	bf00      	nop
 800acd0:	0800c5e3 	.word	0x0800c5e3
 800acd4:	0800c540 	.word	0x0800c540
 800acd8:	0800c564 	.word	0x0800c564

0800acdc <_localeconv_r>:
 800acdc:	4800      	ldr	r0, [pc, #0]	; (800ace0 <_localeconv_r+0x4>)
 800acde:	4770      	bx	lr
 800ace0:	200002d0 	.word	0x200002d0

0800ace4 <malloc>:
 800ace4:	4b02      	ldr	r3, [pc, #8]	; (800acf0 <malloc+0xc>)
 800ace6:	4601      	mov	r1, r0
 800ace8:	6818      	ldr	r0, [r3, #0]
 800acea:	f000 bc1d 	b.w	800b528 <_malloc_r>
 800acee:	bf00      	nop
 800acf0:	2000017c 	.word	0x2000017c

0800acf4 <memchr>:
 800acf4:	4603      	mov	r3, r0
 800acf6:	b510      	push	{r4, lr}
 800acf8:	b2c9      	uxtb	r1, r1
 800acfa:	4402      	add	r2, r0
 800acfc:	4293      	cmp	r3, r2
 800acfe:	4618      	mov	r0, r3
 800ad00:	d101      	bne.n	800ad06 <memchr+0x12>
 800ad02:	2000      	movs	r0, #0
 800ad04:	e003      	b.n	800ad0e <memchr+0x1a>
 800ad06:	7804      	ldrb	r4, [r0, #0]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	428c      	cmp	r4, r1
 800ad0c:	d1f6      	bne.n	800acfc <memchr+0x8>
 800ad0e:	bd10      	pop	{r4, pc}

0800ad10 <memcpy>:
 800ad10:	440a      	add	r2, r1
 800ad12:	4291      	cmp	r1, r2
 800ad14:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad18:	d100      	bne.n	800ad1c <memcpy+0xc>
 800ad1a:	4770      	bx	lr
 800ad1c:	b510      	push	{r4, lr}
 800ad1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad22:	4291      	cmp	r1, r2
 800ad24:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad28:	d1f9      	bne.n	800ad1e <memcpy+0xe>
 800ad2a:	bd10      	pop	{r4, pc}

0800ad2c <_Balloc>:
 800ad2c:	b570      	push	{r4, r5, r6, lr}
 800ad2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad30:	4604      	mov	r4, r0
 800ad32:	460d      	mov	r5, r1
 800ad34:	b976      	cbnz	r6, 800ad54 <_Balloc+0x28>
 800ad36:	2010      	movs	r0, #16
 800ad38:	f7ff ffd4 	bl	800ace4 <malloc>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	6260      	str	r0, [r4, #36]	; 0x24
 800ad40:	b920      	cbnz	r0, 800ad4c <_Balloc+0x20>
 800ad42:	2166      	movs	r1, #102	; 0x66
 800ad44:	4b17      	ldr	r3, [pc, #92]	; (800ada4 <_Balloc+0x78>)
 800ad46:	4818      	ldr	r0, [pc, #96]	; (800ada8 <_Balloc+0x7c>)
 800ad48:	f000 fdce 	bl	800b8e8 <__assert_func>
 800ad4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad50:	6006      	str	r6, [r0, #0]
 800ad52:	60c6      	str	r6, [r0, #12]
 800ad54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ad56:	68f3      	ldr	r3, [r6, #12]
 800ad58:	b183      	cbz	r3, 800ad7c <_Balloc+0x50>
 800ad5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad62:	b9b8      	cbnz	r0, 800ad94 <_Balloc+0x68>
 800ad64:	2101      	movs	r1, #1
 800ad66:	fa01 f605 	lsl.w	r6, r1, r5
 800ad6a:	1d72      	adds	r2, r6, #5
 800ad6c:	4620      	mov	r0, r4
 800ad6e:	0092      	lsls	r2, r2, #2
 800ad70:	f000 fb5e 	bl	800b430 <_calloc_r>
 800ad74:	b160      	cbz	r0, 800ad90 <_Balloc+0x64>
 800ad76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad7a:	e00e      	b.n	800ad9a <_Balloc+0x6e>
 800ad7c:	2221      	movs	r2, #33	; 0x21
 800ad7e:	2104      	movs	r1, #4
 800ad80:	4620      	mov	r0, r4
 800ad82:	f000 fb55 	bl	800b430 <_calloc_r>
 800ad86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad88:	60f0      	str	r0, [r6, #12]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1e4      	bne.n	800ad5a <_Balloc+0x2e>
 800ad90:	2000      	movs	r0, #0
 800ad92:	bd70      	pop	{r4, r5, r6, pc}
 800ad94:	6802      	ldr	r2, [r0, #0]
 800ad96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ada0:	e7f7      	b.n	800ad92 <_Balloc+0x66>
 800ada2:	bf00      	nop
 800ada4:	0800c571 	.word	0x0800c571
 800ada8:	0800c5f4 	.word	0x0800c5f4

0800adac <_Bfree>:
 800adac:	b570      	push	{r4, r5, r6, lr}
 800adae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800adb0:	4605      	mov	r5, r0
 800adb2:	460c      	mov	r4, r1
 800adb4:	b976      	cbnz	r6, 800add4 <_Bfree+0x28>
 800adb6:	2010      	movs	r0, #16
 800adb8:	f7ff ff94 	bl	800ace4 <malloc>
 800adbc:	4602      	mov	r2, r0
 800adbe:	6268      	str	r0, [r5, #36]	; 0x24
 800adc0:	b920      	cbnz	r0, 800adcc <_Bfree+0x20>
 800adc2:	218a      	movs	r1, #138	; 0x8a
 800adc4:	4b08      	ldr	r3, [pc, #32]	; (800ade8 <_Bfree+0x3c>)
 800adc6:	4809      	ldr	r0, [pc, #36]	; (800adec <_Bfree+0x40>)
 800adc8:	f000 fd8e 	bl	800b8e8 <__assert_func>
 800adcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800add0:	6006      	str	r6, [r0, #0]
 800add2:	60c6      	str	r6, [r0, #12]
 800add4:	b13c      	cbz	r4, 800ade6 <_Bfree+0x3a>
 800add6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800add8:	6862      	ldr	r2, [r4, #4]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ade0:	6021      	str	r1, [r4, #0]
 800ade2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ade6:	bd70      	pop	{r4, r5, r6, pc}
 800ade8:	0800c571 	.word	0x0800c571
 800adec:	0800c5f4 	.word	0x0800c5f4

0800adf0 <__multadd>:
 800adf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf4:	4607      	mov	r7, r0
 800adf6:	460c      	mov	r4, r1
 800adf8:	461e      	mov	r6, r3
 800adfa:	2000      	movs	r0, #0
 800adfc:	690d      	ldr	r5, [r1, #16]
 800adfe:	f101 0c14 	add.w	ip, r1, #20
 800ae02:	f8dc 3000 	ldr.w	r3, [ip]
 800ae06:	3001      	adds	r0, #1
 800ae08:	b299      	uxth	r1, r3
 800ae0a:	fb02 6101 	mla	r1, r2, r1, r6
 800ae0e:	0c1e      	lsrs	r6, r3, #16
 800ae10:	0c0b      	lsrs	r3, r1, #16
 800ae12:	fb02 3306 	mla	r3, r2, r6, r3
 800ae16:	b289      	uxth	r1, r1
 800ae18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae1c:	4285      	cmp	r5, r0
 800ae1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae22:	f84c 1b04 	str.w	r1, [ip], #4
 800ae26:	dcec      	bgt.n	800ae02 <__multadd+0x12>
 800ae28:	b30e      	cbz	r6, 800ae6e <__multadd+0x7e>
 800ae2a:	68a3      	ldr	r3, [r4, #8]
 800ae2c:	42ab      	cmp	r3, r5
 800ae2e:	dc19      	bgt.n	800ae64 <__multadd+0x74>
 800ae30:	6861      	ldr	r1, [r4, #4]
 800ae32:	4638      	mov	r0, r7
 800ae34:	3101      	adds	r1, #1
 800ae36:	f7ff ff79 	bl	800ad2c <_Balloc>
 800ae3a:	4680      	mov	r8, r0
 800ae3c:	b928      	cbnz	r0, 800ae4a <__multadd+0x5a>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	21b5      	movs	r1, #181	; 0xb5
 800ae42:	4b0c      	ldr	r3, [pc, #48]	; (800ae74 <__multadd+0x84>)
 800ae44:	480c      	ldr	r0, [pc, #48]	; (800ae78 <__multadd+0x88>)
 800ae46:	f000 fd4f 	bl	800b8e8 <__assert_func>
 800ae4a:	6922      	ldr	r2, [r4, #16]
 800ae4c:	f104 010c 	add.w	r1, r4, #12
 800ae50:	3202      	adds	r2, #2
 800ae52:	0092      	lsls	r2, r2, #2
 800ae54:	300c      	adds	r0, #12
 800ae56:	f7ff ff5b 	bl	800ad10 <memcpy>
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4638      	mov	r0, r7
 800ae5e:	f7ff ffa5 	bl	800adac <_Bfree>
 800ae62:	4644      	mov	r4, r8
 800ae64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae68:	3501      	adds	r5, #1
 800ae6a:	615e      	str	r6, [r3, #20]
 800ae6c:	6125      	str	r5, [r4, #16]
 800ae6e:	4620      	mov	r0, r4
 800ae70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae74:	0800c5e3 	.word	0x0800c5e3
 800ae78:	0800c5f4 	.word	0x0800c5f4

0800ae7c <__hi0bits>:
 800ae7c:	0c02      	lsrs	r2, r0, #16
 800ae7e:	0412      	lsls	r2, r2, #16
 800ae80:	4603      	mov	r3, r0
 800ae82:	b9ca      	cbnz	r2, 800aeb8 <__hi0bits+0x3c>
 800ae84:	0403      	lsls	r3, r0, #16
 800ae86:	2010      	movs	r0, #16
 800ae88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ae8c:	bf04      	itt	eq
 800ae8e:	021b      	lsleq	r3, r3, #8
 800ae90:	3008      	addeq	r0, #8
 800ae92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ae96:	bf04      	itt	eq
 800ae98:	011b      	lsleq	r3, r3, #4
 800ae9a:	3004      	addeq	r0, #4
 800ae9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aea0:	bf04      	itt	eq
 800aea2:	009b      	lsleq	r3, r3, #2
 800aea4:	3002      	addeq	r0, #2
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	db05      	blt.n	800aeb6 <__hi0bits+0x3a>
 800aeaa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800aeae:	f100 0001 	add.w	r0, r0, #1
 800aeb2:	bf08      	it	eq
 800aeb4:	2020      	moveq	r0, #32
 800aeb6:	4770      	bx	lr
 800aeb8:	2000      	movs	r0, #0
 800aeba:	e7e5      	b.n	800ae88 <__hi0bits+0xc>

0800aebc <__lo0bits>:
 800aebc:	6803      	ldr	r3, [r0, #0]
 800aebe:	4602      	mov	r2, r0
 800aec0:	f013 0007 	ands.w	r0, r3, #7
 800aec4:	d00b      	beq.n	800aede <__lo0bits+0x22>
 800aec6:	07d9      	lsls	r1, r3, #31
 800aec8:	d421      	bmi.n	800af0e <__lo0bits+0x52>
 800aeca:	0798      	lsls	r0, r3, #30
 800aecc:	bf49      	itett	mi
 800aece:	085b      	lsrmi	r3, r3, #1
 800aed0:	089b      	lsrpl	r3, r3, #2
 800aed2:	2001      	movmi	r0, #1
 800aed4:	6013      	strmi	r3, [r2, #0]
 800aed6:	bf5c      	itt	pl
 800aed8:	2002      	movpl	r0, #2
 800aeda:	6013      	strpl	r3, [r2, #0]
 800aedc:	4770      	bx	lr
 800aede:	b299      	uxth	r1, r3
 800aee0:	b909      	cbnz	r1, 800aee6 <__lo0bits+0x2a>
 800aee2:	2010      	movs	r0, #16
 800aee4:	0c1b      	lsrs	r3, r3, #16
 800aee6:	b2d9      	uxtb	r1, r3
 800aee8:	b909      	cbnz	r1, 800aeee <__lo0bits+0x32>
 800aeea:	3008      	adds	r0, #8
 800aeec:	0a1b      	lsrs	r3, r3, #8
 800aeee:	0719      	lsls	r1, r3, #28
 800aef0:	bf04      	itt	eq
 800aef2:	091b      	lsreq	r3, r3, #4
 800aef4:	3004      	addeq	r0, #4
 800aef6:	0799      	lsls	r1, r3, #30
 800aef8:	bf04      	itt	eq
 800aefa:	089b      	lsreq	r3, r3, #2
 800aefc:	3002      	addeq	r0, #2
 800aefe:	07d9      	lsls	r1, r3, #31
 800af00:	d403      	bmi.n	800af0a <__lo0bits+0x4e>
 800af02:	085b      	lsrs	r3, r3, #1
 800af04:	f100 0001 	add.w	r0, r0, #1
 800af08:	d003      	beq.n	800af12 <__lo0bits+0x56>
 800af0a:	6013      	str	r3, [r2, #0]
 800af0c:	4770      	bx	lr
 800af0e:	2000      	movs	r0, #0
 800af10:	4770      	bx	lr
 800af12:	2020      	movs	r0, #32
 800af14:	4770      	bx	lr
	...

0800af18 <__i2b>:
 800af18:	b510      	push	{r4, lr}
 800af1a:	460c      	mov	r4, r1
 800af1c:	2101      	movs	r1, #1
 800af1e:	f7ff ff05 	bl	800ad2c <_Balloc>
 800af22:	4602      	mov	r2, r0
 800af24:	b928      	cbnz	r0, 800af32 <__i2b+0x1a>
 800af26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800af2a:	4b04      	ldr	r3, [pc, #16]	; (800af3c <__i2b+0x24>)
 800af2c:	4804      	ldr	r0, [pc, #16]	; (800af40 <__i2b+0x28>)
 800af2e:	f000 fcdb 	bl	800b8e8 <__assert_func>
 800af32:	2301      	movs	r3, #1
 800af34:	6144      	str	r4, [r0, #20]
 800af36:	6103      	str	r3, [r0, #16]
 800af38:	bd10      	pop	{r4, pc}
 800af3a:	bf00      	nop
 800af3c:	0800c5e3 	.word	0x0800c5e3
 800af40:	0800c5f4 	.word	0x0800c5f4

0800af44 <__multiply>:
 800af44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af48:	4691      	mov	r9, r2
 800af4a:	690a      	ldr	r2, [r1, #16]
 800af4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af50:	460c      	mov	r4, r1
 800af52:	429a      	cmp	r2, r3
 800af54:	bfbe      	ittt	lt
 800af56:	460b      	movlt	r3, r1
 800af58:	464c      	movlt	r4, r9
 800af5a:	4699      	movlt	r9, r3
 800af5c:	6927      	ldr	r7, [r4, #16]
 800af5e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af62:	68a3      	ldr	r3, [r4, #8]
 800af64:	6861      	ldr	r1, [r4, #4]
 800af66:	eb07 060a 	add.w	r6, r7, sl
 800af6a:	42b3      	cmp	r3, r6
 800af6c:	b085      	sub	sp, #20
 800af6e:	bfb8      	it	lt
 800af70:	3101      	addlt	r1, #1
 800af72:	f7ff fedb 	bl	800ad2c <_Balloc>
 800af76:	b930      	cbnz	r0, 800af86 <__multiply+0x42>
 800af78:	4602      	mov	r2, r0
 800af7a:	f240 115d 	movw	r1, #349	; 0x15d
 800af7e:	4b43      	ldr	r3, [pc, #268]	; (800b08c <__multiply+0x148>)
 800af80:	4843      	ldr	r0, [pc, #268]	; (800b090 <__multiply+0x14c>)
 800af82:	f000 fcb1 	bl	800b8e8 <__assert_func>
 800af86:	f100 0514 	add.w	r5, r0, #20
 800af8a:	462b      	mov	r3, r5
 800af8c:	2200      	movs	r2, #0
 800af8e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800af92:	4543      	cmp	r3, r8
 800af94:	d321      	bcc.n	800afda <__multiply+0x96>
 800af96:	f104 0314 	add.w	r3, r4, #20
 800af9a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800af9e:	f109 0314 	add.w	r3, r9, #20
 800afa2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800afa6:	9202      	str	r2, [sp, #8]
 800afa8:	1b3a      	subs	r2, r7, r4
 800afaa:	3a15      	subs	r2, #21
 800afac:	f022 0203 	bic.w	r2, r2, #3
 800afb0:	3204      	adds	r2, #4
 800afb2:	f104 0115 	add.w	r1, r4, #21
 800afb6:	428f      	cmp	r7, r1
 800afb8:	bf38      	it	cc
 800afba:	2204      	movcc	r2, #4
 800afbc:	9201      	str	r2, [sp, #4]
 800afbe:	9a02      	ldr	r2, [sp, #8]
 800afc0:	9303      	str	r3, [sp, #12]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d80c      	bhi.n	800afe0 <__multiply+0x9c>
 800afc6:	2e00      	cmp	r6, #0
 800afc8:	dd03      	ble.n	800afd2 <__multiply+0x8e>
 800afca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d059      	beq.n	800b086 <__multiply+0x142>
 800afd2:	6106      	str	r6, [r0, #16]
 800afd4:	b005      	add	sp, #20
 800afd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afda:	f843 2b04 	str.w	r2, [r3], #4
 800afde:	e7d8      	b.n	800af92 <__multiply+0x4e>
 800afe0:	f8b3 a000 	ldrh.w	sl, [r3]
 800afe4:	f1ba 0f00 	cmp.w	sl, #0
 800afe8:	d023      	beq.n	800b032 <__multiply+0xee>
 800afea:	46a9      	mov	r9, r5
 800afec:	f04f 0c00 	mov.w	ip, #0
 800aff0:	f104 0e14 	add.w	lr, r4, #20
 800aff4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aff8:	f8d9 1000 	ldr.w	r1, [r9]
 800affc:	fa1f fb82 	uxth.w	fp, r2
 800b000:	b289      	uxth	r1, r1
 800b002:	fb0a 110b 	mla	r1, sl, fp, r1
 800b006:	4461      	add	r1, ip
 800b008:	f8d9 c000 	ldr.w	ip, [r9]
 800b00c:	0c12      	lsrs	r2, r2, #16
 800b00e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b012:	fb0a c202 	mla	r2, sl, r2, ip
 800b016:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b01a:	b289      	uxth	r1, r1
 800b01c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b020:	4577      	cmp	r7, lr
 800b022:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b026:	f849 1b04 	str.w	r1, [r9], #4
 800b02a:	d8e3      	bhi.n	800aff4 <__multiply+0xb0>
 800b02c:	9a01      	ldr	r2, [sp, #4]
 800b02e:	f845 c002 	str.w	ip, [r5, r2]
 800b032:	9a03      	ldr	r2, [sp, #12]
 800b034:	3304      	adds	r3, #4
 800b036:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b03a:	f1b9 0f00 	cmp.w	r9, #0
 800b03e:	d020      	beq.n	800b082 <__multiply+0x13e>
 800b040:	46ae      	mov	lr, r5
 800b042:	f04f 0a00 	mov.w	sl, #0
 800b046:	6829      	ldr	r1, [r5, #0]
 800b048:	f104 0c14 	add.w	ip, r4, #20
 800b04c:	f8bc b000 	ldrh.w	fp, [ip]
 800b050:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b054:	b289      	uxth	r1, r1
 800b056:	fb09 220b 	mla	r2, r9, fp, r2
 800b05a:	4492      	add	sl, r2
 800b05c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b060:	f84e 1b04 	str.w	r1, [lr], #4
 800b064:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b068:	f8be 1000 	ldrh.w	r1, [lr]
 800b06c:	0c12      	lsrs	r2, r2, #16
 800b06e:	fb09 1102 	mla	r1, r9, r2, r1
 800b072:	4567      	cmp	r7, ip
 800b074:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b078:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b07c:	d8e6      	bhi.n	800b04c <__multiply+0x108>
 800b07e:	9a01      	ldr	r2, [sp, #4]
 800b080:	50a9      	str	r1, [r5, r2]
 800b082:	3504      	adds	r5, #4
 800b084:	e79b      	b.n	800afbe <__multiply+0x7a>
 800b086:	3e01      	subs	r6, #1
 800b088:	e79d      	b.n	800afc6 <__multiply+0x82>
 800b08a:	bf00      	nop
 800b08c:	0800c5e3 	.word	0x0800c5e3
 800b090:	0800c5f4 	.word	0x0800c5f4

0800b094 <__pow5mult>:
 800b094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b098:	4615      	mov	r5, r2
 800b09a:	f012 0203 	ands.w	r2, r2, #3
 800b09e:	4606      	mov	r6, r0
 800b0a0:	460f      	mov	r7, r1
 800b0a2:	d007      	beq.n	800b0b4 <__pow5mult+0x20>
 800b0a4:	4c25      	ldr	r4, [pc, #148]	; (800b13c <__pow5mult+0xa8>)
 800b0a6:	3a01      	subs	r2, #1
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b0ae:	f7ff fe9f 	bl	800adf0 <__multadd>
 800b0b2:	4607      	mov	r7, r0
 800b0b4:	10ad      	asrs	r5, r5, #2
 800b0b6:	d03d      	beq.n	800b134 <__pow5mult+0xa0>
 800b0b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b0ba:	b97c      	cbnz	r4, 800b0dc <__pow5mult+0x48>
 800b0bc:	2010      	movs	r0, #16
 800b0be:	f7ff fe11 	bl	800ace4 <malloc>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	6270      	str	r0, [r6, #36]	; 0x24
 800b0c6:	b928      	cbnz	r0, 800b0d4 <__pow5mult+0x40>
 800b0c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b0cc:	4b1c      	ldr	r3, [pc, #112]	; (800b140 <__pow5mult+0xac>)
 800b0ce:	481d      	ldr	r0, [pc, #116]	; (800b144 <__pow5mult+0xb0>)
 800b0d0:	f000 fc0a 	bl	800b8e8 <__assert_func>
 800b0d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0d8:	6004      	str	r4, [r0, #0]
 800b0da:	60c4      	str	r4, [r0, #12]
 800b0dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b0e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0e4:	b94c      	cbnz	r4, 800b0fa <__pow5mult+0x66>
 800b0e6:	f240 2171 	movw	r1, #625	; 0x271
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f7ff ff14 	bl	800af18 <__i2b>
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	4604      	mov	r4, r0
 800b0f4:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0f8:	6003      	str	r3, [r0, #0]
 800b0fa:	f04f 0900 	mov.w	r9, #0
 800b0fe:	07eb      	lsls	r3, r5, #31
 800b100:	d50a      	bpl.n	800b118 <__pow5mult+0x84>
 800b102:	4639      	mov	r1, r7
 800b104:	4622      	mov	r2, r4
 800b106:	4630      	mov	r0, r6
 800b108:	f7ff ff1c 	bl	800af44 <__multiply>
 800b10c:	4680      	mov	r8, r0
 800b10e:	4639      	mov	r1, r7
 800b110:	4630      	mov	r0, r6
 800b112:	f7ff fe4b 	bl	800adac <_Bfree>
 800b116:	4647      	mov	r7, r8
 800b118:	106d      	asrs	r5, r5, #1
 800b11a:	d00b      	beq.n	800b134 <__pow5mult+0xa0>
 800b11c:	6820      	ldr	r0, [r4, #0]
 800b11e:	b938      	cbnz	r0, 800b130 <__pow5mult+0x9c>
 800b120:	4622      	mov	r2, r4
 800b122:	4621      	mov	r1, r4
 800b124:	4630      	mov	r0, r6
 800b126:	f7ff ff0d 	bl	800af44 <__multiply>
 800b12a:	6020      	str	r0, [r4, #0]
 800b12c:	f8c0 9000 	str.w	r9, [r0]
 800b130:	4604      	mov	r4, r0
 800b132:	e7e4      	b.n	800b0fe <__pow5mult+0x6a>
 800b134:	4638      	mov	r0, r7
 800b136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b13a:	bf00      	nop
 800b13c:	0800c740 	.word	0x0800c740
 800b140:	0800c571 	.word	0x0800c571
 800b144:	0800c5f4 	.word	0x0800c5f4

0800b148 <__lshift>:
 800b148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b14c:	460c      	mov	r4, r1
 800b14e:	4607      	mov	r7, r0
 800b150:	4691      	mov	r9, r2
 800b152:	6923      	ldr	r3, [r4, #16]
 800b154:	6849      	ldr	r1, [r1, #4]
 800b156:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b15a:	68a3      	ldr	r3, [r4, #8]
 800b15c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b160:	f108 0601 	add.w	r6, r8, #1
 800b164:	42b3      	cmp	r3, r6
 800b166:	db0b      	blt.n	800b180 <__lshift+0x38>
 800b168:	4638      	mov	r0, r7
 800b16a:	f7ff fddf 	bl	800ad2c <_Balloc>
 800b16e:	4605      	mov	r5, r0
 800b170:	b948      	cbnz	r0, 800b186 <__lshift+0x3e>
 800b172:	4602      	mov	r2, r0
 800b174:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b178:	4b29      	ldr	r3, [pc, #164]	; (800b220 <__lshift+0xd8>)
 800b17a:	482a      	ldr	r0, [pc, #168]	; (800b224 <__lshift+0xdc>)
 800b17c:	f000 fbb4 	bl	800b8e8 <__assert_func>
 800b180:	3101      	adds	r1, #1
 800b182:	005b      	lsls	r3, r3, #1
 800b184:	e7ee      	b.n	800b164 <__lshift+0x1c>
 800b186:	2300      	movs	r3, #0
 800b188:	f100 0114 	add.w	r1, r0, #20
 800b18c:	f100 0210 	add.w	r2, r0, #16
 800b190:	4618      	mov	r0, r3
 800b192:	4553      	cmp	r3, sl
 800b194:	db37      	blt.n	800b206 <__lshift+0xbe>
 800b196:	6920      	ldr	r0, [r4, #16]
 800b198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b19c:	f104 0314 	add.w	r3, r4, #20
 800b1a0:	f019 091f 	ands.w	r9, r9, #31
 800b1a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b1a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b1ac:	d02f      	beq.n	800b20e <__lshift+0xc6>
 800b1ae:	468a      	mov	sl, r1
 800b1b0:	f04f 0c00 	mov.w	ip, #0
 800b1b4:	f1c9 0e20 	rsb	lr, r9, #32
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	fa02 f209 	lsl.w	r2, r2, r9
 800b1be:	ea42 020c 	orr.w	r2, r2, ip
 800b1c2:	f84a 2b04 	str.w	r2, [sl], #4
 800b1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ca:	4298      	cmp	r0, r3
 800b1cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b1d0:	d8f2      	bhi.n	800b1b8 <__lshift+0x70>
 800b1d2:	1b03      	subs	r3, r0, r4
 800b1d4:	3b15      	subs	r3, #21
 800b1d6:	f023 0303 	bic.w	r3, r3, #3
 800b1da:	3304      	adds	r3, #4
 800b1dc:	f104 0215 	add.w	r2, r4, #21
 800b1e0:	4290      	cmp	r0, r2
 800b1e2:	bf38      	it	cc
 800b1e4:	2304      	movcc	r3, #4
 800b1e6:	f841 c003 	str.w	ip, [r1, r3]
 800b1ea:	f1bc 0f00 	cmp.w	ip, #0
 800b1ee:	d001      	beq.n	800b1f4 <__lshift+0xac>
 800b1f0:	f108 0602 	add.w	r6, r8, #2
 800b1f4:	3e01      	subs	r6, #1
 800b1f6:	4638      	mov	r0, r7
 800b1f8:	4621      	mov	r1, r4
 800b1fa:	612e      	str	r6, [r5, #16]
 800b1fc:	f7ff fdd6 	bl	800adac <_Bfree>
 800b200:	4628      	mov	r0, r5
 800b202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b206:	f842 0f04 	str.w	r0, [r2, #4]!
 800b20a:	3301      	adds	r3, #1
 800b20c:	e7c1      	b.n	800b192 <__lshift+0x4a>
 800b20e:	3904      	subs	r1, #4
 800b210:	f853 2b04 	ldr.w	r2, [r3], #4
 800b214:	4298      	cmp	r0, r3
 800b216:	f841 2f04 	str.w	r2, [r1, #4]!
 800b21a:	d8f9      	bhi.n	800b210 <__lshift+0xc8>
 800b21c:	e7ea      	b.n	800b1f4 <__lshift+0xac>
 800b21e:	bf00      	nop
 800b220:	0800c5e3 	.word	0x0800c5e3
 800b224:	0800c5f4 	.word	0x0800c5f4

0800b228 <__mcmp>:
 800b228:	4603      	mov	r3, r0
 800b22a:	690a      	ldr	r2, [r1, #16]
 800b22c:	6900      	ldr	r0, [r0, #16]
 800b22e:	b530      	push	{r4, r5, lr}
 800b230:	1a80      	subs	r0, r0, r2
 800b232:	d10d      	bne.n	800b250 <__mcmp+0x28>
 800b234:	3314      	adds	r3, #20
 800b236:	3114      	adds	r1, #20
 800b238:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b23c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b240:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b244:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b248:	4295      	cmp	r5, r2
 800b24a:	d002      	beq.n	800b252 <__mcmp+0x2a>
 800b24c:	d304      	bcc.n	800b258 <__mcmp+0x30>
 800b24e:	2001      	movs	r0, #1
 800b250:	bd30      	pop	{r4, r5, pc}
 800b252:	42a3      	cmp	r3, r4
 800b254:	d3f4      	bcc.n	800b240 <__mcmp+0x18>
 800b256:	e7fb      	b.n	800b250 <__mcmp+0x28>
 800b258:	f04f 30ff 	mov.w	r0, #4294967295
 800b25c:	e7f8      	b.n	800b250 <__mcmp+0x28>
	...

0800b260 <__mdiff>:
 800b260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b264:	460d      	mov	r5, r1
 800b266:	4607      	mov	r7, r0
 800b268:	4611      	mov	r1, r2
 800b26a:	4628      	mov	r0, r5
 800b26c:	4614      	mov	r4, r2
 800b26e:	f7ff ffdb 	bl	800b228 <__mcmp>
 800b272:	1e06      	subs	r6, r0, #0
 800b274:	d111      	bne.n	800b29a <__mdiff+0x3a>
 800b276:	4631      	mov	r1, r6
 800b278:	4638      	mov	r0, r7
 800b27a:	f7ff fd57 	bl	800ad2c <_Balloc>
 800b27e:	4602      	mov	r2, r0
 800b280:	b928      	cbnz	r0, 800b28e <__mdiff+0x2e>
 800b282:	f240 2132 	movw	r1, #562	; 0x232
 800b286:	4b3a      	ldr	r3, [pc, #232]	; (800b370 <__mdiff+0x110>)
 800b288:	483a      	ldr	r0, [pc, #232]	; (800b374 <__mdiff+0x114>)
 800b28a:	f000 fb2d 	bl	800b8e8 <__assert_func>
 800b28e:	2301      	movs	r3, #1
 800b290:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b294:	4610      	mov	r0, r2
 800b296:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b29a:	bfa4      	itt	ge
 800b29c:	4623      	movge	r3, r4
 800b29e:	462c      	movge	r4, r5
 800b2a0:	4638      	mov	r0, r7
 800b2a2:	6861      	ldr	r1, [r4, #4]
 800b2a4:	bfa6      	itte	ge
 800b2a6:	461d      	movge	r5, r3
 800b2a8:	2600      	movge	r6, #0
 800b2aa:	2601      	movlt	r6, #1
 800b2ac:	f7ff fd3e 	bl	800ad2c <_Balloc>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	b918      	cbnz	r0, 800b2bc <__mdiff+0x5c>
 800b2b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b2b8:	4b2d      	ldr	r3, [pc, #180]	; (800b370 <__mdiff+0x110>)
 800b2ba:	e7e5      	b.n	800b288 <__mdiff+0x28>
 800b2bc:	f102 0814 	add.w	r8, r2, #20
 800b2c0:	46c2      	mov	sl, r8
 800b2c2:	f04f 0c00 	mov.w	ip, #0
 800b2c6:	6927      	ldr	r7, [r4, #16]
 800b2c8:	60c6      	str	r6, [r0, #12]
 800b2ca:	692e      	ldr	r6, [r5, #16]
 800b2cc:	f104 0014 	add.w	r0, r4, #20
 800b2d0:	f105 0914 	add.w	r9, r5, #20
 800b2d4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b2d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b2dc:	3410      	adds	r4, #16
 800b2de:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b2e2:	f859 3b04 	ldr.w	r3, [r9], #4
 800b2e6:	fa1f f18b 	uxth.w	r1, fp
 800b2ea:	448c      	add	ip, r1
 800b2ec:	b299      	uxth	r1, r3
 800b2ee:	0c1b      	lsrs	r3, r3, #16
 800b2f0:	ebac 0101 	sub.w	r1, ip, r1
 800b2f4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b2f8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b2fc:	b289      	uxth	r1, r1
 800b2fe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b302:	454e      	cmp	r6, r9
 800b304:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b308:	f84a 3b04 	str.w	r3, [sl], #4
 800b30c:	d8e7      	bhi.n	800b2de <__mdiff+0x7e>
 800b30e:	1b73      	subs	r3, r6, r5
 800b310:	3b15      	subs	r3, #21
 800b312:	f023 0303 	bic.w	r3, r3, #3
 800b316:	3515      	adds	r5, #21
 800b318:	3304      	adds	r3, #4
 800b31a:	42ae      	cmp	r6, r5
 800b31c:	bf38      	it	cc
 800b31e:	2304      	movcc	r3, #4
 800b320:	4418      	add	r0, r3
 800b322:	4443      	add	r3, r8
 800b324:	461e      	mov	r6, r3
 800b326:	4605      	mov	r5, r0
 800b328:	4575      	cmp	r5, lr
 800b32a:	d30e      	bcc.n	800b34a <__mdiff+0xea>
 800b32c:	f10e 0103 	add.w	r1, lr, #3
 800b330:	1a09      	subs	r1, r1, r0
 800b332:	f021 0103 	bic.w	r1, r1, #3
 800b336:	3803      	subs	r0, #3
 800b338:	4586      	cmp	lr, r0
 800b33a:	bf38      	it	cc
 800b33c:	2100      	movcc	r1, #0
 800b33e:	4419      	add	r1, r3
 800b340:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b344:	b18b      	cbz	r3, 800b36a <__mdiff+0x10a>
 800b346:	6117      	str	r7, [r2, #16]
 800b348:	e7a4      	b.n	800b294 <__mdiff+0x34>
 800b34a:	f855 8b04 	ldr.w	r8, [r5], #4
 800b34e:	fa1f f188 	uxth.w	r1, r8
 800b352:	4461      	add	r1, ip
 800b354:	140c      	asrs	r4, r1, #16
 800b356:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b35a:	b289      	uxth	r1, r1
 800b35c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b360:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b364:	f846 1b04 	str.w	r1, [r6], #4
 800b368:	e7de      	b.n	800b328 <__mdiff+0xc8>
 800b36a:	3f01      	subs	r7, #1
 800b36c:	e7e8      	b.n	800b340 <__mdiff+0xe0>
 800b36e:	bf00      	nop
 800b370:	0800c5e3 	.word	0x0800c5e3
 800b374:	0800c5f4 	.word	0x0800c5f4

0800b378 <__d2b>:
 800b378:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b37c:	2101      	movs	r1, #1
 800b37e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b382:	4690      	mov	r8, r2
 800b384:	461d      	mov	r5, r3
 800b386:	f7ff fcd1 	bl	800ad2c <_Balloc>
 800b38a:	4604      	mov	r4, r0
 800b38c:	b930      	cbnz	r0, 800b39c <__d2b+0x24>
 800b38e:	4602      	mov	r2, r0
 800b390:	f240 310a 	movw	r1, #778	; 0x30a
 800b394:	4b24      	ldr	r3, [pc, #144]	; (800b428 <__d2b+0xb0>)
 800b396:	4825      	ldr	r0, [pc, #148]	; (800b42c <__d2b+0xb4>)
 800b398:	f000 faa6 	bl	800b8e8 <__assert_func>
 800b39c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b3a0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b3a4:	bb2d      	cbnz	r5, 800b3f2 <__d2b+0x7a>
 800b3a6:	9301      	str	r3, [sp, #4]
 800b3a8:	f1b8 0300 	subs.w	r3, r8, #0
 800b3ac:	d026      	beq.n	800b3fc <__d2b+0x84>
 800b3ae:	4668      	mov	r0, sp
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	f7ff fd83 	bl	800aebc <__lo0bits>
 800b3b6:	9900      	ldr	r1, [sp, #0]
 800b3b8:	b1f0      	cbz	r0, 800b3f8 <__d2b+0x80>
 800b3ba:	9a01      	ldr	r2, [sp, #4]
 800b3bc:	f1c0 0320 	rsb	r3, r0, #32
 800b3c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c4:	430b      	orrs	r3, r1
 800b3c6:	40c2      	lsrs	r2, r0
 800b3c8:	6163      	str	r3, [r4, #20]
 800b3ca:	9201      	str	r2, [sp, #4]
 800b3cc:	9b01      	ldr	r3, [sp, #4]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	bf14      	ite	ne
 800b3d2:	2102      	movne	r1, #2
 800b3d4:	2101      	moveq	r1, #1
 800b3d6:	61a3      	str	r3, [r4, #24]
 800b3d8:	6121      	str	r1, [r4, #16]
 800b3da:	b1c5      	cbz	r5, 800b40e <__d2b+0x96>
 800b3dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b3e0:	4405      	add	r5, r0
 800b3e2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b3e6:	603d      	str	r5, [r7, #0]
 800b3e8:	6030      	str	r0, [r6, #0]
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	b002      	add	sp, #8
 800b3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b3f6:	e7d6      	b.n	800b3a6 <__d2b+0x2e>
 800b3f8:	6161      	str	r1, [r4, #20]
 800b3fa:	e7e7      	b.n	800b3cc <__d2b+0x54>
 800b3fc:	a801      	add	r0, sp, #4
 800b3fe:	f7ff fd5d 	bl	800aebc <__lo0bits>
 800b402:	2101      	movs	r1, #1
 800b404:	9b01      	ldr	r3, [sp, #4]
 800b406:	6121      	str	r1, [r4, #16]
 800b408:	6163      	str	r3, [r4, #20]
 800b40a:	3020      	adds	r0, #32
 800b40c:	e7e5      	b.n	800b3da <__d2b+0x62>
 800b40e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b412:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b416:	6038      	str	r0, [r7, #0]
 800b418:	6918      	ldr	r0, [r3, #16]
 800b41a:	f7ff fd2f 	bl	800ae7c <__hi0bits>
 800b41e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b422:	6031      	str	r1, [r6, #0]
 800b424:	e7e1      	b.n	800b3ea <__d2b+0x72>
 800b426:	bf00      	nop
 800b428:	0800c5e3 	.word	0x0800c5e3
 800b42c:	0800c5f4 	.word	0x0800c5f4

0800b430 <_calloc_r>:
 800b430:	b570      	push	{r4, r5, r6, lr}
 800b432:	fba1 5402 	umull	r5, r4, r1, r2
 800b436:	b934      	cbnz	r4, 800b446 <_calloc_r+0x16>
 800b438:	4629      	mov	r1, r5
 800b43a:	f000 f875 	bl	800b528 <_malloc_r>
 800b43e:	4606      	mov	r6, r0
 800b440:	b928      	cbnz	r0, 800b44e <_calloc_r+0x1e>
 800b442:	4630      	mov	r0, r6
 800b444:	bd70      	pop	{r4, r5, r6, pc}
 800b446:	220c      	movs	r2, #12
 800b448:	2600      	movs	r6, #0
 800b44a:	6002      	str	r2, [r0, #0]
 800b44c:	e7f9      	b.n	800b442 <_calloc_r+0x12>
 800b44e:	462a      	mov	r2, r5
 800b450:	4621      	mov	r1, r4
 800b452:	f7fe f92b 	bl	80096ac <memset>
 800b456:	e7f4      	b.n	800b442 <_calloc_r+0x12>

0800b458 <_free_r>:
 800b458:	b538      	push	{r3, r4, r5, lr}
 800b45a:	4605      	mov	r5, r0
 800b45c:	2900      	cmp	r1, #0
 800b45e:	d040      	beq.n	800b4e2 <_free_r+0x8a>
 800b460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b464:	1f0c      	subs	r4, r1, #4
 800b466:	2b00      	cmp	r3, #0
 800b468:	bfb8      	it	lt
 800b46a:	18e4      	addlt	r4, r4, r3
 800b46c:	f000 fa98 	bl	800b9a0 <__malloc_lock>
 800b470:	4a1c      	ldr	r2, [pc, #112]	; (800b4e4 <_free_r+0x8c>)
 800b472:	6813      	ldr	r3, [r2, #0]
 800b474:	b933      	cbnz	r3, 800b484 <_free_r+0x2c>
 800b476:	6063      	str	r3, [r4, #4]
 800b478:	6014      	str	r4, [r2, #0]
 800b47a:	4628      	mov	r0, r5
 800b47c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b480:	f000 ba94 	b.w	800b9ac <__malloc_unlock>
 800b484:	42a3      	cmp	r3, r4
 800b486:	d908      	bls.n	800b49a <_free_r+0x42>
 800b488:	6820      	ldr	r0, [r4, #0]
 800b48a:	1821      	adds	r1, r4, r0
 800b48c:	428b      	cmp	r3, r1
 800b48e:	bf01      	itttt	eq
 800b490:	6819      	ldreq	r1, [r3, #0]
 800b492:	685b      	ldreq	r3, [r3, #4]
 800b494:	1809      	addeq	r1, r1, r0
 800b496:	6021      	streq	r1, [r4, #0]
 800b498:	e7ed      	b.n	800b476 <_free_r+0x1e>
 800b49a:	461a      	mov	r2, r3
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	b10b      	cbz	r3, 800b4a4 <_free_r+0x4c>
 800b4a0:	42a3      	cmp	r3, r4
 800b4a2:	d9fa      	bls.n	800b49a <_free_r+0x42>
 800b4a4:	6811      	ldr	r1, [r2, #0]
 800b4a6:	1850      	adds	r0, r2, r1
 800b4a8:	42a0      	cmp	r0, r4
 800b4aa:	d10b      	bne.n	800b4c4 <_free_r+0x6c>
 800b4ac:	6820      	ldr	r0, [r4, #0]
 800b4ae:	4401      	add	r1, r0
 800b4b0:	1850      	adds	r0, r2, r1
 800b4b2:	4283      	cmp	r3, r0
 800b4b4:	6011      	str	r1, [r2, #0]
 800b4b6:	d1e0      	bne.n	800b47a <_free_r+0x22>
 800b4b8:	6818      	ldr	r0, [r3, #0]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	4401      	add	r1, r0
 800b4be:	6011      	str	r1, [r2, #0]
 800b4c0:	6053      	str	r3, [r2, #4]
 800b4c2:	e7da      	b.n	800b47a <_free_r+0x22>
 800b4c4:	d902      	bls.n	800b4cc <_free_r+0x74>
 800b4c6:	230c      	movs	r3, #12
 800b4c8:	602b      	str	r3, [r5, #0]
 800b4ca:	e7d6      	b.n	800b47a <_free_r+0x22>
 800b4cc:	6820      	ldr	r0, [r4, #0]
 800b4ce:	1821      	adds	r1, r4, r0
 800b4d0:	428b      	cmp	r3, r1
 800b4d2:	bf01      	itttt	eq
 800b4d4:	6819      	ldreq	r1, [r3, #0]
 800b4d6:	685b      	ldreq	r3, [r3, #4]
 800b4d8:	1809      	addeq	r1, r1, r0
 800b4da:	6021      	streq	r1, [r4, #0]
 800b4dc:	6063      	str	r3, [r4, #4]
 800b4de:	6054      	str	r4, [r2, #4]
 800b4e0:	e7cb      	b.n	800b47a <_free_r+0x22>
 800b4e2:	bd38      	pop	{r3, r4, r5, pc}
 800b4e4:	200015c8 	.word	0x200015c8

0800b4e8 <sbrk_aligned>:
 800b4e8:	b570      	push	{r4, r5, r6, lr}
 800b4ea:	4e0e      	ldr	r6, [pc, #56]	; (800b524 <sbrk_aligned+0x3c>)
 800b4ec:	460c      	mov	r4, r1
 800b4ee:	6831      	ldr	r1, [r6, #0]
 800b4f0:	4605      	mov	r5, r0
 800b4f2:	b911      	cbnz	r1, 800b4fa <sbrk_aligned+0x12>
 800b4f4:	f000 f9e8 	bl	800b8c8 <_sbrk_r>
 800b4f8:	6030      	str	r0, [r6, #0]
 800b4fa:	4621      	mov	r1, r4
 800b4fc:	4628      	mov	r0, r5
 800b4fe:	f000 f9e3 	bl	800b8c8 <_sbrk_r>
 800b502:	1c43      	adds	r3, r0, #1
 800b504:	d00a      	beq.n	800b51c <sbrk_aligned+0x34>
 800b506:	1cc4      	adds	r4, r0, #3
 800b508:	f024 0403 	bic.w	r4, r4, #3
 800b50c:	42a0      	cmp	r0, r4
 800b50e:	d007      	beq.n	800b520 <sbrk_aligned+0x38>
 800b510:	1a21      	subs	r1, r4, r0
 800b512:	4628      	mov	r0, r5
 800b514:	f000 f9d8 	bl	800b8c8 <_sbrk_r>
 800b518:	3001      	adds	r0, #1
 800b51a:	d101      	bne.n	800b520 <sbrk_aligned+0x38>
 800b51c:	f04f 34ff 	mov.w	r4, #4294967295
 800b520:	4620      	mov	r0, r4
 800b522:	bd70      	pop	{r4, r5, r6, pc}
 800b524:	200015cc 	.word	0x200015cc

0800b528 <_malloc_r>:
 800b528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b52c:	1ccd      	adds	r5, r1, #3
 800b52e:	f025 0503 	bic.w	r5, r5, #3
 800b532:	3508      	adds	r5, #8
 800b534:	2d0c      	cmp	r5, #12
 800b536:	bf38      	it	cc
 800b538:	250c      	movcc	r5, #12
 800b53a:	2d00      	cmp	r5, #0
 800b53c:	4607      	mov	r7, r0
 800b53e:	db01      	blt.n	800b544 <_malloc_r+0x1c>
 800b540:	42a9      	cmp	r1, r5
 800b542:	d905      	bls.n	800b550 <_malloc_r+0x28>
 800b544:	230c      	movs	r3, #12
 800b546:	2600      	movs	r6, #0
 800b548:	603b      	str	r3, [r7, #0]
 800b54a:	4630      	mov	r0, r6
 800b54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b550:	4e2e      	ldr	r6, [pc, #184]	; (800b60c <_malloc_r+0xe4>)
 800b552:	f000 fa25 	bl	800b9a0 <__malloc_lock>
 800b556:	6833      	ldr	r3, [r6, #0]
 800b558:	461c      	mov	r4, r3
 800b55a:	bb34      	cbnz	r4, 800b5aa <_malloc_r+0x82>
 800b55c:	4629      	mov	r1, r5
 800b55e:	4638      	mov	r0, r7
 800b560:	f7ff ffc2 	bl	800b4e8 <sbrk_aligned>
 800b564:	1c43      	adds	r3, r0, #1
 800b566:	4604      	mov	r4, r0
 800b568:	d14d      	bne.n	800b606 <_malloc_r+0xde>
 800b56a:	6834      	ldr	r4, [r6, #0]
 800b56c:	4626      	mov	r6, r4
 800b56e:	2e00      	cmp	r6, #0
 800b570:	d140      	bne.n	800b5f4 <_malloc_r+0xcc>
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	4631      	mov	r1, r6
 800b576:	4638      	mov	r0, r7
 800b578:	eb04 0803 	add.w	r8, r4, r3
 800b57c:	f000 f9a4 	bl	800b8c8 <_sbrk_r>
 800b580:	4580      	cmp	r8, r0
 800b582:	d13a      	bne.n	800b5fa <_malloc_r+0xd2>
 800b584:	6821      	ldr	r1, [r4, #0]
 800b586:	3503      	adds	r5, #3
 800b588:	1a6d      	subs	r5, r5, r1
 800b58a:	f025 0503 	bic.w	r5, r5, #3
 800b58e:	3508      	adds	r5, #8
 800b590:	2d0c      	cmp	r5, #12
 800b592:	bf38      	it	cc
 800b594:	250c      	movcc	r5, #12
 800b596:	4638      	mov	r0, r7
 800b598:	4629      	mov	r1, r5
 800b59a:	f7ff ffa5 	bl	800b4e8 <sbrk_aligned>
 800b59e:	3001      	adds	r0, #1
 800b5a0:	d02b      	beq.n	800b5fa <_malloc_r+0xd2>
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	442b      	add	r3, r5
 800b5a6:	6023      	str	r3, [r4, #0]
 800b5a8:	e00e      	b.n	800b5c8 <_malloc_r+0xa0>
 800b5aa:	6822      	ldr	r2, [r4, #0]
 800b5ac:	1b52      	subs	r2, r2, r5
 800b5ae:	d41e      	bmi.n	800b5ee <_malloc_r+0xc6>
 800b5b0:	2a0b      	cmp	r2, #11
 800b5b2:	d916      	bls.n	800b5e2 <_malloc_r+0xba>
 800b5b4:	1961      	adds	r1, r4, r5
 800b5b6:	42a3      	cmp	r3, r4
 800b5b8:	6025      	str	r5, [r4, #0]
 800b5ba:	bf18      	it	ne
 800b5bc:	6059      	strne	r1, [r3, #4]
 800b5be:	6863      	ldr	r3, [r4, #4]
 800b5c0:	bf08      	it	eq
 800b5c2:	6031      	streq	r1, [r6, #0]
 800b5c4:	5162      	str	r2, [r4, r5]
 800b5c6:	604b      	str	r3, [r1, #4]
 800b5c8:	4638      	mov	r0, r7
 800b5ca:	f104 060b 	add.w	r6, r4, #11
 800b5ce:	f000 f9ed 	bl	800b9ac <__malloc_unlock>
 800b5d2:	f026 0607 	bic.w	r6, r6, #7
 800b5d6:	1d23      	adds	r3, r4, #4
 800b5d8:	1af2      	subs	r2, r6, r3
 800b5da:	d0b6      	beq.n	800b54a <_malloc_r+0x22>
 800b5dc:	1b9b      	subs	r3, r3, r6
 800b5de:	50a3      	str	r3, [r4, r2]
 800b5e0:	e7b3      	b.n	800b54a <_malloc_r+0x22>
 800b5e2:	6862      	ldr	r2, [r4, #4]
 800b5e4:	42a3      	cmp	r3, r4
 800b5e6:	bf0c      	ite	eq
 800b5e8:	6032      	streq	r2, [r6, #0]
 800b5ea:	605a      	strne	r2, [r3, #4]
 800b5ec:	e7ec      	b.n	800b5c8 <_malloc_r+0xa0>
 800b5ee:	4623      	mov	r3, r4
 800b5f0:	6864      	ldr	r4, [r4, #4]
 800b5f2:	e7b2      	b.n	800b55a <_malloc_r+0x32>
 800b5f4:	4634      	mov	r4, r6
 800b5f6:	6876      	ldr	r6, [r6, #4]
 800b5f8:	e7b9      	b.n	800b56e <_malloc_r+0x46>
 800b5fa:	230c      	movs	r3, #12
 800b5fc:	4638      	mov	r0, r7
 800b5fe:	603b      	str	r3, [r7, #0]
 800b600:	f000 f9d4 	bl	800b9ac <__malloc_unlock>
 800b604:	e7a1      	b.n	800b54a <_malloc_r+0x22>
 800b606:	6025      	str	r5, [r4, #0]
 800b608:	e7de      	b.n	800b5c8 <_malloc_r+0xa0>
 800b60a:	bf00      	nop
 800b60c:	200015c8 	.word	0x200015c8

0800b610 <__ssputs_r>:
 800b610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b614:	688e      	ldr	r6, [r1, #8]
 800b616:	4682      	mov	sl, r0
 800b618:	429e      	cmp	r6, r3
 800b61a:	460c      	mov	r4, r1
 800b61c:	4690      	mov	r8, r2
 800b61e:	461f      	mov	r7, r3
 800b620:	d838      	bhi.n	800b694 <__ssputs_r+0x84>
 800b622:	898a      	ldrh	r2, [r1, #12]
 800b624:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b628:	d032      	beq.n	800b690 <__ssputs_r+0x80>
 800b62a:	6825      	ldr	r5, [r4, #0]
 800b62c:	6909      	ldr	r1, [r1, #16]
 800b62e:	3301      	adds	r3, #1
 800b630:	eba5 0901 	sub.w	r9, r5, r1
 800b634:	6965      	ldr	r5, [r4, #20]
 800b636:	444b      	add	r3, r9
 800b638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b63c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b640:	106d      	asrs	r5, r5, #1
 800b642:	429d      	cmp	r5, r3
 800b644:	bf38      	it	cc
 800b646:	461d      	movcc	r5, r3
 800b648:	0553      	lsls	r3, r2, #21
 800b64a:	d531      	bpl.n	800b6b0 <__ssputs_r+0xa0>
 800b64c:	4629      	mov	r1, r5
 800b64e:	f7ff ff6b 	bl	800b528 <_malloc_r>
 800b652:	4606      	mov	r6, r0
 800b654:	b950      	cbnz	r0, 800b66c <__ssputs_r+0x5c>
 800b656:	230c      	movs	r3, #12
 800b658:	f04f 30ff 	mov.w	r0, #4294967295
 800b65c:	f8ca 3000 	str.w	r3, [sl]
 800b660:	89a3      	ldrh	r3, [r4, #12]
 800b662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b666:	81a3      	strh	r3, [r4, #12]
 800b668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b66c:	464a      	mov	r2, r9
 800b66e:	6921      	ldr	r1, [r4, #16]
 800b670:	f7ff fb4e 	bl	800ad10 <memcpy>
 800b674:	89a3      	ldrh	r3, [r4, #12]
 800b676:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b67a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b67e:	81a3      	strh	r3, [r4, #12]
 800b680:	6126      	str	r6, [r4, #16]
 800b682:	444e      	add	r6, r9
 800b684:	6026      	str	r6, [r4, #0]
 800b686:	463e      	mov	r6, r7
 800b688:	6165      	str	r5, [r4, #20]
 800b68a:	eba5 0509 	sub.w	r5, r5, r9
 800b68e:	60a5      	str	r5, [r4, #8]
 800b690:	42be      	cmp	r6, r7
 800b692:	d900      	bls.n	800b696 <__ssputs_r+0x86>
 800b694:	463e      	mov	r6, r7
 800b696:	4632      	mov	r2, r6
 800b698:	4641      	mov	r1, r8
 800b69a:	6820      	ldr	r0, [r4, #0]
 800b69c:	f000 f966 	bl	800b96c <memmove>
 800b6a0:	68a3      	ldr	r3, [r4, #8]
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	1b9b      	subs	r3, r3, r6
 800b6a6:	60a3      	str	r3, [r4, #8]
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	4433      	add	r3, r6
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	e7db      	b.n	800b668 <__ssputs_r+0x58>
 800b6b0:	462a      	mov	r2, r5
 800b6b2:	f000 f981 	bl	800b9b8 <_realloc_r>
 800b6b6:	4606      	mov	r6, r0
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	d1e1      	bne.n	800b680 <__ssputs_r+0x70>
 800b6bc:	4650      	mov	r0, sl
 800b6be:	6921      	ldr	r1, [r4, #16]
 800b6c0:	f7ff feca 	bl	800b458 <_free_r>
 800b6c4:	e7c7      	b.n	800b656 <__ssputs_r+0x46>
	...

0800b6c8 <_svfiprintf_r>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	4698      	mov	r8, r3
 800b6ce:	898b      	ldrh	r3, [r1, #12]
 800b6d0:	4607      	mov	r7, r0
 800b6d2:	061b      	lsls	r3, r3, #24
 800b6d4:	460d      	mov	r5, r1
 800b6d6:	4614      	mov	r4, r2
 800b6d8:	b09d      	sub	sp, #116	; 0x74
 800b6da:	d50e      	bpl.n	800b6fa <_svfiprintf_r+0x32>
 800b6dc:	690b      	ldr	r3, [r1, #16]
 800b6de:	b963      	cbnz	r3, 800b6fa <_svfiprintf_r+0x32>
 800b6e0:	2140      	movs	r1, #64	; 0x40
 800b6e2:	f7ff ff21 	bl	800b528 <_malloc_r>
 800b6e6:	6028      	str	r0, [r5, #0]
 800b6e8:	6128      	str	r0, [r5, #16]
 800b6ea:	b920      	cbnz	r0, 800b6f6 <_svfiprintf_r+0x2e>
 800b6ec:	230c      	movs	r3, #12
 800b6ee:	603b      	str	r3, [r7, #0]
 800b6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f4:	e0d1      	b.n	800b89a <_svfiprintf_r+0x1d2>
 800b6f6:	2340      	movs	r3, #64	; 0x40
 800b6f8:	616b      	str	r3, [r5, #20]
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b6fe:	2320      	movs	r3, #32
 800b700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b704:	2330      	movs	r3, #48	; 0x30
 800b706:	f04f 0901 	mov.w	r9, #1
 800b70a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b70e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b8b4 <_svfiprintf_r+0x1ec>
 800b712:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b716:	4623      	mov	r3, r4
 800b718:	469a      	mov	sl, r3
 800b71a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b71e:	b10a      	cbz	r2, 800b724 <_svfiprintf_r+0x5c>
 800b720:	2a25      	cmp	r2, #37	; 0x25
 800b722:	d1f9      	bne.n	800b718 <_svfiprintf_r+0x50>
 800b724:	ebba 0b04 	subs.w	fp, sl, r4
 800b728:	d00b      	beq.n	800b742 <_svfiprintf_r+0x7a>
 800b72a:	465b      	mov	r3, fp
 800b72c:	4622      	mov	r2, r4
 800b72e:	4629      	mov	r1, r5
 800b730:	4638      	mov	r0, r7
 800b732:	f7ff ff6d 	bl	800b610 <__ssputs_r>
 800b736:	3001      	adds	r0, #1
 800b738:	f000 80aa 	beq.w	800b890 <_svfiprintf_r+0x1c8>
 800b73c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b73e:	445a      	add	r2, fp
 800b740:	9209      	str	r2, [sp, #36]	; 0x24
 800b742:	f89a 3000 	ldrb.w	r3, [sl]
 800b746:	2b00      	cmp	r3, #0
 800b748:	f000 80a2 	beq.w	800b890 <_svfiprintf_r+0x1c8>
 800b74c:	2300      	movs	r3, #0
 800b74e:	f04f 32ff 	mov.w	r2, #4294967295
 800b752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b756:	f10a 0a01 	add.w	sl, sl, #1
 800b75a:	9304      	str	r3, [sp, #16]
 800b75c:	9307      	str	r3, [sp, #28]
 800b75e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b762:	931a      	str	r3, [sp, #104]	; 0x68
 800b764:	4654      	mov	r4, sl
 800b766:	2205      	movs	r2, #5
 800b768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76c:	4851      	ldr	r0, [pc, #324]	; (800b8b4 <_svfiprintf_r+0x1ec>)
 800b76e:	f7ff fac1 	bl	800acf4 <memchr>
 800b772:	9a04      	ldr	r2, [sp, #16]
 800b774:	b9d8      	cbnz	r0, 800b7ae <_svfiprintf_r+0xe6>
 800b776:	06d0      	lsls	r0, r2, #27
 800b778:	bf44      	itt	mi
 800b77a:	2320      	movmi	r3, #32
 800b77c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b780:	0711      	lsls	r1, r2, #28
 800b782:	bf44      	itt	mi
 800b784:	232b      	movmi	r3, #43	; 0x2b
 800b786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b78a:	f89a 3000 	ldrb.w	r3, [sl]
 800b78e:	2b2a      	cmp	r3, #42	; 0x2a
 800b790:	d015      	beq.n	800b7be <_svfiprintf_r+0xf6>
 800b792:	4654      	mov	r4, sl
 800b794:	2000      	movs	r0, #0
 800b796:	f04f 0c0a 	mov.w	ip, #10
 800b79a:	9a07      	ldr	r2, [sp, #28]
 800b79c:	4621      	mov	r1, r4
 800b79e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7a2:	3b30      	subs	r3, #48	; 0x30
 800b7a4:	2b09      	cmp	r3, #9
 800b7a6:	d94e      	bls.n	800b846 <_svfiprintf_r+0x17e>
 800b7a8:	b1b0      	cbz	r0, 800b7d8 <_svfiprintf_r+0x110>
 800b7aa:	9207      	str	r2, [sp, #28]
 800b7ac:	e014      	b.n	800b7d8 <_svfiprintf_r+0x110>
 800b7ae:	eba0 0308 	sub.w	r3, r0, r8
 800b7b2:	fa09 f303 	lsl.w	r3, r9, r3
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	46a2      	mov	sl, r4
 800b7ba:	9304      	str	r3, [sp, #16]
 800b7bc:	e7d2      	b.n	800b764 <_svfiprintf_r+0x9c>
 800b7be:	9b03      	ldr	r3, [sp, #12]
 800b7c0:	1d19      	adds	r1, r3, #4
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	9103      	str	r1, [sp, #12]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	bfbb      	ittet	lt
 800b7ca:	425b      	neglt	r3, r3
 800b7cc:	f042 0202 	orrlt.w	r2, r2, #2
 800b7d0:	9307      	strge	r3, [sp, #28]
 800b7d2:	9307      	strlt	r3, [sp, #28]
 800b7d4:	bfb8      	it	lt
 800b7d6:	9204      	strlt	r2, [sp, #16]
 800b7d8:	7823      	ldrb	r3, [r4, #0]
 800b7da:	2b2e      	cmp	r3, #46	; 0x2e
 800b7dc:	d10c      	bne.n	800b7f8 <_svfiprintf_r+0x130>
 800b7de:	7863      	ldrb	r3, [r4, #1]
 800b7e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b7e2:	d135      	bne.n	800b850 <_svfiprintf_r+0x188>
 800b7e4:	9b03      	ldr	r3, [sp, #12]
 800b7e6:	3402      	adds	r4, #2
 800b7e8:	1d1a      	adds	r2, r3, #4
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	9203      	str	r2, [sp, #12]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	bfb8      	it	lt
 800b7f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7f6:	9305      	str	r3, [sp, #20]
 800b7f8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b8b8 <_svfiprintf_r+0x1f0>
 800b7fc:	2203      	movs	r2, #3
 800b7fe:	4650      	mov	r0, sl
 800b800:	7821      	ldrb	r1, [r4, #0]
 800b802:	f7ff fa77 	bl	800acf4 <memchr>
 800b806:	b140      	cbz	r0, 800b81a <_svfiprintf_r+0x152>
 800b808:	2340      	movs	r3, #64	; 0x40
 800b80a:	eba0 000a 	sub.w	r0, r0, sl
 800b80e:	fa03 f000 	lsl.w	r0, r3, r0
 800b812:	9b04      	ldr	r3, [sp, #16]
 800b814:	3401      	adds	r4, #1
 800b816:	4303      	orrs	r3, r0
 800b818:	9304      	str	r3, [sp, #16]
 800b81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b81e:	2206      	movs	r2, #6
 800b820:	4826      	ldr	r0, [pc, #152]	; (800b8bc <_svfiprintf_r+0x1f4>)
 800b822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b826:	f7ff fa65 	bl	800acf4 <memchr>
 800b82a:	2800      	cmp	r0, #0
 800b82c:	d038      	beq.n	800b8a0 <_svfiprintf_r+0x1d8>
 800b82e:	4b24      	ldr	r3, [pc, #144]	; (800b8c0 <_svfiprintf_r+0x1f8>)
 800b830:	bb1b      	cbnz	r3, 800b87a <_svfiprintf_r+0x1b2>
 800b832:	9b03      	ldr	r3, [sp, #12]
 800b834:	3307      	adds	r3, #7
 800b836:	f023 0307 	bic.w	r3, r3, #7
 800b83a:	3308      	adds	r3, #8
 800b83c:	9303      	str	r3, [sp, #12]
 800b83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b840:	4433      	add	r3, r6
 800b842:	9309      	str	r3, [sp, #36]	; 0x24
 800b844:	e767      	b.n	800b716 <_svfiprintf_r+0x4e>
 800b846:	460c      	mov	r4, r1
 800b848:	2001      	movs	r0, #1
 800b84a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b84e:	e7a5      	b.n	800b79c <_svfiprintf_r+0xd4>
 800b850:	2300      	movs	r3, #0
 800b852:	f04f 0c0a 	mov.w	ip, #10
 800b856:	4619      	mov	r1, r3
 800b858:	3401      	adds	r4, #1
 800b85a:	9305      	str	r3, [sp, #20]
 800b85c:	4620      	mov	r0, r4
 800b85e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b862:	3a30      	subs	r2, #48	; 0x30
 800b864:	2a09      	cmp	r2, #9
 800b866:	d903      	bls.n	800b870 <_svfiprintf_r+0x1a8>
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d0c5      	beq.n	800b7f8 <_svfiprintf_r+0x130>
 800b86c:	9105      	str	r1, [sp, #20]
 800b86e:	e7c3      	b.n	800b7f8 <_svfiprintf_r+0x130>
 800b870:	4604      	mov	r4, r0
 800b872:	2301      	movs	r3, #1
 800b874:	fb0c 2101 	mla	r1, ip, r1, r2
 800b878:	e7f0      	b.n	800b85c <_svfiprintf_r+0x194>
 800b87a:	ab03      	add	r3, sp, #12
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	462a      	mov	r2, r5
 800b880:	4638      	mov	r0, r7
 800b882:	4b10      	ldr	r3, [pc, #64]	; (800b8c4 <_svfiprintf_r+0x1fc>)
 800b884:	a904      	add	r1, sp, #16
 800b886:	f7fd ffb7 	bl	80097f8 <_printf_float>
 800b88a:	1c42      	adds	r2, r0, #1
 800b88c:	4606      	mov	r6, r0
 800b88e:	d1d6      	bne.n	800b83e <_svfiprintf_r+0x176>
 800b890:	89ab      	ldrh	r3, [r5, #12]
 800b892:	065b      	lsls	r3, r3, #25
 800b894:	f53f af2c 	bmi.w	800b6f0 <_svfiprintf_r+0x28>
 800b898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b89a:	b01d      	add	sp, #116	; 0x74
 800b89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a0:	ab03      	add	r3, sp, #12
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	462a      	mov	r2, r5
 800b8a6:	4638      	mov	r0, r7
 800b8a8:	4b06      	ldr	r3, [pc, #24]	; (800b8c4 <_svfiprintf_r+0x1fc>)
 800b8aa:	a904      	add	r1, sp, #16
 800b8ac:	f7fe fa40 	bl	8009d30 <_printf_i>
 800b8b0:	e7eb      	b.n	800b88a <_svfiprintf_r+0x1c2>
 800b8b2:	bf00      	nop
 800b8b4:	0800c74c 	.word	0x0800c74c
 800b8b8:	0800c752 	.word	0x0800c752
 800b8bc:	0800c756 	.word	0x0800c756
 800b8c0:	080097f9 	.word	0x080097f9
 800b8c4:	0800b611 	.word	0x0800b611

0800b8c8 <_sbrk_r>:
 800b8c8:	b538      	push	{r3, r4, r5, lr}
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	4d05      	ldr	r5, [pc, #20]	; (800b8e4 <_sbrk_r+0x1c>)
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	4608      	mov	r0, r1
 800b8d2:	602b      	str	r3, [r5, #0]
 800b8d4:	f7f5 fc08 	bl	80010e8 <_sbrk>
 800b8d8:	1c43      	adds	r3, r0, #1
 800b8da:	d102      	bne.n	800b8e2 <_sbrk_r+0x1a>
 800b8dc:	682b      	ldr	r3, [r5, #0]
 800b8de:	b103      	cbz	r3, 800b8e2 <_sbrk_r+0x1a>
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	bd38      	pop	{r3, r4, r5, pc}
 800b8e4:	200015d0 	.word	0x200015d0

0800b8e8 <__assert_func>:
 800b8e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8ea:	4614      	mov	r4, r2
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	4b09      	ldr	r3, [pc, #36]	; (800b914 <__assert_func+0x2c>)
 800b8f0:	4605      	mov	r5, r0
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68d8      	ldr	r0, [r3, #12]
 800b8f6:	b14c      	cbz	r4, 800b90c <__assert_func+0x24>
 800b8f8:	4b07      	ldr	r3, [pc, #28]	; (800b918 <__assert_func+0x30>)
 800b8fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8fe:	9100      	str	r1, [sp, #0]
 800b900:	462b      	mov	r3, r5
 800b902:	4906      	ldr	r1, [pc, #24]	; (800b91c <__assert_func+0x34>)
 800b904:	f000 f80e 	bl	800b924 <fiprintf>
 800b908:	f000 faaa 	bl	800be60 <abort>
 800b90c:	4b04      	ldr	r3, [pc, #16]	; (800b920 <__assert_func+0x38>)
 800b90e:	461c      	mov	r4, r3
 800b910:	e7f3      	b.n	800b8fa <__assert_func+0x12>
 800b912:	bf00      	nop
 800b914:	2000017c 	.word	0x2000017c
 800b918:	0800c75d 	.word	0x0800c75d
 800b91c:	0800c76a 	.word	0x0800c76a
 800b920:	0800c798 	.word	0x0800c798

0800b924 <fiprintf>:
 800b924:	b40e      	push	{r1, r2, r3}
 800b926:	b503      	push	{r0, r1, lr}
 800b928:	4601      	mov	r1, r0
 800b92a:	ab03      	add	r3, sp, #12
 800b92c:	4805      	ldr	r0, [pc, #20]	; (800b944 <fiprintf+0x20>)
 800b92e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b932:	6800      	ldr	r0, [r0, #0]
 800b934:	9301      	str	r3, [sp, #4]
 800b936:	f000 f895 	bl	800ba64 <_vfiprintf_r>
 800b93a:	b002      	add	sp, #8
 800b93c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b940:	b003      	add	sp, #12
 800b942:	4770      	bx	lr
 800b944:	2000017c 	.word	0x2000017c

0800b948 <__ascii_mbtowc>:
 800b948:	b082      	sub	sp, #8
 800b94a:	b901      	cbnz	r1, 800b94e <__ascii_mbtowc+0x6>
 800b94c:	a901      	add	r1, sp, #4
 800b94e:	b142      	cbz	r2, 800b962 <__ascii_mbtowc+0x1a>
 800b950:	b14b      	cbz	r3, 800b966 <__ascii_mbtowc+0x1e>
 800b952:	7813      	ldrb	r3, [r2, #0]
 800b954:	600b      	str	r3, [r1, #0]
 800b956:	7812      	ldrb	r2, [r2, #0]
 800b958:	1e10      	subs	r0, r2, #0
 800b95a:	bf18      	it	ne
 800b95c:	2001      	movne	r0, #1
 800b95e:	b002      	add	sp, #8
 800b960:	4770      	bx	lr
 800b962:	4610      	mov	r0, r2
 800b964:	e7fb      	b.n	800b95e <__ascii_mbtowc+0x16>
 800b966:	f06f 0001 	mvn.w	r0, #1
 800b96a:	e7f8      	b.n	800b95e <__ascii_mbtowc+0x16>

0800b96c <memmove>:
 800b96c:	4288      	cmp	r0, r1
 800b96e:	b510      	push	{r4, lr}
 800b970:	eb01 0402 	add.w	r4, r1, r2
 800b974:	d902      	bls.n	800b97c <memmove+0x10>
 800b976:	4284      	cmp	r4, r0
 800b978:	4623      	mov	r3, r4
 800b97a:	d807      	bhi.n	800b98c <memmove+0x20>
 800b97c:	1e43      	subs	r3, r0, #1
 800b97e:	42a1      	cmp	r1, r4
 800b980:	d008      	beq.n	800b994 <memmove+0x28>
 800b982:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b986:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b98a:	e7f8      	b.n	800b97e <memmove+0x12>
 800b98c:	4601      	mov	r1, r0
 800b98e:	4402      	add	r2, r0
 800b990:	428a      	cmp	r2, r1
 800b992:	d100      	bne.n	800b996 <memmove+0x2a>
 800b994:	bd10      	pop	{r4, pc}
 800b996:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b99a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b99e:	e7f7      	b.n	800b990 <memmove+0x24>

0800b9a0 <__malloc_lock>:
 800b9a0:	4801      	ldr	r0, [pc, #4]	; (800b9a8 <__malloc_lock+0x8>)
 800b9a2:	f000 bc19 	b.w	800c1d8 <__retarget_lock_acquire_recursive>
 800b9a6:	bf00      	nop
 800b9a8:	200015d4 	.word	0x200015d4

0800b9ac <__malloc_unlock>:
 800b9ac:	4801      	ldr	r0, [pc, #4]	; (800b9b4 <__malloc_unlock+0x8>)
 800b9ae:	f000 bc14 	b.w	800c1da <__retarget_lock_release_recursive>
 800b9b2:	bf00      	nop
 800b9b4:	200015d4 	.word	0x200015d4

0800b9b8 <_realloc_r>:
 800b9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9bc:	4680      	mov	r8, r0
 800b9be:	4614      	mov	r4, r2
 800b9c0:	460e      	mov	r6, r1
 800b9c2:	b921      	cbnz	r1, 800b9ce <_realloc_r+0x16>
 800b9c4:	4611      	mov	r1, r2
 800b9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ca:	f7ff bdad 	b.w	800b528 <_malloc_r>
 800b9ce:	b92a      	cbnz	r2, 800b9dc <_realloc_r+0x24>
 800b9d0:	f7ff fd42 	bl	800b458 <_free_r>
 800b9d4:	4625      	mov	r5, r4
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9dc:	f000 fc64 	bl	800c2a8 <_malloc_usable_size_r>
 800b9e0:	4284      	cmp	r4, r0
 800b9e2:	4607      	mov	r7, r0
 800b9e4:	d802      	bhi.n	800b9ec <_realloc_r+0x34>
 800b9e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9ea:	d812      	bhi.n	800ba12 <_realloc_r+0x5a>
 800b9ec:	4621      	mov	r1, r4
 800b9ee:	4640      	mov	r0, r8
 800b9f0:	f7ff fd9a 	bl	800b528 <_malloc_r>
 800b9f4:	4605      	mov	r5, r0
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d0ed      	beq.n	800b9d6 <_realloc_r+0x1e>
 800b9fa:	42bc      	cmp	r4, r7
 800b9fc:	4622      	mov	r2, r4
 800b9fe:	4631      	mov	r1, r6
 800ba00:	bf28      	it	cs
 800ba02:	463a      	movcs	r2, r7
 800ba04:	f7ff f984 	bl	800ad10 <memcpy>
 800ba08:	4631      	mov	r1, r6
 800ba0a:	4640      	mov	r0, r8
 800ba0c:	f7ff fd24 	bl	800b458 <_free_r>
 800ba10:	e7e1      	b.n	800b9d6 <_realloc_r+0x1e>
 800ba12:	4635      	mov	r5, r6
 800ba14:	e7df      	b.n	800b9d6 <_realloc_r+0x1e>

0800ba16 <__sfputc_r>:
 800ba16:	6893      	ldr	r3, [r2, #8]
 800ba18:	b410      	push	{r4}
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	6093      	str	r3, [r2, #8]
 800ba20:	da07      	bge.n	800ba32 <__sfputc_r+0x1c>
 800ba22:	6994      	ldr	r4, [r2, #24]
 800ba24:	42a3      	cmp	r3, r4
 800ba26:	db01      	blt.n	800ba2c <__sfputc_r+0x16>
 800ba28:	290a      	cmp	r1, #10
 800ba2a:	d102      	bne.n	800ba32 <__sfputc_r+0x1c>
 800ba2c:	bc10      	pop	{r4}
 800ba2e:	f000 b949 	b.w	800bcc4 <__swbuf_r>
 800ba32:	6813      	ldr	r3, [r2, #0]
 800ba34:	1c58      	adds	r0, r3, #1
 800ba36:	6010      	str	r0, [r2, #0]
 800ba38:	7019      	strb	r1, [r3, #0]
 800ba3a:	4608      	mov	r0, r1
 800ba3c:	bc10      	pop	{r4}
 800ba3e:	4770      	bx	lr

0800ba40 <__sfputs_r>:
 800ba40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba42:	4606      	mov	r6, r0
 800ba44:	460f      	mov	r7, r1
 800ba46:	4614      	mov	r4, r2
 800ba48:	18d5      	adds	r5, r2, r3
 800ba4a:	42ac      	cmp	r4, r5
 800ba4c:	d101      	bne.n	800ba52 <__sfputs_r+0x12>
 800ba4e:	2000      	movs	r0, #0
 800ba50:	e007      	b.n	800ba62 <__sfputs_r+0x22>
 800ba52:	463a      	mov	r2, r7
 800ba54:	4630      	mov	r0, r6
 800ba56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba5a:	f7ff ffdc 	bl	800ba16 <__sfputc_r>
 800ba5e:	1c43      	adds	r3, r0, #1
 800ba60:	d1f3      	bne.n	800ba4a <__sfputs_r+0xa>
 800ba62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba64 <_vfiprintf_r>:
 800ba64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba68:	460d      	mov	r5, r1
 800ba6a:	4614      	mov	r4, r2
 800ba6c:	4698      	mov	r8, r3
 800ba6e:	4606      	mov	r6, r0
 800ba70:	b09d      	sub	sp, #116	; 0x74
 800ba72:	b118      	cbz	r0, 800ba7c <_vfiprintf_r+0x18>
 800ba74:	6983      	ldr	r3, [r0, #24]
 800ba76:	b90b      	cbnz	r3, 800ba7c <_vfiprintf_r+0x18>
 800ba78:	f000 fb10 	bl	800c09c <__sinit>
 800ba7c:	4b89      	ldr	r3, [pc, #548]	; (800bca4 <_vfiprintf_r+0x240>)
 800ba7e:	429d      	cmp	r5, r3
 800ba80:	d11b      	bne.n	800baba <_vfiprintf_r+0x56>
 800ba82:	6875      	ldr	r5, [r6, #4]
 800ba84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba86:	07d9      	lsls	r1, r3, #31
 800ba88:	d405      	bmi.n	800ba96 <_vfiprintf_r+0x32>
 800ba8a:	89ab      	ldrh	r3, [r5, #12]
 800ba8c:	059a      	lsls	r2, r3, #22
 800ba8e:	d402      	bmi.n	800ba96 <_vfiprintf_r+0x32>
 800ba90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba92:	f000 fba1 	bl	800c1d8 <__retarget_lock_acquire_recursive>
 800ba96:	89ab      	ldrh	r3, [r5, #12]
 800ba98:	071b      	lsls	r3, r3, #28
 800ba9a:	d501      	bpl.n	800baa0 <_vfiprintf_r+0x3c>
 800ba9c:	692b      	ldr	r3, [r5, #16]
 800ba9e:	b9eb      	cbnz	r3, 800badc <_vfiprintf_r+0x78>
 800baa0:	4629      	mov	r1, r5
 800baa2:	4630      	mov	r0, r6
 800baa4:	f000 f96e 	bl	800bd84 <__swsetup_r>
 800baa8:	b1c0      	cbz	r0, 800badc <_vfiprintf_r+0x78>
 800baaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800baac:	07dc      	lsls	r4, r3, #31
 800baae:	d50e      	bpl.n	800bace <_vfiprintf_r+0x6a>
 800bab0:	f04f 30ff 	mov.w	r0, #4294967295
 800bab4:	b01d      	add	sp, #116	; 0x74
 800bab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baba:	4b7b      	ldr	r3, [pc, #492]	; (800bca8 <_vfiprintf_r+0x244>)
 800babc:	429d      	cmp	r5, r3
 800babe:	d101      	bne.n	800bac4 <_vfiprintf_r+0x60>
 800bac0:	68b5      	ldr	r5, [r6, #8]
 800bac2:	e7df      	b.n	800ba84 <_vfiprintf_r+0x20>
 800bac4:	4b79      	ldr	r3, [pc, #484]	; (800bcac <_vfiprintf_r+0x248>)
 800bac6:	429d      	cmp	r5, r3
 800bac8:	bf08      	it	eq
 800baca:	68f5      	ldreq	r5, [r6, #12]
 800bacc:	e7da      	b.n	800ba84 <_vfiprintf_r+0x20>
 800bace:	89ab      	ldrh	r3, [r5, #12]
 800bad0:	0598      	lsls	r0, r3, #22
 800bad2:	d4ed      	bmi.n	800bab0 <_vfiprintf_r+0x4c>
 800bad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bad6:	f000 fb80 	bl	800c1da <__retarget_lock_release_recursive>
 800bada:	e7e9      	b.n	800bab0 <_vfiprintf_r+0x4c>
 800badc:	2300      	movs	r3, #0
 800bade:	9309      	str	r3, [sp, #36]	; 0x24
 800bae0:	2320      	movs	r3, #32
 800bae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bae6:	2330      	movs	r3, #48	; 0x30
 800bae8:	f04f 0901 	mov.w	r9, #1
 800baec:	f8cd 800c 	str.w	r8, [sp, #12]
 800baf0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bcb0 <_vfiprintf_r+0x24c>
 800baf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baf8:	4623      	mov	r3, r4
 800bafa:	469a      	mov	sl, r3
 800bafc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb00:	b10a      	cbz	r2, 800bb06 <_vfiprintf_r+0xa2>
 800bb02:	2a25      	cmp	r2, #37	; 0x25
 800bb04:	d1f9      	bne.n	800bafa <_vfiprintf_r+0x96>
 800bb06:	ebba 0b04 	subs.w	fp, sl, r4
 800bb0a:	d00b      	beq.n	800bb24 <_vfiprintf_r+0xc0>
 800bb0c:	465b      	mov	r3, fp
 800bb0e:	4622      	mov	r2, r4
 800bb10:	4629      	mov	r1, r5
 800bb12:	4630      	mov	r0, r6
 800bb14:	f7ff ff94 	bl	800ba40 <__sfputs_r>
 800bb18:	3001      	adds	r0, #1
 800bb1a:	f000 80aa 	beq.w	800bc72 <_vfiprintf_r+0x20e>
 800bb1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb20:	445a      	add	r2, fp
 800bb22:	9209      	str	r2, [sp, #36]	; 0x24
 800bb24:	f89a 3000 	ldrb.w	r3, [sl]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	f000 80a2 	beq.w	800bc72 <_vfiprintf_r+0x20e>
 800bb2e:	2300      	movs	r3, #0
 800bb30:	f04f 32ff 	mov.w	r2, #4294967295
 800bb34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb38:	f10a 0a01 	add.w	sl, sl, #1
 800bb3c:	9304      	str	r3, [sp, #16]
 800bb3e:	9307      	str	r3, [sp, #28]
 800bb40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb44:	931a      	str	r3, [sp, #104]	; 0x68
 800bb46:	4654      	mov	r4, sl
 800bb48:	2205      	movs	r2, #5
 800bb4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb4e:	4858      	ldr	r0, [pc, #352]	; (800bcb0 <_vfiprintf_r+0x24c>)
 800bb50:	f7ff f8d0 	bl	800acf4 <memchr>
 800bb54:	9a04      	ldr	r2, [sp, #16]
 800bb56:	b9d8      	cbnz	r0, 800bb90 <_vfiprintf_r+0x12c>
 800bb58:	06d1      	lsls	r1, r2, #27
 800bb5a:	bf44      	itt	mi
 800bb5c:	2320      	movmi	r3, #32
 800bb5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb62:	0713      	lsls	r3, r2, #28
 800bb64:	bf44      	itt	mi
 800bb66:	232b      	movmi	r3, #43	; 0x2b
 800bb68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bb70:	2b2a      	cmp	r3, #42	; 0x2a
 800bb72:	d015      	beq.n	800bba0 <_vfiprintf_r+0x13c>
 800bb74:	4654      	mov	r4, sl
 800bb76:	2000      	movs	r0, #0
 800bb78:	f04f 0c0a 	mov.w	ip, #10
 800bb7c:	9a07      	ldr	r2, [sp, #28]
 800bb7e:	4621      	mov	r1, r4
 800bb80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb84:	3b30      	subs	r3, #48	; 0x30
 800bb86:	2b09      	cmp	r3, #9
 800bb88:	d94e      	bls.n	800bc28 <_vfiprintf_r+0x1c4>
 800bb8a:	b1b0      	cbz	r0, 800bbba <_vfiprintf_r+0x156>
 800bb8c:	9207      	str	r2, [sp, #28]
 800bb8e:	e014      	b.n	800bbba <_vfiprintf_r+0x156>
 800bb90:	eba0 0308 	sub.w	r3, r0, r8
 800bb94:	fa09 f303 	lsl.w	r3, r9, r3
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	46a2      	mov	sl, r4
 800bb9c:	9304      	str	r3, [sp, #16]
 800bb9e:	e7d2      	b.n	800bb46 <_vfiprintf_r+0xe2>
 800bba0:	9b03      	ldr	r3, [sp, #12]
 800bba2:	1d19      	adds	r1, r3, #4
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	9103      	str	r1, [sp, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	bfbb      	ittet	lt
 800bbac:	425b      	neglt	r3, r3
 800bbae:	f042 0202 	orrlt.w	r2, r2, #2
 800bbb2:	9307      	strge	r3, [sp, #28]
 800bbb4:	9307      	strlt	r3, [sp, #28]
 800bbb6:	bfb8      	it	lt
 800bbb8:	9204      	strlt	r2, [sp, #16]
 800bbba:	7823      	ldrb	r3, [r4, #0]
 800bbbc:	2b2e      	cmp	r3, #46	; 0x2e
 800bbbe:	d10c      	bne.n	800bbda <_vfiprintf_r+0x176>
 800bbc0:	7863      	ldrb	r3, [r4, #1]
 800bbc2:	2b2a      	cmp	r3, #42	; 0x2a
 800bbc4:	d135      	bne.n	800bc32 <_vfiprintf_r+0x1ce>
 800bbc6:	9b03      	ldr	r3, [sp, #12]
 800bbc8:	3402      	adds	r4, #2
 800bbca:	1d1a      	adds	r2, r3, #4
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	9203      	str	r2, [sp, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	bfb8      	it	lt
 800bbd4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbd8:	9305      	str	r3, [sp, #20]
 800bbda:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bcb4 <_vfiprintf_r+0x250>
 800bbde:	2203      	movs	r2, #3
 800bbe0:	4650      	mov	r0, sl
 800bbe2:	7821      	ldrb	r1, [r4, #0]
 800bbe4:	f7ff f886 	bl	800acf4 <memchr>
 800bbe8:	b140      	cbz	r0, 800bbfc <_vfiprintf_r+0x198>
 800bbea:	2340      	movs	r3, #64	; 0x40
 800bbec:	eba0 000a 	sub.w	r0, r0, sl
 800bbf0:	fa03 f000 	lsl.w	r0, r3, r0
 800bbf4:	9b04      	ldr	r3, [sp, #16]
 800bbf6:	3401      	adds	r4, #1
 800bbf8:	4303      	orrs	r3, r0
 800bbfa:	9304      	str	r3, [sp, #16]
 800bbfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc00:	2206      	movs	r2, #6
 800bc02:	482d      	ldr	r0, [pc, #180]	; (800bcb8 <_vfiprintf_r+0x254>)
 800bc04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc08:	f7ff f874 	bl	800acf4 <memchr>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d03f      	beq.n	800bc90 <_vfiprintf_r+0x22c>
 800bc10:	4b2a      	ldr	r3, [pc, #168]	; (800bcbc <_vfiprintf_r+0x258>)
 800bc12:	bb1b      	cbnz	r3, 800bc5c <_vfiprintf_r+0x1f8>
 800bc14:	9b03      	ldr	r3, [sp, #12]
 800bc16:	3307      	adds	r3, #7
 800bc18:	f023 0307 	bic.w	r3, r3, #7
 800bc1c:	3308      	adds	r3, #8
 800bc1e:	9303      	str	r3, [sp, #12]
 800bc20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc22:	443b      	add	r3, r7
 800bc24:	9309      	str	r3, [sp, #36]	; 0x24
 800bc26:	e767      	b.n	800baf8 <_vfiprintf_r+0x94>
 800bc28:	460c      	mov	r4, r1
 800bc2a:	2001      	movs	r0, #1
 800bc2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc30:	e7a5      	b.n	800bb7e <_vfiprintf_r+0x11a>
 800bc32:	2300      	movs	r3, #0
 800bc34:	f04f 0c0a 	mov.w	ip, #10
 800bc38:	4619      	mov	r1, r3
 800bc3a:	3401      	adds	r4, #1
 800bc3c:	9305      	str	r3, [sp, #20]
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc44:	3a30      	subs	r2, #48	; 0x30
 800bc46:	2a09      	cmp	r2, #9
 800bc48:	d903      	bls.n	800bc52 <_vfiprintf_r+0x1ee>
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d0c5      	beq.n	800bbda <_vfiprintf_r+0x176>
 800bc4e:	9105      	str	r1, [sp, #20]
 800bc50:	e7c3      	b.n	800bbda <_vfiprintf_r+0x176>
 800bc52:	4604      	mov	r4, r0
 800bc54:	2301      	movs	r3, #1
 800bc56:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc5a:	e7f0      	b.n	800bc3e <_vfiprintf_r+0x1da>
 800bc5c:	ab03      	add	r3, sp, #12
 800bc5e:	9300      	str	r3, [sp, #0]
 800bc60:	462a      	mov	r2, r5
 800bc62:	4630      	mov	r0, r6
 800bc64:	4b16      	ldr	r3, [pc, #88]	; (800bcc0 <_vfiprintf_r+0x25c>)
 800bc66:	a904      	add	r1, sp, #16
 800bc68:	f7fd fdc6 	bl	80097f8 <_printf_float>
 800bc6c:	4607      	mov	r7, r0
 800bc6e:	1c78      	adds	r0, r7, #1
 800bc70:	d1d6      	bne.n	800bc20 <_vfiprintf_r+0x1bc>
 800bc72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc74:	07d9      	lsls	r1, r3, #31
 800bc76:	d405      	bmi.n	800bc84 <_vfiprintf_r+0x220>
 800bc78:	89ab      	ldrh	r3, [r5, #12]
 800bc7a:	059a      	lsls	r2, r3, #22
 800bc7c:	d402      	bmi.n	800bc84 <_vfiprintf_r+0x220>
 800bc7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc80:	f000 faab 	bl	800c1da <__retarget_lock_release_recursive>
 800bc84:	89ab      	ldrh	r3, [r5, #12]
 800bc86:	065b      	lsls	r3, r3, #25
 800bc88:	f53f af12 	bmi.w	800bab0 <_vfiprintf_r+0x4c>
 800bc8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc8e:	e711      	b.n	800bab4 <_vfiprintf_r+0x50>
 800bc90:	ab03      	add	r3, sp, #12
 800bc92:	9300      	str	r3, [sp, #0]
 800bc94:	462a      	mov	r2, r5
 800bc96:	4630      	mov	r0, r6
 800bc98:	4b09      	ldr	r3, [pc, #36]	; (800bcc0 <_vfiprintf_r+0x25c>)
 800bc9a:	a904      	add	r1, sp, #16
 800bc9c:	f7fe f848 	bl	8009d30 <_printf_i>
 800bca0:	e7e4      	b.n	800bc6c <_vfiprintf_r+0x208>
 800bca2:	bf00      	nop
 800bca4:	0800c8c4 	.word	0x0800c8c4
 800bca8:	0800c8e4 	.word	0x0800c8e4
 800bcac:	0800c8a4 	.word	0x0800c8a4
 800bcb0:	0800c74c 	.word	0x0800c74c
 800bcb4:	0800c752 	.word	0x0800c752
 800bcb8:	0800c756 	.word	0x0800c756
 800bcbc:	080097f9 	.word	0x080097f9
 800bcc0:	0800ba41 	.word	0x0800ba41

0800bcc4 <__swbuf_r>:
 800bcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc6:	460e      	mov	r6, r1
 800bcc8:	4614      	mov	r4, r2
 800bcca:	4605      	mov	r5, r0
 800bccc:	b118      	cbz	r0, 800bcd6 <__swbuf_r+0x12>
 800bcce:	6983      	ldr	r3, [r0, #24]
 800bcd0:	b90b      	cbnz	r3, 800bcd6 <__swbuf_r+0x12>
 800bcd2:	f000 f9e3 	bl	800c09c <__sinit>
 800bcd6:	4b21      	ldr	r3, [pc, #132]	; (800bd5c <__swbuf_r+0x98>)
 800bcd8:	429c      	cmp	r4, r3
 800bcda:	d12b      	bne.n	800bd34 <__swbuf_r+0x70>
 800bcdc:	686c      	ldr	r4, [r5, #4]
 800bcde:	69a3      	ldr	r3, [r4, #24]
 800bce0:	60a3      	str	r3, [r4, #8]
 800bce2:	89a3      	ldrh	r3, [r4, #12]
 800bce4:	071a      	lsls	r2, r3, #28
 800bce6:	d52f      	bpl.n	800bd48 <__swbuf_r+0x84>
 800bce8:	6923      	ldr	r3, [r4, #16]
 800bcea:	b36b      	cbz	r3, 800bd48 <__swbuf_r+0x84>
 800bcec:	6923      	ldr	r3, [r4, #16]
 800bcee:	6820      	ldr	r0, [r4, #0]
 800bcf0:	b2f6      	uxtb	r6, r6
 800bcf2:	1ac0      	subs	r0, r0, r3
 800bcf4:	6963      	ldr	r3, [r4, #20]
 800bcf6:	4637      	mov	r7, r6
 800bcf8:	4283      	cmp	r3, r0
 800bcfa:	dc04      	bgt.n	800bd06 <__swbuf_r+0x42>
 800bcfc:	4621      	mov	r1, r4
 800bcfe:	4628      	mov	r0, r5
 800bd00:	f000 f938 	bl	800bf74 <_fflush_r>
 800bd04:	bb30      	cbnz	r0, 800bd54 <__swbuf_r+0x90>
 800bd06:	68a3      	ldr	r3, [r4, #8]
 800bd08:	3001      	adds	r0, #1
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	60a3      	str	r3, [r4, #8]
 800bd0e:	6823      	ldr	r3, [r4, #0]
 800bd10:	1c5a      	adds	r2, r3, #1
 800bd12:	6022      	str	r2, [r4, #0]
 800bd14:	701e      	strb	r6, [r3, #0]
 800bd16:	6963      	ldr	r3, [r4, #20]
 800bd18:	4283      	cmp	r3, r0
 800bd1a:	d004      	beq.n	800bd26 <__swbuf_r+0x62>
 800bd1c:	89a3      	ldrh	r3, [r4, #12]
 800bd1e:	07db      	lsls	r3, r3, #31
 800bd20:	d506      	bpl.n	800bd30 <__swbuf_r+0x6c>
 800bd22:	2e0a      	cmp	r6, #10
 800bd24:	d104      	bne.n	800bd30 <__swbuf_r+0x6c>
 800bd26:	4621      	mov	r1, r4
 800bd28:	4628      	mov	r0, r5
 800bd2a:	f000 f923 	bl	800bf74 <_fflush_r>
 800bd2e:	b988      	cbnz	r0, 800bd54 <__swbuf_r+0x90>
 800bd30:	4638      	mov	r0, r7
 800bd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd34:	4b0a      	ldr	r3, [pc, #40]	; (800bd60 <__swbuf_r+0x9c>)
 800bd36:	429c      	cmp	r4, r3
 800bd38:	d101      	bne.n	800bd3e <__swbuf_r+0x7a>
 800bd3a:	68ac      	ldr	r4, [r5, #8]
 800bd3c:	e7cf      	b.n	800bcde <__swbuf_r+0x1a>
 800bd3e:	4b09      	ldr	r3, [pc, #36]	; (800bd64 <__swbuf_r+0xa0>)
 800bd40:	429c      	cmp	r4, r3
 800bd42:	bf08      	it	eq
 800bd44:	68ec      	ldreq	r4, [r5, #12]
 800bd46:	e7ca      	b.n	800bcde <__swbuf_r+0x1a>
 800bd48:	4621      	mov	r1, r4
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	f000 f81a 	bl	800bd84 <__swsetup_r>
 800bd50:	2800      	cmp	r0, #0
 800bd52:	d0cb      	beq.n	800bcec <__swbuf_r+0x28>
 800bd54:	f04f 37ff 	mov.w	r7, #4294967295
 800bd58:	e7ea      	b.n	800bd30 <__swbuf_r+0x6c>
 800bd5a:	bf00      	nop
 800bd5c:	0800c8c4 	.word	0x0800c8c4
 800bd60:	0800c8e4 	.word	0x0800c8e4
 800bd64:	0800c8a4 	.word	0x0800c8a4

0800bd68 <__ascii_wctomb>:
 800bd68:	4603      	mov	r3, r0
 800bd6a:	4608      	mov	r0, r1
 800bd6c:	b141      	cbz	r1, 800bd80 <__ascii_wctomb+0x18>
 800bd6e:	2aff      	cmp	r2, #255	; 0xff
 800bd70:	d904      	bls.n	800bd7c <__ascii_wctomb+0x14>
 800bd72:	228a      	movs	r2, #138	; 0x8a
 800bd74:	f04f 30ff 	mov.w	r0, #4294967295
 800bd78:	601a      	str	r2, [r3, #0]
 800bd7a:	4770      	bx	lr
 800bd7c:	2001      	movs	r0, #1
 800bd7e:	700a      	strb	r2, [r1, #0]
 800bd80:	4770      	bx	lr
	...

0800bd84 <__swsetup_r>:
 800bd84:	4b32      	ldr	r3, [pc, #200]	; (800be50 <__swsetup_r+0xcc>)
 800bd86:	b570      	push	{r4, r5, r6, lr}
 800bd88:	681d      	ldr	r5, [r3, #0]
 800bd8a:	4606      	mov	r6, r0
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	b125      	cbz	r5, 800bd9a <__swsetup_r+0x16>
 800bd90:	69ab      	ldr	r3, [r5, #24]
 800bd92:	b913      	cbnz	r3, 800bd9a <__swsetup_r+0x16>
 800bd94:	4628      	mov	r0, r5
 800bd96:	f000 f981 	bl	800c09c <__sinit>
 800bd9a:	4b2e      	ldr	r3, [pc, #184]	; (800be54 <__swsetup_r+0xd0>)
 800bd9c:	429c      	cmp	r4, r3
 800bd9e:	d10f      	bne.n	800bdc0 <__swsetup_r+0x3c>
 800bda0:	686c      	ldr	r4, [r5, #4]
 800bda2:	89a3      	ldrh	r3, [r4, #12]
 800bda4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bda8:	0719      	lsls	r1, r3, #28
 800bdaa:	d42c      	bmi.n	800be06 <__swsetup_r+0x82>
 800bdac:	06dd      	lsls	r5, r3, #27
 800bdae:	d411      	bmi.n	800bdd4 <__swsetup_r+0x50>
 800bdb0:	2309      	movs	r3, #9
 800bdb2:	6033      	str	r3, [r6, #0]
 800bdb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bdb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbc:	81a3      	strh	r3, [r4, #12]
 800bdbe:	e03e      	b.n	800be3e <__swsetup_r+0xba>
 800bdc0:	4b25      	ldr	r3, [pc, #148]	; (800be58 <__swsetup_r+0xd4>)
 800bdc2:	429c      	cmp	r4, r3
 800bdc4:	d101      	bne.n	800bdca <__swsetup_r+0x46>
 800bdc6:	68ac      	ldr	r4, [r5, #8]
 800bdc8:	e7eb      	b.n	800bda2 <__swsetup_r+0x1e>
 800bdca:	4b24      	ldr	r3, [pc, #144]	; (800be5c <__swsetup_r+0xd8>)
 800bdcc:	429c      	cmp	r4, r3
 800bdce:	bf08      	it	eq
 800bdd0:	68ec      	ldreq	r4, [r5, #12]
 800bdd2:	e7e6      	b.n	800bda2 <__swsetup_r+0x1e>
 800bdd4:	0758      	lsls	r0, r3, #29
 800bdd6:	d512      	bpl.n	800bdfe <__swsetup_r+0x7a>
 800bdd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdda:	b141      	cbz	r1, 800bdee <__swsetup_r+0x6a>
 800bddc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bde0:	4299      	cmp	r1, r3
 800bde2:	d002      	beq.n	800bdea <__swsetup_r+0x66>
 800bde4:	4630      	mov	r0, r6
 800bde6:	f7ff fb37 	bl	800b458 <_free_r>
 800bdea:	2300      	movs	r3, #0
 800bdec:	6363      	str	r3, [r4, #52]	; 0x34
 800bdee:	89a3      	ldrh	r3, [r4, #12]
 800bdf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bdf4:	81a3      	strh	r3, [r4, #12]
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	6063      	str	r3, [r4, #4]
 800bdfa:	6923      	ldr	r3, [r4, #16]
 800bdfc:	6023      	str	r3, [r4, #0]
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	f043 0308 	orr.w	r3, r3, #8
 800be04:	81a3      	strh	r3, [r4, #12]
 800be06:	6923      	ldr	r3, [r4, #16]
 800be08:	b94b      	cbnz	r3, 800be1e <__swsetup_r+0x9a>
 800be0a:	89a3      	ldrh	r3, [r4, #12]
 800be0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be14:	d003      	beq.n	800be1e <__swsetup_r+0x9a>
 800be16:	4621      	mov	r1, r4
 800be18:	4630      	mov	r0, r6
 800be1a:	f000 fa05 	bl	800c228 <__smakebuf_r>
 800be1e:	89a0      	ldrh	r0, [r4, #12]
 800be20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be24:	f010 0301 	ands.w	r3, r0, #1
 800be28:	d00a      	beq.n	800be40 <__swsetup_r+0xbc>
 800be2a:	2300      	movs	r3, #0
 800be2c:	60a3      	str	r3, [r4, #8]
 800be2e:	6963      	ldr	r3, [r4, #20]
 800be30:	425b      	negs	r3, r3
 800be32:	61a3      	str	r3, [r4, #24]
 800be34:	6923      	ldr	r3, [r4, #16]
 800be36:	b943      	cbnz	r3, 800be4a <__swsetup_r+0xc6>
 800be38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be3c:	d1ba      	bne.n	800bdb4 <__swsetup_r+0x30>
 800be3e:	bd70      	pop	{r4, r5, r6, pc}
 800be40:	0781      	lsls	r1, r0, #30
 800be42:	bf58      	it	pl
 800be44:	6963      	ldrpl	r3, [r4, #20]
 800be46:	60a3      	str	r3, [r4, #8]
 800be48:	e7f4      	b.n	800be34 <__swsetup_r+0xb0>
 800be4a:	2000      	movs	r0, #0
 800be4c:	e7f7      	b.n	800be3e <__swsetup_r+0xba>
 800be4e:	bf00      	nop
 800be50:	2000017c 	.word	0x2000017c
 800be54:	0800c8c4 	.word	0x0800c8c4
 800be58:	0800c8e4 	.word	0x0800c8e4
 800be5c:	0800c8a4 	.word	0x0800c8a4

0800be60 <abort>:
 800be60:	2006      	movs	r0, #6
 800be62:	b508      	push	{r3, lr}
 800be64:	f000 fa50 	bl	800c308 <raise>
 800be68:	2001      	movs	r0, #1
 800be6a:	f7f5 f8ca 	bl	8001002 <_exit>
	...

0800be70 <__sflush_r>:
 800be70:	898a      	ldrh	r2, [r1, #12]
 800be72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be74:	4605      	mov	r5, r0
 800be76:	0710      	lsls	r0, r2, #28
 800be78:	460c      	mov	r4, r1
 800be7a:	d457      	bmi.n	800bf2c <__sflush_r+0xbc>
 800be7c:	684b      	ldr	r3, [r1, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	dc04      	bgt.n	800be8c <__sflush_r+0x1c>
 800be82:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be84:	2b00      	cmp	r3, #0
 800be86:	dc01      	bgt.n	800be8c <__sflush_r+0x1c>
 800be88:	2000      	movs	r0, #0
 800be8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be8e:	2e00      	cmp	r6, #0
 800be90:	d0fa      	beq.n	800be88 <__sflush_r+0x18>
 800be92:	2300      	movs	r3, #0
 800be94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be98:	682f      	ldr	r7, [r5, #0]
 800be9a:	602b      	str	r3, [r5, #0]
 800be9c:	d032      	beq.n	800bf04 <__sflush_r+0x94>
 800be9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bea0:	89a3      	ldrh	r3, [r4, #12]
 800bea2:	075a      	lsls	r2, r3, #29
 800bea4:	d505      	bpl.n	800beb2 <__sflush_r+0x42>
 800bea6:	6863      	ldr	r3, [r4, #4]
 800bea8:	1ac0      	subs	r0, r0, r3
 800beaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800beac:	b10b      	cbz	r3, 800beb2 <__sflush_r+0x42>
 800beae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800beb0:	1ac0      	subs	r0, r0, r3
 800beb2:	2300      	movs	r3, #0
 800beb4:	4602      	mov	r2, r0
 800beb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800beb8:	4628      	mov	r0, r5
 800beba:	6a21      	ldr	r1, [r4, #32]
 800bebc:	47b0      	blx	r6
 800bebe:	1c43      	adds	r3, r0, #1
 800bec0:	89a3      	ldrh	r3, [r4, #12]
 800bec2:	d106      	bne.n	800bed2 <__sflush_r+0x62>
 800bec4:	6829      	ldr	r1, [r5, #0]
 800bec6:	291d      	cmp	r1, #29
 800bec8:	d82c      	bhi.n	800bf24 <__sflush_r+0xb4>
 800beca:	4a29      	ldr	r2, [pc, #164]	; (800bf70 <__sflush_r+0x100>)
 800becc:	40ca      	lsrs	r2, r1
 800bece:	07d6      	lsls	r6, r2, #31
 800bed0:	d528      	bpl.n	800bf24 <__sflush_r+0xb4>
 800bed2:	2200      	movs	r2, #0
 800bed4:	6062      	str	r2, [r4, #4]
 800bed6:	6922      	ldr	r2, [r4, #16]
 800bed8:	04d9      	lsls	r1, r3, #19
 800beda:	6022      	str	r2, [r4, #0]
 800bedc:	d504      	bpl.n	800bee8 <__sflush_r+0x78>
 800bede:	1c42      	adds	r2, r0, #1
 800bee0:	d101      	bne.n	800bee6 <__sflush_r+0x76>
 800bee2:	682b      	ldr	r3, [r5, #0]
 800bee4:	b903      	cbnz	r3, 800bee8 <__sflush_r+0x78>
 800bee6:	6560      	str	r0, [r4, #84]	; 0x54
 800bee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800beea:	602f      	str	r7, [r5, #0]
 800beec:	2900      	cmp	r1, #0
 800beee:	d0cb      	beq.n	800be88 <__sflush_r+0x18>
 800bef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bef4:	4299      	cmp	r1, r3
 800bef6:	d002      	beq.n	800befe <__sflush_r+0x8e>
 800bef8:	4628      	mov	r0, r5
 800befa:	f7ff faad 	bl	800b458 <_free_r>
 800befe:	2000      	movs	r0, #0
 800bf00:	6360      	str	r0, [r4, #52]	; 0x34
 800bf02:	e7c2      	b.n	800be8a <__sflush_r+0x1a>
 800bf04:	6a21      	ldr	r1, [r4, #32]
 800bf06:	2301      	movs	r3, #1
 800bf08:	4628      	mov	r0, r5
 800bf0a:	47b0      	blx	r6
 800bf0c:	1c41      	adds	r1, r0, #1
 800bf0e:	d1c7      	bne.n	800bea0 <__sflush_r+0x30>
 800bf10:	682b      	ldr	r3, [r5, #0]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d0c4      	beq.n	800bea0 <__sflush_r+0x30>
 800bf16:	2b1d      	cmp	r3, #29
 800bf18:	d001      	beq.n	800bf1e <__sflush_r+0xae>
 800bf1a:	2b16      	cmp	r3, #22
 800bf1c:	d101      	bne.n	800bf22 <__sflush_r+0xb2>
 800bf1e:	602f      	str	r7, [r5, #0]
 800bf20:	e7b2      	b.n	800be88 <__sflush_r+0x18>
 800bf22:	89a3      	ldrh	r3, [r4, #12]
 800bf24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf28:	81a3      	strh	r3, [r4, #12]
 800bf2a:	e7ae      	b.n	800be8a <__sflush_r+0x1a>
 800bf2c:	690f      	ldr	r7, [r1, #16]
 800bf2e:	2f00      	cmp	r7, #0
 800bf30:	d0aa      	beq.n	800be88 <__sflush_r+0x18>
 800bf32:	0793      	lsls	r3, r2, #30
 800bf34:	bf18      	it	ne
 800bf36:	2300      	movne	r3, #0
 800bf38:	680e      	ldr	r6, [r1, #0]
 800bf3a:	bf08      	it	eq
 800bf3c:	694b      	ldreq	r3, [r1, #20]
 800bf3e:	1bf6      	subs	r6, r6, r7
 800bf40:	600f      	str	r7, [r1, #0]
 800bf42:	608b      	str	r3, [r1, #8]
 800bf44:	2e00      	cmp	r6, #0
 800bf46:	dd9f      	ble.n	800be88 <__sflush_r+0x18>
 800bf48:	4633      	mov	r3, r6
 800bf4a:	463a      	mov	r2, r7
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	6a21      	ldr	r1, [r4, #32]
 800bf50:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bf54:	47e0      	blx	ip
 800bf56:	2800      	cmp	r0, #0
 800bf58:	dc06      	bgt.n	800bf68 <__sflush_r+0xf8>
 800bf5a:	89a3      	ldrh	r3, [r4, #12]
 800bf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf64:	81a3      	strh	r3, [r4, #12]
 800bf66:	e790      	b.n	800be8a <__sflush_r+0x1a>
 800bf68:	4407      	add	r7, r0
 800bf6a:	1a36      	subs	r6, r6, r0
 800bf6c:	e7ea      	b.n	800bf44 <__sflush_r+0xd4>
 800bf6e:	bf00      	nop
 800bf70:	20400001 	.word	0x20400001

0800bf74 <_fflush_r>:
 800bf74:	b538      	push	{r3, r4, r5, lr}
 800bf76:	690b      	ldr	r3, [r1, #16]
 800bf78:	4605      	mov	r5, r0
 800bf7a:	460c      	mov	r4, r1
 800bf7c:	b913      	cbnz	r3, 800bf84 <_fflush_r+0x10>
 800bf7e:	2500      	movs	r5, #0
 800bf80:	4628      	mov	r0, r5
 800bf82:	bd38      	pop	{r3, r4, r5, pc}
 800bf84:	b118      	cbz	r0, 800bf8e <_fflush_r+0x1a>
 800bf86:	6983      	ldr	r3, [r0, #24]
 800bf88:	b90b      	cbnz	r3, 800bf8e <_fflush_r+0x1a>
 800bf8a:	f000 f887 	bl	800c09c <__sinit>
 800bf8e:	4b14      	ldr	r3, [pc, #80]	; (800bfe0 <_fflush_r+0x6c>)
 800bf90:	429c      	cmp	r4, r3
 800bf92:	d11b      	bne.n	800bfcc <_fflush_r+0x58>
 800bf94:	686c      	ldr	r4, [r5, #4]
 800bf96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d0ef      	beq.n	800bf7e <_fflush_r+0xa>
 800bf9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bfa0:	07d0      	lsls	r0, r2, #31
 800bfa2:	d404      	bmi.n	800bfae <_fflush_r+0x3a>
 800bfa4:	0599      	lsls	r1, r3, #22
 800bfa6:	d402      	bmi.n	800bfae <_fflush_r+0x3a>
 800bfa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfaa:	f000 f915 	bl	800c1d8 <__retarget_lock_acquire_recursive>
 800bfae:	4628      	mov	r0, r5
 800bfb0:	4621      	mov	r1, r4
 800bfb2:	f7ff ff5d 	bl	800be70 <__sflush_r>
 800bfb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfb8:	4605      	mov	r5, r0
 800bfba:	07da      	lsls	r2, r3, #31
 800bfbc:	d4e0      	bmi.n	800bf80 <_fflush_r+0xc>
 800bfbe:	89a3      	ldrh	r3, [r4, #12]
 800bfc0:	059b      	lsls	r3, r3, #22
 800bfc2:	d4dd      	bmi.n	800bf80 <_fflush_r+0xc>
 800bfc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfc6:	f000 f908 	bl	800c1da <__retarget_lock_release_recursive>
 800bfca:	e7d9      	b.n	800bf80 <_fflush_r+0xc>
 800bfcc:	4b05      	ldr	r3, [pc, #20]	; (800bfe4 <_fflush_r+0x70>)
 800bfce:	429c      	cmp	r4, r3
 800bfd0:	d101      	bne.n	800bfd6 <_fflush_r+0x62>
 800bfd2:	68ac      	ldr	r4, [r5, #8]
 800bfd4:	e7df      	b.n	800bf96 <_fflush_r+0x22>
 800bfd6:	4b04      	ldr	r3, [pc, #16]	; (800bfe8 <_fflush_r+0x74>)
 800bfd8:	429c      	cmp	r4, r3
 800bfda:	bf08      	it	eq
 800bfdc:	68ec      	ldreq	r4, [r5, #12]
 800bfde:	e7da      	b.n	800bf96 <_fflush_r+0x22>
 800bfe0:	0800c8c4 	.word	0x0800c8c4
 800bfe4:	0800c8e4 	.word	0x0800c8e4
 800bfe8:	0800c8a4 	.word	0x0800c8a4

0800bfec <std>:
 800bfec:	2300      	movs	r3, #0
 800bfee:	b510      	push	{r4, lr}
 800bff0:	4604      	mov	r4, r0
 800bff2:	e9c0 3300 	strd	r3, r3, [r0]
 800bff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bffa:	6083      	str	r3, [r0, #8]
 800bffc:	8181      	strh	r1, [r0, #12]
 800bffe:	6643      	str	r3, [r0, #100]	; 0x64
 800c000:	81c2      	strh	r2, [r0, #14]
 800c002:	6183      	str	r3, [r0, #24]
 800c004:	4619      	mov	r1, r3
 800c006:	2208      	movs	r2, #8
 800c008:	305c      	adds	r0, #92	; 0x5c
 800c00a:	f7fd fb4f 	bl	80096ac <memset>
 800c00e:	4b05      	ldr	r3, [pc, #20]	; (800c024 <std+0x38>)
 800c010:	6224      	str	r4, [r4, #32]
 800c012:	6263      	str	r3, [r4, #36]	; 0x24
 800c014:	4b04      	ldr	r3, [pc, #16]	; (800c028 <std+0x3c>)
 800c016:	62a3      	str	r3, [r4, #40]	; 0x28
 800c018:	4b04      	ldr	r3, [pc, #16]	; (800c02c <std+0x40>)
 800c01a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c01c:	4b04      	ldr	r3, [pc, #16]	; (800c030 <std+0x44>)
 800c01e:	6323      	str	r3, [r4, #48]	; 0x30
 800c020:	bd10      	pop	{r4, pc}
 800c022:	bf00      	nop
 800c024:	0800c341 	.word	0x0800c341
 800c028:	0800c363 	.word	0x0800c363
 800c02c:	0800c39b 	.word	0x0800c39b
 800c030:	0800c3bf 	.word	0x0800c3bf

0800c034 <_cleanup_r>:
 800c034:	4901      	ldr	r1, [pc, #4]	; (800c03c <_cleanup_r+0x8>)
 800c036:	f000 b8af 	b.w	800c198 <_fwalk_reent>
 800c03a:	bf00      	nop
 800c03c:	0800bf75 	.word	0x0800bf75

0800c040 <__sfmoreglue>:
 800c040:	2268      	movs	r2, #104	; 0x68
 800c042:	b570      	push	{r4, r5, r6, lr}
 800c044:	1e4d      	subs	r5, r1, #1
 800c046:	4355      	muls	r5, r2
 800c048:	460e      	mov	r6, r1
 800c04a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c04e:	f7ff fa6b 	bl	800b528 <_malloc_r>
 800c052:	4604      	mov	r4, r0
 800c054:	b140      	cbz	r0, 800c068 <__sfmoreglue+0x28>
 800c056:	2100      	movs	r1, #0
 800c058:	e9c0 1600 	strd	r1, r6, [r0]
 800c05c:	300c      	adds	r0, #12
 800c05e:	60a0      	str	r0, [r4, #8]
 800c060:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c064:	f7fd fb22 	bl	80096ac <memset>
 800c068:	4620      	mov	r0, r4
 800c06a:	bd70      	pop	{r4, r5, r6, pc}

0800c06c <__sfp_lock_acquire>:
 800c06c:	4801      	ldr	r0, [pc, #4]	; (800c074 <__sfp_lock_acquire+0x8>)
 800c06e:	f000 b8b3 	b.w	800c1d8 <__retarget_lock_acquire_recursive>
 800c072:	bf00      	nop
 800c074:	200015d5 	.word	0x200015d5

0800c078 <__sfp_lock_release>:
 800c078:	4801      	ldr	r0, [pc, #4]	; (800c080 <__sfp_lock_release+0x8>)
 800c07a:	f000 b8ae 	b.w	800c1da <__retarget_lock_release_recursive>
 800c07e:	bf00      	nop
 800c080:	200015d5 	.word	0x200015d5

0800c084 <__sinit_lock_acquire>:
 800c084:	4801      	ldr	r0, [pc, #4]	; (800c08c <__sinit_lock_acquire+0x8>)
 800c086:	f000 b8a7 	b.w	800c1d8 <__retarget_lock_acquire_recursive>
 800c08a:	bf00      	nop
 800c08c:	200015d6 	.word	0x200015d6

0800c090 <__sinit_lock_release>:
 800c090:	4801      	ldr	r0, [pc, #4]	; (800c098 <__sinit_lock_release+0x8>)
 800c092:	f000 b8a2 	b.w	800c1da <__retarget_lock_release_recursive>
 800c096:	bf00      	nop
 800c098:	200015d6 	.word	0x200015d6

0800c09c <__sinit>:
 800c09c:	b510      	push	{r4, lr}
 800c09e:	4604      	mov	r4, r0
 800c0a0:	f7ff fff0 	bl	800c084 <__sinit_lock_acquire>
 800c0a4:	69a3      	ldr	r3, [r4, #24]
 800c0a6:	b11b      	cbz	r3, 800c0b0 <__sinit+0x14>
 800c0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0ac:	f7ff bff0 	b.w	800c090 <__sinit_lock_release>
 800c0b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c0b4:	6523      	str	r3, [r4, #80]	; 0x50
 800c0b6:	4b13      	ldr	r3, [pc, #76]	; (800c104 <__sinit+0x68>)
 800c0b8:	4a13      	ldr	r2, [pc, #76]	; (800c108 <__sinit+0x6c>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	62a2      	str	r2, [r4, #40]	; 0x28
 800c0be:	42a3      	cmp	r3, r4
 800c0c0:	bf08      	it	eq
 800c0c2:	2301      	moveq	r3, #1
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	bf08      	it	eq
 800c0c8:	61a3      	streq	r3, [r4, #24]
 800c0ca:	f000 f81f 	bl	800c10c <__sfp>
 800c0ce:	6060      	str	r0, [r4, #4]
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f000 f81b 	bl	800c10c <__sfp>
 800c0d6:	60a0      	str	r0, [r4, #8]
 800c0d8:	4620      	mov	r0, r4
 800c0da:	f000 f817 	bl	800c10c <__sfp>
 800c0de:	2200      	movs	r2, #0
 800c0e0:	2104      	movs	r1, #4
 800c0e2:	60e0      	str	r0, [r4, #12]
 800c0e4:	6860      	ldr	r0, [r4, #4]
 800c0e6:	f7ff ff81 	bl	800bfec <std>
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	2109      	movs	r1, #9
 800c0ee:	68a0      	ldr	r0, [r4, #8]
 800c0f0:	f7ff ff7c 	bl	800bfec <std>
 800c0f4:	2202      	movs	r2, #2
 800c0f6:	2112      	movs	r1, #18
 800c0f8:	68e0      	ldr	r0, [r4, #12]
 800c0fa:	f7ff ff77 	bl	800bfec <std>
 800c0fe:	2301      	movs	r3, #1
 800c100:	61a3      	str	r3, [r4, #24]
 800c102:	e7d1      	b.n	800c0a8 <__sinit+0xc>
 800c104:	0800c52c 	.word	0x0800c52c
 800c108:	0800c035 	.word	0x0800c035

0800c10c <__sfp>:
 800c10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10e:	4607      	mov	r7, r0
 800c110:	f7ff ffac 	bl	800c06c <__sfp_lock_acquire>
 800c114:	4b1e      	ldr	r3, [pc, #120]	; (800c190 <__sfp+0x84>)
 800c116:	681e      	ldr	r6, [r3, #0]
 800c118:	69b3      	ldr	r3, [r6, #24]
 800c11a:	b913      	cbnz	r3, 800c122 <__sfp+0x16>
 800c11c:	4630      	mov	r0, r6
 800c11e:	f7ff ffbd 	bl	800c09c <__sinit>
 800c122:	3648      	adds	r6, #72	; 0x48
 800c124:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c128:	3b01      	subs	r3, #1
 800c12a:	d503      	bpl.n	800c134 <__sfp+0x28>
 800c12c:	6833      	ldr	r3, [r6, #0]
 800c12e:	b30b      	cbz	r3, 800c174 <__sfp+0x68>
 800c130:	6836      	ldr	r6, [r6, #0]
 800c132:	e7f7      	b.n	800c124 <__sfp+0x18>
 800c134:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c138:	b9d5      	cbnz	r5, 800c170 <__sfp+0x64>
 800c13a:	4b16      	ldr	r3, [pc, #88]	; (800c194 <__sfp+0x88>)
 800c13c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c140:	60e3      	str	r3, [r4, #12]
 800c142:	6665      	str	r5, [r4, #100]	; 0x64
 800c144:	f000 f847 	bl	800c1d6 <__retarget_lock_init_recursive>
 800c148:	f7ff ff96 	bl	800c078 <__sfp_lock_release>
 800c14c:	2208      	movs	r2, #8
 800c14e:	4629      	mov	r1, r5
 800c150:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c154:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c158:	6025      	str	r5, [r4, #0]
 800c15a:	61a5      	str	r5, [r4, #24]
 800c15c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c160:	f7fd faa4 	bl	80096ac <memset>
 800c164:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c168:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c16c:	4620      	mov	r0, r4
 800c16e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c170:	3468      	adds	r4, #104	; 0x68
 800c172:	e7d9      	b.n	800c128 <__sfp+0x1c>
 800c174:	2104      	movs	r1, #4
 800c176:	4638      	mov	r0, r7
 800c178:	f7ff ff62 	bl	800c040 <__sfmoreglue>
 800c17c:	4604      	mov	r4, r0
 800c17e:	6030      	str	r0, [r6, #0]
 800c180:	2800      	cmp	r0, #0
 800c182:	d1d5      	bne.n	800c130 <__sfp+0x24>
 800c184:	f7ff ff78 	bl	800c078 <__sfp_lock_release>
 800c188:	230c      	movs	r3, #12
 800c18a:	603b      	str	r3, [r7, #0]
 800c18c:	e7ee      	b.n	800c16c <__sfp+0x60>
 800c18e:	bf00      	nop
 800c190:	0800c52c 	.word	0x0800c52c
 800c194:	ffff0001 	.word	0xffff0001

0800c198 <_fwalk_reent>:
 800c198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c19c:	4606      	mov	r6, r0
 800c19e:	4688      	mov	r8, r1
 800c1a0:	2700      	movs	r7, #0
 800c1a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c1a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1aa:	f1b9 0901 	subs.w	r9, r9, #1
 800c1ae:	d505      	bpl.n	800c1bc <_fwalk_reent+0x24>
 800c1b0:	6824      	ldr	r4, [r4, #0]
 800c1b2:	2c00      	cmp	r4, #0
 800c1b4:	d1f7      	bne.n	800c1a6 <_fwalk_reent+0xe>
 800c1b6:	4638      	mov	r0, r7
 800c1b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1bc:	89ab      	ldrh	r3, [r5, #12]
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d907      	bls.n	800c1d2 <_fwalk_reent+0x3a>
 800c1c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1c6:	3301      	adds	r3, #1
 800c1c8:	d003      	beq.n	800c1d2 <_fwalk_reent+0x3a>
 800c1ca:	4629      	mov	r1, r5
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	47c0      	blx	r8
 800c1d0:	4307      	orrs	r7, r0
 800c1d2:	3568      	adds	r5, #104	; 0x68
 800c1d4:	e7e9      	b.n	800c1aa <_fwalk_reent+0x12>

0800c1d6 <__retarget_lock_init_recursive>:
 800c1d6:	4770      	bx	lr

0800c1d8 <__retarget_lock_acquire_recursive>:
 800c1d8:	4770      	bx	lr

0800c1da <__retarget_lock_release_recursive>:
 800c1da:	4770      	bx	lr

0800c1dc <__swhatbuf_r>:
 800c1dc:	b570      	push	{r4, r5, r6, lr}
 800c1de:	460e      	mov	r6, r1
 800c1e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1e4:	4614      	mov	r4, r2
 800c1e6:	2900      	cmp	r1, #0
 800c1e8:	461d      	mov	r5, r3
 800c1ea:	b096      	sub	sp, #88	; 0x58
 800c1ec:	da08      	bge.n	800c200 <__swhatbuf_r+0x24>
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c1f4:	602a      	str	r2, [r5, #0]
 800c1f6:	061a      	lsls	r2, r3, #24
 800c1f8:	d410      	bmi.n	800c21c <__swhatbuf_r+0x40>
 800c1fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1fe:	e00e      	b.n	800c21e <__swhatbuf_r+0x42>
 800c200:	466a      	mov	r2, sp
 800c202:	f000 f903 	bl	800c40c <_fstat_r>
 800c206:	2800      	cmp	r0, #0
 800c208:	dbf1      	blt.n	800c1ee <__swhatbuf_r+0x12>
 800c20a:	9a01      	ldr	r2, [sp, #4]
 800c20c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c210:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c214:	425a      	negs	r2, r3
 800c216:	415a      	adcs	r2, r3
 800c218:	602a      	str	r2, [r5, #0]
 800c21a:	e7ee      	b.n	800c1fa <__swhatbuf_r+0x1e>
 800c21c:	2340      	movs	r3, #64	; 0x40
 800c21e:	2000      	movs	r0, #0
 800c220:	6023      	str	r3, [r4, #0]
 800c222:	b016      	add	sp, #88	; 0x58
 800c224:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c228 <__smakebuf_r>:
 800c228:	898b      	ldrh	r3, [r1, #12]
 800c22a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c22c:	079d      	lsls	r5, r3, #30
 800c22e:	4606      	mov	r6, r0
 800c230:	460c      	mov	r4, r1
 800c232:	d507      	bpl.n	800c244 <__smakebuf_r+0x1c>
 800c234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c238:	6023      	str	r3, [r4, #0]
 800c23a:	6123      	str	r3, [r4, #16]
 800c23c:	2301      	movs	r3, #1
 800c23e:	6163      	str	r3, [r4, #20]
 800c240:	b002      	add	sp, #8
 800c242:	bd70      	pop	{r4, r5, r6, pc}
 800c244:	466a      	mov	r2, sp
 800c246:	ab01      	add	r3, sp, #4
 800c248:	f7ff ffc8 	bl	800c1dc <__swhatbuf_r>
 800c24c:	9900      	ldr	r1, [sp, #0]
 800c24e:	4605      	mov	r5, r0
 800c250:	4630      	mov	r0, r6
 800c252:	f7ff f969 	bl	800b528 <_malloc_r>
 800c256:	b948      	cbnz	r0, 800c26c <__smakebuf_r+0x44>
 800c258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c25c:	059a      	lsls	r2, r3, #22
 800c25e:	d4ef      	bmi.n	800c240 <__smakebuf_r+0x18>
 800c260:	f023 0303 	bic.w	r3, r3, #3
 800c264:	f043 0302 	orr.w	r3, r3, #2
 800c268:	81a3      	strh	r3, [r4, #12]
 800c26a:	e7e3      	b.n	800c234 <__smakebuf_r+0xc>
 800c26c:	4b0d      	ldr	r3, [pc, #52]	; (800c2a4 <__smakebuf_r+0x7c>)
 800c26e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c270:	89a3      	ldrh	r3, [r4, #12]
 800c272:	6020      	str	r0, [r4, #0]
 800c274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c278:	81a3      	strh	r3, [r4, #12]
 800c27a:	9b00      	ldr	r3, [sp, #0]
 800c27c:	6120      	str	r0, [r4, #16]
 800c27e:	6163      	str	r3, [r4, #20]
 800c280:	9b01      	ldr	r3, [sp, #4]
 800c282:	b15b      	cbz	r3, 800c29c <__smakebuf_r+0x74>
 800c284:	4630      	mov	r0, r6
 800c286:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c28a:	f000 f8d1 	bl	800c430 <_isatty_r>
 800c28e:	b128      	cbz	r0, 800c29c <__smakebuf_r+0x74>
 800c290:	89a3      	ldrh	r3, [r4, #12]
 800c292:	f023 0303 	bic.w	r3, r3, #3
 800c296:	f043 0301 	orr.w	r3, r3, #1
 800c29a:	81a3      	strh	r3, [r4, #12]
 800c29c:	89a0      	ldrh	r0, [r4, #12]
 800c29e:	4305      	orrs	r5, r0
 800c2a0:	81a5      	strh	r5, [r4, #12]
 800c2a2:	e7cd      	b.n	800c240 <__smakebuf_r+0x18>
 800c2a4:	0800c035 	.word	0x0800c035

0800c2a8 <_malloc_usable_size_r>:
 800c2a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2ac:	1f18      	subs	r0, r3, #4
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	bfbc      	itt	lt
 800c2b2:	580b      	ldrlt	r3, [r1, r0]
 800c2b4:	18c0      	addlt	r0, r0, r3
 800c2b6:	4770      	bx	lr

0800c2b8 <_raise_r>:
 800c2b8:	291f      	cmp	r1, #31
 800c2ba:	b538      	push	{r3, r4, r5, lr}
 800c2bc:	4604      	mov	r4, r0
 800c2be:	460d      	mov	r5, r1
 800c2c0:	d904      	bls.n	800c2cc <_raise_r+0x14>
 800c2c2:	2316      	movs	r3, #22
 800c2c4:	6003      	str	r3, [r0, #0]
 800c2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c2ca:	bd38      	pop	{r3, r4, r5, pc}
 800c2cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c2ce:	b112      	cbz	r2, 800c2d6 <_raise_r+0x1e>
 800c2d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2d4:	b94b      	cbnz	r3, 800c2ea <_raise_r+0x32>
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	f000 f830 	bl	800c33c <_getpid_r>
 800c2dc:	462a      	mov	r2, r5
 800c2de:	4601      	mov	r1, r0
 800c2e0:	4620      	mov	r0, r4
 800c2e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2e6:	f000 b817 	b.w	800c318 <_kill_r>
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d00a      	beq.n	800c304 <_raise_r+0x4c>
 800c2ee:	1c59      	adds	r1, r3, #1
 800c2f0:	d103      	bne.n	800c2fa <_raise_r+0x42>
 800c2f2:	2316      	movs	r3, #22
 800c2f4:	6003      	str	r3, [r0, #0]
 800c2f6:	2001      	movs	r0, #1
 800c2f8:	e7e7      	b.n	800c2ca <_raise_r+0x12>
 800c2fa:	2400      	movs	r4, #0
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c302:	4798      	blx	r3
 800c304:	2000      	movs	r0, #0
 800c306:	e7e0      	b.n	800c2ca <_raise_r+0x12>

0800c308 <raise>:
 800c308:	4b02      	ldr	r3, [pc, #8]	; (800c314 <raise+0xc>)
 800c30a:	4601      	mov	r1, r0
 800c30c:	6818      	ldr	r0, [r3, #0]
 800c30e:	f7ff bfd3 	b.w	800c2b8 <_raise_r>
 800c312:	bf00      	nop
 800c314:	2000017c 	.word	0x2000017c

0800c318 <_kill_r>:
 800c318:	b538      	push	{r3, r4, r5, lr}
 800c31a:	2300      	movs	r3, #0
 800c31c:	4d06      	ldr	r5, [pc, #24]	; (800c338 <_kill_r+0x20>)
 800c31e:	4604      	mov	r4, r0
 800c320:	4608      	mov	r0, r1
 800c322:	4611      	mov	r1, r2
 800c324:	602b      	str	r3, [r5, #0]
 800c326:	f7f4 fe5c 	bl	8000fe2 <_kill>
 800c32a:	1c43      	adds	r3, r0, #1
 800c32c:	d102      	bne.n	800c334 <_kill_r+0x1c>
 800c32e:	682b      	ldr	r3, [r5, #0]
 800c330:	b103      	cbz	r3, 800c334 <_kill_r+0x1c>
 800c332:	6023      	str	r3, [r4, #0]
 800c334:	bd38      	pop	{r3, r4, r5, pc}
 800c336:	bf00      	nop
 800c338:	200015d0 	.word	0x200015d0

0800c33c <_getpid_r>:
 800c33c:	f7f4 be4a 	b.w	8000fd4 <_getpid>

0800c340 <__sread>:
 800c340:	b510      	push	{r4, lr}
 800c342:	460c      	mov	r4, r1
 800c344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c348:	f000 f894 	bl	800c474 <_read_r>
 800c34c:	2800      	cmp	r0, #0
 800c34e:	bfab      	itete	ge
 800c350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c352:	89a3      	ldrhlt	r3, [r4, #12]
 800c354:	181b      	addge	r3, r3, r0
 800c356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c35a:	bfac      	ite	ge
 800c35c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c35e:	81a3      	strhlt	r3, [r4, #12]
 800c360:	bd10      	pop	{r4, pc}

0800c362 <__swrite>:
 800c362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c366:	461f      	mov	r7, r3
 800c368:	898b      	ldrh	r3, [r1, #12]
 800c36a:	4605      	mov	r5, r0
 800c36c:	05db      	lsls	r3, r3, #23
 800c36e:	460c      	mov	r4, r1
 800c370:	4616      	mov	r6, r2
 800c372:	d505      	bpl.n	800c380 <__swrite+0x1e>
 800c374:	2302      	movs	r3, #2
 800c376:	2200      	movs	r2, #0
 800c378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c37c:	f000 f868 	bl	800c450 <_lseek_r>
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	4632      	mov	r2, r6
 800c384:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c388:	81a3      	strh	r3, [r4, #12]
 800c38a:	4628      	mov	r0, r5
 800c38c:	463b      	mov	r3, r7
 800c38e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c396:	f000 b817 	b.w	800c3c8 <_write_r>

0800c39a <__sseek>:
 800c39a:	b510      	push	{r4, lr}
 800c39c:	460c      	mov	r4, r1
 800c39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a2:	f000 f855 	bl	800c450 <_lseek_r>
 800c3a6:	1c43      	adds	r3, r0, #1
 800c3a8:	89a3      	ldrh	r3, [r4, #12]
 800c3aa:	bf15      	itete	ne
 800c3ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800c3ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c3b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c3b6:	81a3      	strheq	r3, [r4, #12]
 800c3b8:	bf18      	it	ne
 800c3ba:	81a3      	strhne	r3, [r4, #12]
 800c3bc:	bd10      	pop	{r4, pc}

0800c3be <__sclose>:
 800c3be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3c2:	f000 b813 	b.w	800c3ec <_close_r>
	...

0800c3c8 <_write_r>:
 800c3c8:	b538      	push	{r3, r4, r5, lr}
 800c3ca:	4604      	mov	r4, r0
 800c3cc:	4608      	mov	r0, r1
 800c3ce:	4611      	mov	r1, r2
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	4d05      	ldr	r5, [pc, #20]	; (800c3e8 <_write_r+0x20>)
 800c3d4:	602a      	str	r2, [r5, #0]
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	f7f4 fe3a 	bl	8001050 <_write>
 800c3dc:	1c43      	adds	r3, r0, #1
 800c3de:	d102      	bne.n	800c3e6 <_write_r+0x1e>
 800c3e0:	682b      	ldr	r3, [r5, #0]
 800c3e2:	b103      	cbz	r3, 800c3e6 <_write_r+0x1e>
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	bd38      	pop	{r3, r4, r5, pc}
 800c3e8:	200015d0 	.word	0x200015d0

0800c3ec <_close_r>:
 800c3ec:	b538      	push	{r3, r4, r5, lr}
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	4d05      	ldr	r5, [pc, #20]	; (800c408 <_close_r+0x1c>)
 800c3f2:	4604      	mov	r4, r0
 800c3f4:	4608      	mov	r0, r1
 800c3f6:	602b      	str	r3, [r5, #0]
 800c3f8:	f7f4 fe46 	bl	8001088 <_close>
 800c3fc:	1c43      	adds	r3, r0, #1
 800c3fe:	d102      	bne.n	800c406 <_close_r+0x1a>
 800c400:	682b      	ldr	r3, [r5, #0]
 800c402:	b103      	cbz	r3, 800c406 <_close_r+0x1a>
 800c404:	6023      	str	r3, [r4, #0]
 800c406:	bd38      	pop	{r3, r4, r5, pc}
 800c408:	200015d0 	.word	0x200015d0

0800c40c <_fstat_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	2300      	movs	r3, #0
 800c410:	4d06      	ldr	r5, [pc, #24]	; (800c42c <_fstat_r+0x20>)
 800c412:	4604      	mov	r4, r0
 800c414:	4608      	mov	r0, r1
 800c416:	4611      	mov	r1, r2
 800c418:	602b      	str	r3, [r5, #0]
 800c41a:	f7f4 fe40 	bl	800109e <_fstat>
 800c41e:	1c43      	adds	r3, r0, #1
 800c420:	d102      	bne.n	800c428 <_fstat_r+0x1c>
 800c422:	682b      	ldr	r3, [r5, #0]
 800c424:	b103      	cbz	r3, 800c428 <_fstat_r+0x1c>
 800c426:	6023      	str	r3, [r4, #0]
 800c428:	bd38      	pop	{r3, r4, r5, pc}
 800c42a:	bf00      	nop
 800c42c:	200015d0 	.word	0x200015d0

0800c430 <_isatty_r>:
 800c430:	b538      	push	{r3, r4, r5, lr}
 800c432:	2300      	movs	r3, #0
 800c434:	4d05      	ldr	r5, [pc, #20]	; (800c44c <_isatty_r+0x1c>)
 800c436:	4604      	mov	r4, r0
 800c438:	4608      	mov	r0, r1
 800c43a:	602b      	str	r3, [r5, #0]
 800c43c:	f7f4 fe3e 	bl	80010bc <_isatty>
 800c440:	1c43      	adds	r3, r0, #1
 800c442:	d102      	bne.n	800c44a <_isatty_r+0x1a>
 800c444:	682b      	ldr	r3, [r5, #0]
 800c446:	b103      	cbz	r3, 800c44a <_isatty_r+0x1a>
 800c448:	6023      	str	r3, [r4, #0]
 800c44a:	bd38      	pop	{r3, r4, r5, pc}
 800c44c:	200015d0 	.word	0x200015d0

0800c450 <_lseek_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4604      	mov	r4, r0
 800c454:	4608      	mov	r0, r1
 800c456:	4611      	mov	r1, r2
 800c458:	2200      	movs	r2, #0
 800c45a:	4d05      	ldr	r5, [pc, #20]	; (800c470 <_lseek_r+0x20>)
 800c45c:	602a      	str	r2, [r5, #0]
 800c45e:	461a      	mov	r2, r3
 800c460:	f7f4 fe36 	bl	80010d0 <_lseek>
 800c464:	1c43      	adds	r3, r0, #1
 800c466:	d102      	bne.n	800c46e <_lseek_r+0x1e>
 800c468:	682b      	ldr	r3, [r5, #0]
 800c46a:	b103      	cbz	r3, 800c46e <_lseek_r+0x1e>
 800c46c:	6023      	str	r3, [r4, #0]
 800c46e:	bd38      	pop	{r3, r4, r5, pc}
 800c470:	200015d0 	.word	0x200015d0

0800c474 <_read_r>:
 800c474:	b538      	push	{r3, r4, r5, lr}
 800c476:	4604      	mov	r4, r0
 800c478:	4608      	mov	r0, r1
 800c47a:	4611      	mov	r1, r2
 800c47c:	2200      	movs	r2, #0
 800c47e:	4d05      	ldr	r5, [pc, #20]	; (800c494 <_read_r+0x20>)
 800c480:	602a      	str	r2, [r5, #0]
 800c482:	461a      	mov	r2, r3
 800c484:	f7f4 fdc7 	bl	8001016 <_read>
 800c488:	1c43      	adds	r3, r0, #1
 800c48a:	d102      	bne.n	800c492 <_read_r+0x1e>
 800c48c:	682b      	ldr	r3, [r5, #0]
 800c48e:	b103      	cbz	r3, 800c492 <_read_r+0x1e>
 800c490:	6023      	str	r3, [r4, #0]
 800c492:	bd38      	pop	{r3, r4, r5, pc}
 800c494:	200015d0 	.word	0x200015d0

0800c498 <_init>:
 800c498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49a:	bf00      	nop
 800c49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c49e:	bc08      	pop	{r3}
 800c4a0:	469e      	mov	lr, r3
 800c4a2:	4770      	bx	lr

0800c4a4 <_fini>:
 800c4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4a6:	bf00      	nop
 800c4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4aa:	bc08      	pop	{r3}
 800c4ac:	469e      	mov	lr, r3
 800c4ae:	4770      	bx	lr
