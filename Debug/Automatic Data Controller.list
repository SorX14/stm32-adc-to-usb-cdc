
Automatic Data Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c988  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800ca98  0800ca98  0001ca98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cef4  0800cef4  0002034c  2**0
                  CONTENTS
  4 .ARM          00000000  0800cef4  0800cef4  0002034c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cef4  0800cef4  0002034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cef4  0800cef4  0001cef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cef8  0800cef8  0001cef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  0800cefc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000128c  2000034c  0800d248  0002034c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d8  0800d248  000215d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010560  00000000  00000000  00020375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000331f  00000000  00000000  000308d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00033bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00034958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b071  00000000  00000000  00035520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b4d  00000000  00000000  00050591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b501  00000000  00000000  000620de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed5df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004660  00000000  00000000  000ed630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000034c 	.word	0x2000034c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ca80 	.word	0x0800ca80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000350 	.word	0x20000350
 800014c:	0800ca80 	.word	0x0800ca80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop
 8000fe4:	0000      	movs	r0, r0
	...

08000fe8 <adc_to_voltage>:
uint32_t adc_value[3]; // Storage for ADC values
uint8_t ready_counter = 0;
uint8_t ready = 0;

float adc_to_voltage (uint32_t adc_reading)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	float voltage = ((float) (adc_reading) / 4096) * 3.3;
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff fe4f 	bl	8000c94 <__aeabi_ui2f>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff55 	bl	8000eac <__aeabi_fdiv>
 8001002:	4603      	mov	r3, r0
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fa0f 	bl	8000428 <__aeabi_f2d>
 800100a:	a309      	add	r3, pc, #36	; (adr r3, 8001030 <adc_to_voltage+0x48>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff fa62 	bl	80004d8 <__aeabi_dmul>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fd34 	bl	8000a88 <__aeabi_d2f>
 8001020:	4603      	mov	r3, r0
 8001022:	60fb      	str	r3, [r7, #12]

	return voltage;
 8001024:	68fb      	ldr	r3, [r7, #12]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	66666666 	.word	0x66666666
 8001034:	400a6666 	.word	0x400a6666

08001038 <HAL_ADC_ConvCpltCallback>:
  CDC_Transmit_FS(data, length);
}

// This is called when the ADC finishes reading something
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	ready_counter++;
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_ADC_ConvCpltCallback+0x34>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_ADC_ConvCpltCallback+0x34>)
 800104a:	701a      	strb	r2, [r3, #0]
	if (ready_counter >= 3) {
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <HAL_ADC_ConvCpltCallback+0x34>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d905      	bls.n	8001060 <HAL_ADC_ConvCpltCallback+0x28>
		ready = 1;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_ADC_ConvCpltCallback+0x38>)
 8001056:	2201      	movs	r2, #1
 8001058:	701a      	strb	r2, [r3, #0]
		ready_counter = 0;
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <HAL_ADC_ConvCpltCallback+0x34>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
	}
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200003e8 	.word	0x200003e8
 8001070:	200003e9 	.word	0x200003e9

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001078:	b09d      	sub	sp, #116	; 0x74
 800107a:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f000 fb8a 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 f88a 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 f960 	bl	8001348 <MX_GPIO_Init>
  MX_DMA_Init();
 8001088:	f000 f940 	bl	800130c <MX_DMA_Init>
  MX_ADC1_Init();
 800108c:	f000 f8e2 	bl	8001254 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8001090:	f008 f93a 	bl	8009308 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Calibrate ADC1
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001094:	483a      	ldr	r0, [pc, #232]	; (8001180 <main+0x10c>)
 8001096:	f001 f86d 	bl	8002174 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_value, 3);
 800109a:	2203      	movs	r2, #3
 800109c:	4939      	ldr	r1, [pc, #228]	; (8001184 <main+0x110>)
 800109e:	4838      	ldr	r0, [pc, #224]	; (8001180 <main+0x10c>)
 80010a0:	f000 fcb2 	bl	8001a08 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  uint8_t dev_state = hUsbDeviceFS.dev_state;
 80010a4:	4b38      	ldr	r3, [pc, #224]	; (8001188 <main+0x114>)
 80010a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80010aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  if (dev_state == USBD_STATE_CONFIGURED) {
 80010ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d15c      	bne.n	8001170 <main+0xfc>
		  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010bc:	4833      	ldr	r0, [pc, #204]	; (800118c <main+0x118>)
 80010be:	f001 fd8f 	bl	8002be0 <HAL_GPIO_WritePin>

		  if (ready) {
 80010c2:	4b33      	ldr	r3, [pc, #204]	; (8001190 <main+0x11c>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0ec      	beq.n	80010a4 <main+0x30>
			  ready = 0;
 80010ca:	4b31      	ldr	r3, [pc, #196]	; (8001190 <main+0x11c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]

			  // Create a string to send to the host
			  char adc_readings[64] = "";
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	223c      	movs	r2, #60	; 0x3c
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f008 fdd9 	bl	8009c94 <memset>
			  snprintf(
 80010e2:	4b28      	ldr	r3, [pc, #160]	; (8001184 <main+0x110>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	4b26      	ldr	r3, [pc, #152]	; (8001184 <main+0x110>)
 80010ea:	685e      	ldr	r6, [r3, #4]
 80010ec:	4b25      	ldr	r3, [pc, #148]	; (8001184 <main+0x110>)
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	603a      	str	r2, [r7, #0]
				  sizeof(adc_readings),
				  "%ld:%ld:%ld:%f:%f:%f\r\n",
				  adc_value[0],
				  adc_value[1],
				  adc_value[2],
				  adc_to_voltage(adc_value[0]),
 80010f2:	4b24      	ldr	r3, [pc, #144]	; (8001184 <main+0x110>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff76 	bl	8000fe8 <adc_to_voltage>
 80010fc:	4603      	mov	r3, r0
			  snprintf(
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f992 	bl	8000428 <__aeabi_f2d>
 8001104:	4604      	mov	r4, r0
 8001106:	460d      	mov	r5, r1
				  adc_to_voltage(adc_value[1]),
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <main+0x110>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff6b 	bl	8000fe8 <adc_to_voltage>
 8001112:	4603      	mov	r3, r0
			  snprintf(
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f987 	bl	8000428 <__aeabi_f2d>
 800111a:	4680      	mov	r8, r0
 800111c:	4689      	mov	r9, r1
				  adc_to_voltage(adc_value[2])
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <main+0x110>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff60 	bl	8000fe8 <adc_to_voltage>
 8001128:	4603      	mov	r3, r0
			  snprintf(
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f97c 	bl	8000428 <__aeabi_f2d>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	f107 000c 	add.w	r0, r7, #12
 8001138:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800113c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001140:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	9201      	str	r2, [sp, #4]
 8001148:	9600      	str	r6, [sp, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a11      	ldr	r2, [pc, #68]	; (8001194 <main+0x120>)
 800114e:	2140      	movs	r1, #64	; 0x40
 8001150:	f009 fa08 	bl	800a564 <sniprintf>
			  );

			  // Send reading over USB-CDC connection
			  CDC_Transmit_FS((uint8_t*) adc_readings, strlen(adc_readings));
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	4618      	mov	r0, r3
 800115a:	f7fe fff9 	bl	8000150 <strlen>
 800115e:	4603      	mov	r3, r0
 8001160:	b29a      	uxth	r2, r3
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f008 f98b 	bl	8009484 <CDC_Transmit_FS>
 800116e:	e799      	b.n	80010a4 <main+0x30>
		  }
	  } else {
		  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_SET);
 8001170:	2201      	movs	r2, #1
 8001172:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <main+0x118>)
 8001178:	f001 fd32 	bl	8002be0 <HAL_GPIO_WritePin>
  {
 800117c:	e792      	b.n	80010a4 <main+0x30>
 800117e:	bf00      	nop
 8001180:	20000368 	.word	0x20000368
 8001184:	200003dc 	.word	0x200003dc
 8001188:	200003f8 	.word	0x200003f8
 800118c:	40011000 	.word	0x40011000
 8001190:	200003e9 	.word	0x200003e9
 8001194:	0800ca98 	.word	0x0800ca98

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b094      	sub	sp, #80	; 0x50
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a2:	2228      	movs	r2, #40	; 0x28
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f008 fd74 	bl	8009c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d6:	2301      	movs	r3, #1
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011da:	2302      	movs	r3, #2
 80011dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ee:	4618      	mov	r0, r3
 80011f0:	f003 f9d2 	bl	8004598 <HAL_RCC_OscConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011fa:	f000 f8f1 	bl	80013e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fe:	230f      	movs	r3, #15
 8001200:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001202:	2302      	movs	r3, #2
 8001204:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800120a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800120e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2102      	movs	r1, #2
 800121a:	4618      	mov	r0, r3
 800121c:	f003 fc3e 	bl	8004a9c <HAL_RCC_ClockConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001226:	f000 f8db 	bl	80013e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800122a:	2312      	movs	r3, #18
 800122c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800122e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001232:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001234:	2300      	movs	r3, #0
 8001236:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4618      	mov	r0, r3
 800123c:	f003 fdb2 	bl	8004da4 <HAL_RCCEx_PeriphCLKConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001246:	f000 f8cb 	bl	80013e0 <Error_Handler>
  }
}
 800124a:	bf00      	nop
 800124c:	3750      	adds	r7, #80	; 0x50
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <MX_ADC1_Init+0xb0>)
 8001266:	4a28      	ldr	r2, [pc, #160]	; (8001308 <MX_ADC1_Init+0xb4>)
 8001268:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800126a:	4b26      	ldr	r3, [pc, #152]	; (8001304 <MX_ADC1_Init+0xb0>)
 800126c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001270:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001272:	4b24      	ldr	r3, [pc, #144]	; (8001304 <MX_ADC1_Init+0xb0>)
 8001274:	2201      	movs	r2, #1
 8001276:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <MX_ADC1_Init+0xb0>)
 800127a:	2200      	movs	r2, #0
 800127c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800127e:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_ADC1_Init+0xb0>)
 8001280:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001284:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_ADC1_Init+0xb0>)
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 800128c:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_ADC1_Init+0xb0>)
 800128e:	2203      	movs	r2, #3
 8001290:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001292:	481c      	ldr	r0, [pc, #112]	; (8001304 <MX_ADC1_Init+0xb0>)
 8001294:	f000 fae0 	bl	8001858 <HAL_ADC_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800129e:	f000 f89f 	bl	80013e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012a2:	2303      	movs	r3, #3
 80012a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80012aa:	2307      	movs	r3, #7
 80012ac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4814      	ldr	r0, [pc, #80]	; (8001304 <MX_ADC1_Init+0xb0>)
 80012b4:	f000 fd64 	bl	8001d80 <HAL_ADC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012be:	f000 f88f 	bl	80013e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012c2:	2304      	movs	r3, #4
 80012c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012c6:	2302      	movs	r3, #2
 80012c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_ADC1_Init+0xb0>)
 80012d0:	f000 fd56 	bl	8001d80 <HAL_ADC_ConfigChannel>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80012da:	f000 f881 	bl	80013e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012de:	2305      	movs	r3, #5
 80012e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80012e2:	2303      	movs	r3, #3
 80012e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	4619      	mov	r1, r3
 80012ea:	4806      	ldr	r0, [pc, #24]	; (8001304 <MX_ADC1_Init+0xb0>)
 80012ec:	f000 fd48 	bl	8001d80 <HAL_ADC_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80012f6:	f000 f873 	bl	80013e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000368 	.word	0x20000368
 8001308:	40012400 	.word	0x40012400

0800130c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_DMA_Init+0x38>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <MX_DMA_Init+0x38>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6153      	str	r3, [r2, #20]
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_DMA_Init+0x38>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	200b      	movs	r0, #11
 8001330:	f001 f8ad 	bl	800248e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001334:	200b      	movs	r0, #11
 8001336:	f001 f8c6 	bl	80024c6 <HAL_NVIC_EnableIRQ>

}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000

08001348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <MX_GPIO_Init+0x90>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a1d      	ldr	r2, [pc, #116]	; (80013d8 <MX_GPIO_Init+0x90>)
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <MX_GPIO_Init+0x90>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001374:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <MX_GPIO_Init+0x90>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <MX_GPIO_Init+0x90>)
 800137a:	f043 0320 	orr.w	r3, r3, #32
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_GPIO_Init+0x90>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0320 	and.w	r3, r3, #32
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_GPIO_Init+0x90>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <MX_GPIO_Init+0x90>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <MX_GPIO_Init+0x90>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013aa:	480c      	ldr	r0, [pc, #48]	; (80013dc <MX_GPIO_Init+0x94>)
 80013ac:	f001 fc18 	bl	8002be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_LED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin;
 80013b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2302      	movs	r3, #2
 80013c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ONBOARD_LED_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	4619      	mov	r1, r3
 80013c8:	4804      	ldr	r0, [pc, #16]	; (80013dc <MX_GPIO_Init+0x94>)
 80013ca:	f001 fa85 	bl	80028d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ce:	bf00      	nop
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40011000 	.word	0x40011000

080013e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <Error_Handler+0x8>
	...

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_MspInit+0x5c>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	4a14      	ldr	r2, [pc, #80]	; (8001448 <HAL_MspInit+0x5c>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6193      	str	r3, [r2, #24]
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_MspInit+0x5c>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <HAL_MspInit+0x5c>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	4a0e      	ldr	r2, [pc, #56]	; (8001448 <HAL_MspInit+0x5c>)
 8001410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001414:	61d3      	str	r3, [r2, #28]
 8001416:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <HAL_MspInit+0x5c>)
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_MspInit+0x60>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_MspInit+0x60>)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	bc80      	pop	{r7}
 8001446:	4770      	bx	lr
 8001448:	40021000 	.word	0x40021000
 800144c:	40010000 	.word	0x40010000

08001450 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a2c      	ldr	r2, [pc, #176]	; (800151c <HAL_ADC_MspInit+0xcc>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d151      	bne.n	8001514 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001470:	4b2b      	ldr	r3, [pc, #172]	; (8001520 <HAL_ADC_MspInit+0xd0>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	4a2a      	ldr	r2, [pc, #168]	; (8001520 <HAL_ADC_MspInit+0xd0>)
 8001476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800147a:	6193      	str	r3, [r2, #24]
 800147c:	4b28      	ldr	r3, [pc, #160]	; (8001520 <HAL_ADC_MspInit+0xd0>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b25      	ldr	r3, [pc, #148]	; (8001520 <HAL_ADC_MspInit+0xd0>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4a24      	ldr	r2, [pc, #144]	; (8001520 <HAL_ADC_MspInit+0xd0>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6193      	str	r3, [r2, #24]
 8001494:	4b22      	ldr	r3, [pc, #136]	; (8001520 <HAL_ADC_MspInit+0xd0>)
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80014a0:	2338      	movs	r3, #56	; 0x38
 80014a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a4:	2303      	movs	r3, #3
 80014a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4619      	mov	r1, r3
 80014ae:	481d      	ldr	r0, [pc, #116]	; (8001524 <HAL_ADC_MspInit+0xd4>)
 80014b0:	f001 fa12 	bl	80028d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <HAL_ADC_MspInit+0xd8>)
 80014b6:	4a1d      	ldr	r2, [pc, #116]	; (800152c <HAL_ADC_MspInit+0xdc>)
 80014b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_ADC_MspInit+0xd8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c0:	4b19      	ldr	r3, [pc, #100]	; (8001528 <HAL_ADC_MspInit+0xd8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <HAL_ADC_MspInit+0xd8>)
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014cc:	4b16      	ldr	r3, [pc, #88]	; (8001528 <HAL_ADC_MspInit+0xd8>)
 80014ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <HAL_ADC_MspInit+0xd8>)
 80014d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_ADC_MspInit+0xd8>)
 80014de:	2220      	movs	r2, #32
 80014e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_ADC_MspInit+0xd8>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014e8:	480f      	ldr	r0, [pc, #60]	; (8001528 <HAL_ADC_MspInit+0xd8>)
 80014ea:	f001 f807 	bl	80024fc <HAL_DMA_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80014f4:	f7ff ff74 	bl	80013e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <HAL_ADC_MspInit+0xd8>)
 80014fc:	621a      	str	r2, [r3, #32]
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <HAL_ADC_MspInit+0xd8>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	2012      	movs	r0, #18
 800150a:	f000 ffc0 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800150e:	2012      	movs	r0, #18
 8001510:	f000 ffd9 	bl	80024c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001514:	bf00      	nop
 8001516:	3720      	adds	r7, #32
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40012400 	.word	0x40012400
 8001520:	40021000 	.word	0x40021000
 8001524:	40010800 	.word	0x40010800
 8001528:	20000398 	.word	0x20000398
 800152c:	40020008 	.word	0x40020008

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001576:	f000 f953 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <DMA1_Channel1_IRQHandler+0x10>)
 8001586:	f001 f873 	bl	8002670 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000398 	.word	0x20000398

08001594 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <ADC1_2_IRQHandler+0x10>)
 800159a:	f000 fb13 	bl	8001bc4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000368 	.word	0x20000368

080015a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80015ae:	f001 fc60 	bl	8002e72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200010bc 	.word	0x200010bc

080015bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return 1;
 80015c0:	2301      	movs	r3, #1
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <_kill>:

int _kill(int pid, int sig)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015d4:	f008 fb34 	bl	8009c40 <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	2216      	movs	r2, #22
 80015dc:	601a      	str	r2, [r3, #0]
  return -1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <_exit>:

void _exit (int status)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015f2:	f04f 31ff 	mov.w	r1, #4294967295
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffe7 	bl	80015ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80015fc:	e7fe      	b.n	80015fc <_exit+0x12>

080015fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b086      	sub	sp, #24
 8001602:	af00      	add	r7, sp, #0
 8001604:	60f8      	str	r0, [r7, #12]
 8001606:	60b9      	str	r1, [r7, #8]
 8001608:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	e00a      	b.n	8001626 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001610:	f3af 8000 	nop.w
 8001614:	4601      	mov	r1, r0
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	60ba      	str	r2, [r7, #8]
 800161c:	b2ca      	uxtb	r2, r1
 800161e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3301      	adds	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	429a      	cmp	r2, r3
 800162c:	dbf0      	blt.n	8001610 <_read+0x12>
  }

  return len;
 800162e:	687b      	ldr	r3, [r7, #4]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	e009      	b.n	800165e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	1c5a      	adds	r2, r3, #1
 800164e:	60ba      	str	r2, [r7, #8]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	3301      	adds	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	dbf1      	blt.n	800164a <_write+0x12>
  }
  return len;
 8001666:	687b      	ldr	r3, [r7, #4]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <_close>:

int _close(int file)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001696:	605a      	str	r2, [r3, #4]
  return 0;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <_isatty>:

int _isatty(int file)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f008 fa9e 	bl	8009c40 <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20005000 	.word	0x20005000
 8001730:	00000400 	.word	0x00000400
 8001734:	200003ec 	.word	0x200003ec
 8001738:	200015d8 	.word	0x200015d8

0800173c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001760:	4c0a      	ldr	r4, [pc, #40]	; (800178c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800176e:	f7ff ffe5 	bl	800173c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001772:	f008 fa6b 	bl	8009c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001776:	f7ff fc7d 	bl	8001074 <main>
  bx lr
 800177a:	4770      	bx	lr
  ldr r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001780:	2000034c 	.word	0x2000034c
  ldr r2, =_sidata
 8001784:	0800cefc 	.word	0x0800cefc
  ldr r2, =_sbss
 8001788:	2000034c 	.word	0x2000034c
  ldr r4, =_ebss
 800178c:	200015d8 	.word	0x200015d8

08001790 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <CAN1_RX1_IRQHandler>
	...

08001794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_Init+0x28>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_Init+0x28>)
 800179e:	f043 0310 	orr.w	r3, r3, #16
 80017a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 fe67 	bl	8002478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017aa:	200f      	movs	r0, #15
 80017ac:	f000 f808 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b0:	f7ff fe1c 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40022000 	.word	0x40022000

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x54>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x58>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 fe7f 	bl	80024e2 <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00e      	b.n	800180c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d80a      	bhi.n	800180a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f000 fe47 	bl	800248e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <HAL_InitTick+0x5c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000000 	.word	0x20000000
 8001818:	20000008 	.word	0x20000008
 800181c:	20000004 	.word	0x20000004

08001820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_IncTick+0x1c>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_IncTick+0x20>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a03      	ldr	r2, [pc, #12]	; (8001840 <HAL_IncTick+0x20>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	20000008 	.word	0x20000008
 8001840:	200003f0 	.word	0x200003f0

08001844 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return uwTick;
 8001848:	4b02      	ldr	r3, [pc, #8]	; (8001854 <HAL_GetTick+0x10>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr
 8001854:	200003f0 	.word	0x200003f0

08001858 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001868:	2300      	movs	r3, #0
 800186a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0be      	b.n	80019f8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001884:	2b00      	cmp	r3, #0
 8001886:	d109      	bne.n	800189c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fdda 	bl	8001450 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 fbc1 	bl	8002024 <ADC_ConversionStop_Disable>
 80018a2:	4603      	mov	r3, r0
 80018a4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 8099 	bne.w	80019e6 <HAL_ADC_Init+0x18e>
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 8095 	bne.w	80019e6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018c4:	f023 0302 	bic.w	r3, r3, #2
 80018c8:	f043 0202 	orr.w	r2, r3, #2
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	7b1b      	ldrb	r3, [r3, #12]
 80018de:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018e0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018f0:	d003      	beq.n	80018fa <HAL_ADC_Init+0xa2>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d102      	bne.n	8001900 <HAL_ADC_Init+0xa8>
 80018fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018fe:	e000      	b.n	8001902 <HAL_ADC_Init+0xaa>
 8001900:	2300      	movs	r3, #0
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7d1b      	ldrb	r3, [r3, #20]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d119      	bne.n	8001944 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	7b1b      	ldrb	r3, [r3, #12]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d109      	bne.n	800192c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	3b01      	subs	r3, #1
 800191e:	035a      	lsls	r2, r3, #13
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	e00b      	b.n	8001944 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	f043 0220 	orr.w	r2, r3, #32
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	f043 0201 	orr.w	r2, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	430a      	orrs	r2, r1
 8001956:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <HAL_ADC_Init+0x1a8>)
 8001960:	4013      	ands	r3, r2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	68b9      	ldr	r1, [r7, #8]
 8001968:	430b      	orrs	r3, r1
 800196a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001974:	d003      	beq.n	800197e <HAL_ADC_Init+0x126>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d104      	bne.n	8001988 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	3b01      	subs	r3, #1
 8001984:	051b      	lsls	r3, r3, #20
 8001986:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	430a      	orrs	r2, r1
 800199a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_ADC_Init+0x1ac>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d10b      	bne.n	80019c4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b6:	f023 0303 	bic.w	r3, r3, #3
 80019ba:	f043 0201 	orr.w	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019c2:	e018      	b.n	80019f6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c8:	f023 0312 	bic.w	r3, r3, #18
 80019cc:	f043 0210 	orr.w	r2, r3, #16
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	f043 0201 	orr.w	r2, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019e4:	e007      	b.n	80019f6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ea:	f043 0210 	orr.w	r2, r3, #16
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	ffe1f7fd 	.word	0xffe1f7fd
 8001a04:	ff1f0efe 	.word	0xff1f0efe

08001a08 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a64      	ldr	r2, [pc, #400]	; (8001bb0 <HAL_ADC_Start_DMA+0x1a8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d004      	beq.n	8001a2c <HAL_ADC_Start_DMA+0x24>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a63      	ldr	r2, [pc, #396]	; (8001bb4 <HAL_ADC_Start_DMA+0x1ac>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d106      	bne.n	8001a3a <HAL_ADC_Start_DMA+0x32>
 8001a2c:	4b60      	ldr	r3, [pc, #384]	; (8001bb0 <HAL_ADC_Start_DMA+0x1a8>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f040 80b3 	bne.w	8001ba0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_ADC_Start_DMA+0x40>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e0ae      	b.n	8001ba6 <HAL_ADC_Start_DMA+0x19e>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 fa8d 	bl	8001f70 <ADC_Enable>
 8001a56:	4603      	mov	r3, r0
 8001a58:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f040 809a 	bne.w	8001b96 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a6a:	f023 0301 	bic.w	r3, r3, #1
 8001a6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a4e      	ldr	r2, [pc, #312]	; (8001bb4 <HAL_ADC_Start_DMA+0x1ac>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d105      	bne.n	8001a8c <HAL_ADC_Start_DMA+0x84>
 8001a80:	4b4b      	ldr	r3, [pc, #300]	; (8001bb0 <HAL_ADC_Start_DMA+0x1a8>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d115      	bne.n	8001ab8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a90:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d026      	beq.n	8001af4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ab6:	e01d      	b.n	8001af4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a39      	ldr	r2, [pc, #228]	; (8001bb0 <HAL_ADC_Start_DMA+0x1a8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d004      	beq.n	8001ad8 <HAL_ADC_Start_DMA+0xd0>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a38      	ldr	r2, [pc, #224]	; (8001bb4 <HAL_ADC_Start_DMA+0x1ac>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d10d      	bne.n	8001af4 <HAL_ADC_Start_DMA+0xec>
 8001ad8:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <HAL_ADC_Start_DMA+0x1a8>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	f023 0206 	bic.w	r2, r3, #6
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b0c:	e002      	b.n	8001b14 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4a25      	ldr	r2, [pc, #148]	; (8001bb8 <HAL_ADC_Start_DMA+0x1b0>)
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4a24      	ldr	r2, [pc, #144]	; (8001bbc <HAL_ADC_Start_DMA+0x1b4>)
 8001b2a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <HAL_ADC_Start_DMA+0x1b8>)
 8001b32:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f06f 0202 	mvn.w	r2, #2
 8001b3c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b4c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a18      	ldr	r0, [r3, #32]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	334c      	adds	r3, #76	; 0x4c
 8001b58:	4619      	mov	r1, r3
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f000 fd27 	bl	80025b0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b6c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b70:	d108      	bne.n	8001b84 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b80:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001b82:	e00f      	b.n	8001ba4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b92:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001b94:	e006      	b.n	8001ba4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001b9e:	e001      	b.n	8001ba4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40012400 	.word	0x40012400
 8001bb4:	40012800 	.word	0x40012800
 8001bb8:	080020a7 	.word	0x080020a7
 8001bbc:	08002123 	.word	0x08002123
 8001bc0:	0800213f 	.word	0x0800213f

08001bc4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0320 	and.w	r3, r3, #32
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	d140      	bne.n	8001c5c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d139      	bne.n	8001c5c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bec:	f003 0310 	and.w	r3, r3, #16
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c0a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c0e:	d11d      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d119      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0220 	bic.w	r2, r2, #32
 8001c26:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d105      	bne.n	8001c4c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	f043 0201 	orr.w	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f7ff f9f3 	bl	8001038 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f06f 0212 	mvn.w	r2, #18
 8001c5a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c66:	2b80      	cmp	r3, #128	; 0x80
 8001c68:	d14f      	bne.n	8001d0a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d148      	bne.n	8001d0a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d105      	bne.n	8001c90 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c88:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8001c9a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001c9e:	d012      	beq.n	8001cc6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d125      	bne.n	8001cfa <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001cb8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cbc:	d11d      	bne.n	8001cfa <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d119      	bne.n	8001cfa <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cd4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d105      	bne.n	8001cfa <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	f043 0201 	orr.w	r2, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 fae6 	bl	80022cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 020c 	mvn.w	r2, #12
 8001d08:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d14:	2b40      	cmp	r3, #64	; 0x40
 8001d16:	d114      	bne.n	8001d42 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d10d      	bne.n	8001d42 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f812 	bl	8001d5c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f06f 0201 	mvn.w	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bc80      	pop	{r7}
 8001d6c:	4770      	bx	lr

08001d6e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x20>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e0dc      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x1da>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b06      	cmp	r3, #6
 8001dae:	d81c      	bhi.n	8001dea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b05      	subs	r3, #5
 8001dc2:	221f      	movs	r2, #31
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4019      	ands	r1, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	3b05      	subs	r3, #5
 8001ddc:	fa00 f203 	lsl.w	r2, r0, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	635a      	str	r2, [r3, #52]	; 0x34
 8001de8:	e03c      	b.n	8001e64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d81c      	bhi.n	8001e2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	3b23      	subs	r3, #35	; 0x23
 8001e04:	221f      	movs	r2, #31
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	4019      	ands	r1, r3
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3b23      	subs	r3, #35	; 0x23
 8001e1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
 8001e2a:	e01b      	b.n	8001e64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3b41      	subs	r3, #65	; 0x41
 8001e3e:	221f      	movs	r2, #31
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4019      	ands	r1, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	3b41      	subs	r3, #65	; 0x41
 8001e58:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b09      	cmp	r3, #9
 8001e6a:	d91c      	bls.n	8001ea6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68d9      	ldr	r1, [r3, #12]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3b1e      	subs	r3, #30
 8001e7e:	2207      	movs	r2, #7
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	4019      	ands	r1, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	6898      	ldr	r0, [r3, #8]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4613      	mov	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	3b1e      	subs	r3, #30
 8001e98:	fa00 f203 	lsl.w	r2, r0, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	e019      	b.n	8001eda <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6919      	ldr	r1, [r3, #16]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	4019      	ands	r1, r3
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6898      	ldr	r0, [r3, #8]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	d003      	beq.n	8001eea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ee6:	2b11      	cmp	r3, #17
 8001ee8:	d132      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1d      	ldr	r2, [pc, #116]	; (8001f64 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d125      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d126      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f10:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b10      	cmp	r3, #16
 8001f18:	d11a      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f1a:	4b13      	ldr	r3, [pc, #76]	; (8001f68 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a13      	ldr	r2, [pc, #76]	; (8001f6c <HAL_ADC_ConfigChannel+0x1ec>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	0c9a      	lsrs	r2, r3, #18
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f30:	e002      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f9      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x1b2>
 8001f3e:	e007      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	f043 0220 	orr.w	r2, r3, #32
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	40012400 	.word	0x40012400
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	431bde83 	.word	0x431bde83

08001f70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d040      	beq.n	8002010 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0201 	orr.w	r2, r2, #1
 8001f9c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	; (800201c <ADC_Enable+0xac>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1f      	ldr	r2, [pc, #124]	; (8002020 <ADC_Enable+0xb0>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	0c9b      	lsrs	r3, r3, #18
 8001faa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fac:	e002      	b.n	8001fb4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f9      	bne.n	8001fae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fba:	f7ff fc43 	bl	8001844 <HAL_GetTick>
 8001fbe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fc0:	e01f      	b.n	8002002 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fc2:	f7ff fc3f 	bl	8001844 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d918      	bls.n	8002002 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d011      	beq.n	8002002 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe2:	f043 0210 	orr.w	r2, r3, #16
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fee:	f043 0201 	orr.w	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e007      	b.n	8002012 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d1d8      	bne.n	8001fc2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3710      	adds	r7, #16
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000000 	.word	0x20000000
 8002020:	431bde83 	.word	0x431bde83

08002024 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d12e      	bne.n	800209c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f022 0201 	bic.w	r2, r2, #1
 800204c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800204e:	f7ff fbf9 	bl	8001844 <HAL_GetTick>
 8002052:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002054:	e01b      	b.n	800208e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002056:	f7ff fbf5 	bl	8001844 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d914      	bls.n	800208e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b01      	cmp	r3, #1
 8002070:	d10d      	bne.n	800208e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002076:	f043 0210 	orr.w	r2, r3, #16
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e007      	b.n	800209e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b01      	cmp	r3, #1
 800209a:	d0dc      	beq.n	8002056 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d127      	bne.n	8002110 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80020d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80020da:	d115      	bne.n	8002108 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d111      	bne.n	8002108 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002100:	f043 0201 	orr.w	r2, r3, #1
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f7fe ff95 	bl	8001038 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800210e:	e004      	b.n	800211a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	4798      	blx	r3
}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f7ff fe0a 	bl	8001d4a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	f043 0204 	orr.w	r2, r3, #4
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f7ff fe02 	bl	8001d6e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b087      	sub	sp, #28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800218a:	2b01      	cmp	r3, #1
 800218c:	d101      	bne.n	8002192 <HAL_ADCEx_Calibration_Start+0x1e>
 800218e:	2302      	movs	r3, #2
 8002190:	e095      	b.n	80022be <HAL_ADCEx_Calibration_Start+0x14a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ff42 	bl	8002024 <ADC_ConversionStop_Disable>
 80021a0:	4603      	mov	r3, r0
 80021a2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80021a4:	7dfb      	ldrb	r3, [r7, #23]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 8084 	bne.w	80022b4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021b4:	f023 0302 	bic.w	r3, r3, #2
 80021b8:	f043 0202 	orr.w	r2, r3, #2
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80021c0:	4b41      	ldr	r3, [pc, #260]	; (80022c8 <HAL_ADCEx_Calibration_Start+0x154>)
 80021c2:	681c      	ldr	r4, [r3, #0]
 80021c4:	2002      	movs	r0, #2
 80021c6:	f002 fea3 	bl	8004f10 <HAL_RCCEx_GetPeriphCLKFreq>
 80021ca:	4603      	mov	r3, r0
 80021cc:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80021d0:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80021d2:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80021d4:	e002      	b.n	80021dc <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f9      	bne.n	80021d6 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff fec4 	bl	8001f70 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f042 0208 	orr.w	r2, r2, #8
 80021f6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80021f8:	f7ff fb24 	bl	8001844 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80021fe:	e01b      	b.n	8002238 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002200:	f7ff fb20 	bl	8001844 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b0a      	cmp	r3, #10
 800220c:	d914      	bls.n	8002238 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00d      	beq.n	8002238 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	f023 0312 	bic.w	r3, r3, #18
 8002224:	f043 0210 	orr.w	r2, r3, #16
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e042      	b.n	80022be <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1dc      	bne.n	8002200 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0204 	orr.w	r2, r2, #4
 8002254:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002256:	f7ff faf5 	bl	8001844 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800225c:	e01b      	b.n	8002296 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800225e:	f7ff faf1 	bl	8001844 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b0a      	cmp	r3, #10
 800226a:	d914      	bls.n	8002296 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00d      	beq.n	8002296 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	f023 0312 	bic.w	r3, r3, #18
 8002282:	f043 0210 	orr.w	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e013      	b.n	80022be <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1dc      	bne.n	800225e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	f023 0303 	bic.w	r3, r3, #3
 80022ac:	f043 0201 	orr.w	r2, r3, #1
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80022bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd90      	pop	{r4, r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000000 	.word	0x20000000

080022cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
	...

080022e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022fc:	4013      	ands	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800230c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002312:	4a04      	ldr	r2, [pc, #16]	; (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	60d3      	str	r3, [r2, #12]
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <__NVIC_GetPriorityGrouping+0x18>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	f003 0307 	and.w	r3, r3, #7
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	2b00      	cmp	r3, #0
 8002354:	db0b      	blt.n	800236e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	f003 021f 	and.w	r2, r3, #31
 800235c:	4906      	ldr	r1, [pc, #24]	; (8002378 <__NVIC_EnableIRQ+0x34>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	2001      	movs	r0, #1
 8002366:	fa00 f202 	lsl.w	r2, r0, r2
 800236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	e000e100 	.word	0xe000e100

0800237c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	6039      	str	r1, [r7, #0]
 8002386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238c:	2b00      	cmp	r3, #0
 800238e:	db0a      	blt.n	80023a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	b2da      	uxtb	r2, r3
 8002394:	490c      	ldr	r1, [pc, #48]	; (80023c8 <__NVIC_SetPriority+0x4c>)
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	0112      	lsls	r2, r2, #4
 800239c:	b2d2      	uxtb	r2, r2
 800239e:	440b      	add	r3, r1
 80023a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a4:	e00a      	b.n	80023bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4908      	ldr	r1, [pc, #32]	; (80023cc <__NVIC_SetPriority+0x50>)
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	3b04      	subs	r3, #4
 80023b4:	0112      	lsls	r2, r2, #4
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	440b      	add	r3, r1
 80023ba:	761a      	strb	r2, [r3, #24]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000e100 	.word	0xe000e100
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b089      	sub	sp, #36	; 0x24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f1c3 0307 	rsb	r3, r3, #7
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	bf28      	it	cs
 80023ee:	2304      	movcs	r3, #4
 80023f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3304      	adds	r3, #4
 80023f6:	2b06      	cmp	r3, #6
 80023f8:	d902      	bls.n	8002400 <NVIC_EncodePriority+0x30>
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	3b03      	subs	r3, #3
 80023fe:	e000      	b.n	8002402 <NVIC_EncodePriority+0x32>
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	f04f 32ff 	mov.w	r2, #4294967295
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43da      	mvns	r2, r3
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	401a      	ands	r2, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002418:	f04f 31ff 	mov.w	r1, #4294967295
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	43d9      	mvns	r1, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	4313      	orrs	r3, r2
         );
}
 800242a:	4618      	mov	r0, r3
 800242c:	3724      	adds	r7, #36	; 0x24
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002444:	d301      	bcc.n	800244a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002446:	2301      	movs	r3, #1
 8002448:	e00f      	b.n	800246a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <SysTick_Config+0x40>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002452:	210f      	movs	r1, #15
 8002454:	f04f 30ff 	mov.w	r0, #4294967295
 8002458:	f7ff ff90 	bl	800237c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <SysTick_Config+0x40>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002462:	4b04      	ldr	r3, [pc, #16]	; (8002474 <SysTick_Config+0x40>)
 8002464:	2207      	movs	r2, #7
 8002466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	e000e010 	.word	0xe000e010

08002478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ff2d 	bl	80022e0 <__NVIC_SetPriorityGrouping>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a0:	f7ff ff42 	bl	8002328 <__NVIC_GetPriorityGrouping>
 80024a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	6978      	ldr	r0, [r7, #20]
 80024ac:	f7ff ff90 	bl	80023d0 <NVIC_EncodePriority>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff5f 	bl	800237c <__NVIC_SetPriority>
}
 80024be:	bf00      	nop
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff35 	bl	8002344 <__NVIC_EnableIRQ>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ffa2 	bl	8002434 <SysTick_Config>
 80024f0:	4603      	mov	r3, r0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e043      	b.n	800259a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <HAL_DMA_Init+0xa8>)
 800251a:	4413      	add	r3, r2
 800251c:	4a22      	ldr	r2, [pc, #136]	; (80025a8 <HAL_DMA_Init+0xac>)
 800251e:	fba2 2303 	umull	r2, r3, r2, r3
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	009a      	lsls	r2, r3, #2
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a1f      	ldr	r2, [pc, #124]	; (80025ac <HAL_DMA_Init+0xb0>)
 800252e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002546:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800254a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002554:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002560:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	bffdfff8 	.word	0xbffdfff8
 80025a8:	cccccccd 	.word	0xcccccccd
 80025ac:	40020000 	.word	0x40020000

080025b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d101      	bne.n	80025d0 <HAL_DMA_Start_IT+0x20>
 80025cc:	2302      	movs	r3, #2
 80025ce:	e04a      	b.n	8002666 <HAL_DMA_Start_IT+0xb6>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d13a      	bne.n	8002658 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2202      	movs	r2, #2
 80025e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2200      	movs	r2, #0
 80025ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f938 	bl	800287c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	2b00      	cmp	r3, #0
 8002612:	d008      	beq.n	8002626 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 020e 	orr.w	r2, r2, #14
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e00f      	b.n	8002646 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0204 	bic.w	r2, r2, #4
 8002634:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 020a 	orr.w	r2, r2, #10
 8002644:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0201 	orr.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	e005      	b.n	8002664 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002660:	2302      	movs	r3, #2
 8002662:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002664:	7dfb      	ldrb	r3, [r7, #23]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	2204      	movs	r2, #4
 800268e:	409a      	lsls	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d04f      	beq.n	8002738 <HAL_DMA_IRQHandler+0xc8>
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d04a      	beq.n	8002738 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d107      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0204 	bic.w	r2, r2, #4
 80026be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a66      	ldr	r2, [pc, #408]	; (8002860 <HAL_DMA_IRQHandler+0x1f0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d029      	beq.n	800271e <HAL_DMA_IRQHandler+0xae>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a65      	ldr	r2, [pc, #404]	; (8002864 <HAL_DMA_IRQHandler+0x1f4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d022      	beq.n	800271a <HAL_DMA_IRQHandler+0xaa>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a63      	ldr	r2, [pc, #396]	; (8002868 <HAL_DMA_IRQHandler+0x1f8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d01a      	beq.n	8002714 <HAL_DMA_IRQHandler+0xa4>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a62      	ldr	r2, [pc, #392]	; (800286c <HAL_DMA_IRQHandler+0x1fc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d012      	beq.n	800270e <HAL_DMA_IRQHandler+0x9e>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a60      	ldr	r2, [pc, #384]	; (8002870 <HAL_DMA_IRQHandler+0x200>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00a      	beq.n	8002708 <HAL_DMA_IRQHandler+0x98>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a5f      	ldr	r2, [pc, #380]	; (8002874 <HAL_DMA_IRQHandler+0x204>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d102      	bne.n	8002702 <HAL_DMA_IRQHandler+0x92>
 80026fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002700:	e00e      	b.n	8002720 <HAL_DMA_IRQHandler+0xb0>
 8002702:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002706:	e00b      	b.n	8002720 <HAL_DMA_IRQHandler+0xb0>
 8002708:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800270c:	e008      	b.n	8002720 <HAL_DMA_IRQHandler+0xb0>
 800270e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002712:	e005      	b.n	8002720 <HAL_DMA_IRQHandler+0xb0>
 8002714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002718:	e002      	b.n	8002720 <HAL_DMA_IRQHandler+0xb0>
 800271a:	2340      	movs	r3, #64	; 0x40
 800271c:	e000      	b.n	8002720 <HAL_DMA_IRQHandler+0xb0>
 800271e:	2304      	movs	r3, #4
 8002720:	4a55      	ldr	r2, [pc, #340]	; (8002878 <HAL_DMA_IRQHandler+0x208>)
 8002722:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8094 	beq.w	8002856 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002736:	e08e      	b.n	8002856 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	2202      	movs	r2, #2
 800273e:	409a      	lsls	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4013      	ands	r3, r2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d056      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x186>
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d051      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10b      	bne.n	8002778 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 020a 	bic.w	r2, r2, #10
 800276e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a38      	ldr	r2, [pc, #224]	; (8002860 <HAL_DMA_IRQHandler+0x1f0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d029      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x166>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a37      	ldr	r2, [pc, #220]	; (8002864 <HAL_DMA_IRQHandler+0x1f4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d022      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x162>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a35      	ldr	r2, [pc, #212]	; (8002868 <HAL_DMA_IRQHandler+0x1f8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d01a      	beq.n	80027cc <HAL_DMA_IRQHandler+0x15c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a34      	ldr	r2, [pc, #208]	; (800286c <HAL_DMA_IRQHandler+0x1fc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d012      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x156>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a32      	ldr	r2, [pc, #200]	; (8002870 <HAL_DMA_IRQHandler+0x200>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d00a      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x150>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a31      	ldr	r2, [pc, #196]	; (8002874 <HAL_DMA_IRQHandler+0x204>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d102      	bne.n	80027ba <HAL_DMA_IRQHandler+0x14a>
 80027b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027b8:	e00e      	b.n	80027d8 <HAL_DMA_IRQHandler+0x168>
 80027ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027be:	e00b      	b.n	80027d8 <HAL_DMA_IRQHandler+0x168>
 80027c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027c4:	e008      	b.n	80027d8 <HAL_DMA_IRQHandler+0x168>
 80027c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027ca:	e005      	b.n	80027d8 <HAL_DMA_IRQHandler+0x168>
 80027cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027d0:	e002      	b.n	80027d8 <HAL_DMA_IRQHandler+0x168>
 80027d2:	2320      	movs	r3, #32
 80027d4:	e000      	b.n	80027d8 <HAL_DMA_IRQHandler+0x168>
 80027d6:	2302      	movs	r3, #2
 80027d8:	4a27      	ldr	r2, [pc, #156]	; (8002878 <HAL_DMA_IRQHandler+0x208>)
 80027da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d034      	beq.n	8002856 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027f4:	e02f      	b.n	8002856 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	2208      	movs	r2, #8
 80027fc:	409a      	lsls	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4013      	ands	r3, r2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d028      	beq.n	8002858 <HAL_DMA_IRQHandler+0x1e8>
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d023      	beq.n	8002858 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 020e 	bic.w	r2, r2, #14
 800281e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f202 	lsl.w	r2, r1, r2
 800282e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	2b00      	cmp	r3, #0
 800284c:	d004      	beq.n	8002858 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
    }
  }
  return;
 8002856:	bf00      	nop
 8002858:	bf00      	nop
}
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40020008 	.word	0x40020008
 8002864:	4002001c 	.word	0x4002001c
 8002868:	40020030 	.word	0x40020030
 800286c:	40020044 	.word	0x40020044
 8002870:	40020058 	.word	0x40020058
 8002874:	4002006c 	.word	0x4002006c
 8002878:	40020000 	.word	0x40020000

0800287c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	2101      	movs	r1, #1
 8002894:	fa01 f202 	lsl.w	r2, r1, r2
 8002898:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b10      	cmp	r3, #16
 80028a8:	d108      	bne.n	80028bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028ba:	e007      	b.n	80028cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	60da      	str	r2, [r3, #12]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr
	...

080028d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028d8:	b480      	push	{r7}
 80028da:	b08b      	sub	sp, #44	; 0x2c
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028e2:	2300      	movs	r3, #0
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ea:	e169      	b.n	8002bc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028ec:	2201      	movs	r2, #1
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	429a      	cmp	r2, r3
 8002906:	f040 8158 	bne.w	8002bba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4a9a      	ldr	r2, [pc, #616]	; (8002b78 <HAL_GPIO_Init+0x2a0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d05e      	beq.n	80029d2 <HAL_GPIO_Init+0xfa>
 8002914:	4a98      	ldr	r2, [pc, #608]	; (8002b78 <HAL_GPIO_Init+0x2a0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d875      	bhi.n	8002a06 <HAL_GPIO_Init+0x12e>
 800291a:	4a98      	ldr	r2, [pc, #608]	; (8002b7c <HAL_GPIO_Init+0x2a4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d058      	beq.n	80029d2 <HAL_GPIO_Init+0xfa>
 8002920:	4a96      	ldr	r2, [pc, #600]	; (8002b7c <HAL_GPIO_Init+0x2a4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d86f      	bhi.n	8002a06 <HAL_GPIO_Init+0x12e>
 8002926:	4a96      	ldr	r2, [pc, #600]	; (8002b80 <HAL_GPIO_Init+0x2a8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d052      	beq.n	80029d2 <HAL_GPIO_Init+0xfa>
 800292c:	4a94      	ldr	r2, [pc, #592]	; (8002b80 <HAL_GPIO_Init+0x2a8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d869      	bhi.n	8002a06 <HAL_GPIO_Init+0x12e>
 8002932:	4a94      	ldr	r2, [pc, #592]	; (8002b84 <HAL_GPIO_Init+0x2ac>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d04c      	beq.n	80029d2 <HAL_GPIO_Init+0xfa>
 8002938:	4a92      	ldr	r2, [pc, #584]	; (8002b84 <HAL_GPIO_Init+0x2ac>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d863      	bhi.n	8002a06 <HAL_GPIO_Init+0x12e>
 800293e:	4a92      	ldr	r2, [pc, #584]	; (8002b88 <HAL_GPIO_Init+0x2b0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d046      	beq.n	80029d2 <HAL_GPIO_Init+0xfa>
 8002944:	4a90      	ldr	r2, [pc, #576]	; (8002b88 <HAL_GPIO_Init+0x2b0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d85d      	bhi.n	8002a06 <HAL_GPIO_Init+0x12e>
 800294a:	2b12      	cmp	r3, #18
 800294c:	d82a      	bhi.n	80029a4 <HAL_GPIO_Init+0xcc>
 800294e:	2b12      	cmp	r3, #18
 8002950:	d859      	bhi.n	8002a06 <HAL_GPIO_Init+0x12e>
 8002952:	a201      	add	r2, pc, #4	; (adr r2, 8002958 <HAL_GPIO_Init+0x80>)
 8002954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002958:	080029d3 	.word	0x080029d3
 800295c:	080029ad 	.word	0x080029ad
 8002960:	080029bf 	.word	0x080029bf
 8002964:	08002a01 	.word	0x08002a01
 8002968:	08002a07 	.word	0x08002a07
 800296c:	08002a07 	.word	0x08002a07
 8002970:	08002a07 	.word	0x08002a07
 8002974:	08002a07 	.word	0x08002a07
 8002978:	08002a07 	.word	0x08002a07
 800297c:	08002a07 	.word	0x08002a07
 8002980:	08002a07 	.word	0x08002a07
 8002984:	08002a07 	.word	0x08002a07
 8002988:	08002a07 	.word	0x08002a07
 800298c:	08002a07 	.word	0x08002a07
 8002990:	08002a07 	.word	0x08002a07
 8002994:	08002a07 	.word	0x08002a07
 8002998:	08002a07 	.word	0x08002a07
 800299c:	080029b5 	.word	0x080029b5
 80029a0:	080029c9 	.word	0x080029c9
 80029a4:	4a79      	ldr	r2, [pc, #484]	; (8002b8c <HAL_GPIO_Init+0x2b4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d013      	beq.n	80029d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029aa:	e02c      	b.n	8002a06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	623b      	str	r3, [r7, #32]
          break;
 80029b2:	e029      	b.n	8002a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	3304      	adds	r3, #4
 80029ba:	623b      	str	r3, [r7, #32]
          break;
 80029bc:	e024      	b.n	8002a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	3308      	adds	r3, #8
 80029c4:	623b      	str	r3, [r7, #32]
          break;
 80029c6:	e01f      	b.n	8002a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	330c      	adds	r3, #12
 80029ce:	623b      	str	r3, [r7, #32]
          break;
 80029d0:	e01a      	b.n	8002a08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d102      	bne.n	80029e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029da:	2304      	movs	r3, #4
 80029dc:	623b      	str	r3, [r7, #32]
          break;
 80029de:	e013      	b.n	8002a08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d105      	bne.n	80029f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029e8:	2308      	movs	r3, #8
 80029ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	611a      	str	r2, [r3, #16]
          break;
 80029f2:	e009      	b.n	8002a08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029f4:	2308      	movs	r3, #8
 80029f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	615a      	str	r2, [r3, #20]
          break;
 80029fe:	e003      	b.n	8002a08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a00:	2300      	movs	r3, #0
 8002a02:	623b      	str	r3, [r7, #32]
          break;
 8002a04:	e000      	b.n	8002a08 <HAL_GPIO_Init+0x130>
          break;
 8002a06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	2bff      	cmp	r3, #255	; 0xff
 8002a0c:	d801      	bhi.n	8002a12 <HAL_GPIO_Init+0x13a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	e001      	b.n	8002a16 <HAL_GPIO_Init+0x13e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3304      	adds	r3, #4
 8002a16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2bff      	cmp	r3, #255	; 0xff
 8002a1c:	d802      	bhi.n	8002a24 <HAL_GPIO_Init+0x14c>
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	e002      	b.n	8002a2a <HAL_GPIO_Init+0x152>
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	3b08      	subs	r3, #8
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	210f      	movs	r1, #15
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	fa01 f303 	lsl.w	r3, r1, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	6a39      	ldr	r1, [r7, #32]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	fa01 f303 	lsl.w	r3, r1, r3
 8002a44:	431a      	orrs	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 80b1 	beq.w	8002bba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a58:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <HAL_GPIO_Init+0x2b8>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	4a4c      	ldr	r2, [pc, #304]	; (8002b90 <HAL_GPIO_Init+0x2b8>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6193      	str	r3, [r2, #24]
 8002a64:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <HAL_GPIO_Init+0x2b8>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a70:	4a48      	ldr	r2, [pc, #288]	; (8002b94 <HAL_GPIO_Init+0x2bc>)
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	3302      	adds	r3, #2
 8002a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	220f      	movs	r2, #15
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4013      	ands	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a40      	ldr	r2, [pc, #256]	; (8002b98 <HAL_GPIO_Init+0x2c0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d013      	beq.n	8002ac4 <HAL_GPIO_Init+0x1ec>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a3f      	ldr	r2, [pc, #252]	; (8002b9c <HAL_GPIO_Init+0x2c4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00d      	beq.n	8002ac0 <HAL_GPIO_Init+0x1e8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a3e      	ldr	r2, [pc, #248]	; (8002ba0 <HAL_GPIO_Init+0x2c8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d007      	beq.n	8002abc <HAL_GPIO_Init+0x1e4>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a3d      	ldr	r2, [pc, #244]	; (8002ba4 <HAL_GPIO_Init+0x2cc>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d101      	bne.n	8002ab8 <HAL_GPIO_Init+0x1e0>
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e006      	b.n	8002ac6 <HAL_GPIO_Init+0x1ee>
 8002ab8:	2304      	movs	r3, #4
 8002aba:	e004      	b.n	8002ac6 <HAL_GPIO_Init+0x1ee>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e002      	b.n	8002ac6 <HAL_GPIO_Init+0x1ee>
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <HAL_GPIO_Init+0x1ee>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac8:	f002 0203 	and.w	r2, r2, #3
 8002acc:	0092      	lsls	r2, r2, #2
 8002ace:	4093      	lsls	r3, r2
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ad6:	492f      	ldr	r1, [pc, #188]	; (8002b94 <HAL_GPIO_Init+0x2bc>)
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	3302      	adds	r3, #2
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d006      	beq.n	8002afe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002af0:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <HAL_GPIO_Init+0x2d0>)
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	492c      	ldr	r1, [pc, #176]	; (8002ba8 <HAL_GPIO_Init+0x2d0>)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	600b      	str	r3, [r1, #0]
 8002afc:	e006      	b.n	8002b0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002afe:	4b2a      	ldr	r3, [pc, #168]	; (8002ba8 <HAL_GPIO_Init+0x2d0>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	4928      	ldr	r1, [pc, #160]	; (8002ba8 <HAL_GPIO_Init+0x2d0>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d006      	beq.n	8002b26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b18:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <HAL_GPIO_Init+0x2d0>)
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	4922      	ldr	r1, [pc, #136]	; (8002ba8 <HAL_GPIO_Init+0x2d0>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	604b      	str	r3, [r1, #4]
 8002b24:	e006      	b.n	8002b34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_GPIO_Init+0x2d0>)
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	491e      	ldr	r1, [pc, #120]	; (8002ba8 <HAL_GPIO_Init+0x2d0>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d006      	beq.n	8002b4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_GPIO_Init+0x2d0>)
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	4918      	ldr	r1, [pc, #96]	; (8002ba8 <HAL_GPIO_Init+0x2d0>)
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	608b      	str	r3, [r1, #8]
 8002b4c:	e006      	b.n	8002b5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <HAL_GPIO_Init+0x2d0>)
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	4914      	ldr	r1, [pc, #80]	; (8002ba8 <HAL_GPIO_Init+0x2d0>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d021      	beq.n	8002bac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_GPIO_Init+0x2d0>)
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	490e      	ldr	r1, [pc, #56]	; (8002ba8 <HAL_GPIO_Init+0x2d0>)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60cb      	str	r3, [r1, #12]
 8002b74:	e021      	b.n	8002bba <HAL_GPIO_Init+0x2e2>
 8002b76:	bf00      	nop
 8002b78:	10320000 	.word	0x10320000
 8002b7c:	10310000 	.word	0x10310000
 8002b80:	10220000 	.word	0x10220000
 8002b84:	10210000 	.word	0x10210000
 8002b88:	10120000 	.word	0x10120000
 8002b8c:	10110000 	.word	0x10110000
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40010000 	.word	0x40010000
 8002b98:	40010800 	.word	0x40010800
 8002b9c:	40010c00 	.word	0x40010c00
 8002ba0:	40011000 	.word	0x40011000
 8002ba4:	40011400 	.word	0x40011400
 8002ba8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_GPIO_Init+0x304>)
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	4909      	ldr	r1, [pc, #36]	; (8002bdc <HAL_GPIO_Init+0x304>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f47f ae8e 	bne.w	80028ec <HAL_GPIO_Init+0x14>
  }
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	372c      	adds	r7, #44	; 0x2c
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr
 8002bdc:	40010400 	.word	0x40010400

08002be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
 8002bec:	4613      	mov	r3, r2
 8002bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bf0:	787b      	ldrb	r3, [r7, #1]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bfc:	e003      	b.n	8002c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	041a      	lsls	r2, r3, #16
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	611a      	str	r2, [r3, #16]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c12:	b08b      	sub	sp, #44	; 0x2c
 8002c14:	af06      	add	r7, sp, #24
 8002c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e0fd      	b.n	8002e1e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f006 fd58 	bl	80096ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2203      	movs	r2, #3
 8002c40:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f002 fa47 	bl	80050dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	603b      	str	r3, [r7, #0]
 8002c54:	687e      	ldr	r6, [r7, #4]
 8002c56:	466d      	mov	r5, sp
 8002c58:	f106 0410 	add.w	r4, r6, #16
 8002c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	602b      	str	r3, [r5, #0]
 8002c64:	1d33      	adds	r3, r6, #4
 8002c66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c68:	6838      	ldr	r0, [r7, #0]
 8002c6a:	f002 fa11 	bl	8005090 <USB_CoreInit>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e0ce      	b.n	8002e1e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f002 fa42 	bl	8005110 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	e04c      	b.n	8002d2c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	440b      	add	r3, r1
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	b298      	uxth	r0, r3
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	440b      	add	r3, r1
 8002cce:	3336      	adds	r3, #54	; 0x36
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3303      	adds	r3, #3
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cea:	7bfa      	ldrb	r2, [r7, #15]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3338      	adds	r3, #56	; 0x38
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cfe:	7bfa      	ldrb	r2, [r7, #15]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	440b      	add	r3, r1
 8002d0c:	333c      	adds	r3, #60	; 0x3c
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d12:	7bfa      	ldrb	r2, [r7, #15]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	440b      	add	r3, r1
 8002d20:	3340      	adds	r3, #64	; 0x40
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d3ad      	bcc.n	8002c92 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d36:	2300      	movs	r3, #0
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	e044      	b.n	8002dc6 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	440b      	add	r3, r1
 8002d4a:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002d4e:	2200      	movs	r2, #0
 8002d50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d52:	7bfa      	ldrb	r2, [r7, #15]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	440b      	add	r3, r1
 8002d60:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	440b      	add	r3, r1
 8002d76:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d7e:	7bfa      	ldrb	r2, [r7, #15]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d3b5      	bcc.n	8002d3c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	687e      	ldr	r6, [r7, #4]
 8002dd8:	466d      	mov	r5, sp
 8002dda:	f106 0410 	add.w	r4, r6, #16
 8002dde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	602b      	str	r3, [r5, #0]
 8002de6:	1d33      	adds	r3, r6, #4
 8002de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dea:	6838      	ldr	r0, [r7, #0]
 8002dec:	f002 f99c 	bl	8005128 <USB_DevInit>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e00d      	b.n	8002e1e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f004 fe4e 	bl	8007ab8 <USB_DevDisconnect>

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_PCD_Start+0x16>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e016      	b.n	8002e6a <HAL_PCD_Start+0x44>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f002 f931 	bl	80050b0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e4e:	2101      	movs	r1, #1
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f006 febe 	bl	8009bd2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f004 fe22 	bl	8007aa4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b088      	sub	sp, #32
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 fe24 	bl	8007acc <USB_ReadInterrupts>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e8e:	d102      	bne.n	8002e96 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fb5f 	bl	8003554 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f004 fe16 	bl	8007acc <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eaa:	d112      	bne.n	8002ed2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ebe:	b292      	uxth	r2, r2
 8002ec0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f006 fc8c 	bl	80097e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002eca:	2100      	movs	r1, #0
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f923 	bl	8003118 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f004 fdf8 	bl	8007acc <USB_ReadInterrupts>
 8002edc:	4603      	mov	r3, r0
 8002ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ee6:	d10b      	bne.n	8002f00 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002efa:	b292      	uxth	r2, r2
 8002efc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f004 fde1 	bl	8007acc <USB_ReadInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f14:	d10b      	bne.n	8002f2e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f28:	b292      	uxth	r2, r2
 8002f2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f004 fdca 	bl	8007acc <USB_ReadInterrupts>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f42:	d126      	bne.n	8002f92 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0204 	bic.w	r2, r2, #4
 8002f56:	b292      	uxth	r2, r2
 8002f58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0208 	bic.w	r2, r2, #8
 8002f6e:	b292      	uxth	r2, r2
 8002f70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f006 fc6d 	bl	8009854 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f8c:	b292      	uxth	r2, r2
 8002f8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f004 fd98 	bl	8007acc <USB_ReadInterrupts>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fa6:	f040 8082 	bne.w	80030ae <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	77fb      	strb	r3, [r7, #31]
 8002fae:	e010      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	7ffb      	ldrb	r3, [r7, #31]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	441a      	add	r2, r3
 8002fbc:	7ffb      	ldrb	r3, [r7, #31]
 8002fbe:	8812      	ldrh	r2, [r2, #0]
 8002fc0:	b292      	uxth	r2, r2
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	3320      	adds	r3, #32
 8002fc6:	443b      	add	r3, r7
 8002fc8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002fcc:	7ffb      	ldrb	r3, [r7, #31]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	77fb      	strb	r3, [r7, #31]
 8002fd2:	7ffb      	ldrb	r3, [r7, #31]
 8002fd4:	2b07      	cmp	r3, #7
 8002fd6:	d9eb      	bls.n	8002fb0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	b292      	uxth	r2, r2
 8002fec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	b292      	uxth	r2, r2
 8003004:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003008:	bf00      	nop
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003012:	b29b      	uxth	r3, r3
 8003014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f6      	beq.n	800300a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003024:	b29a      	uxth	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800302e:	b292      	uxth	r2, r2
 8003030:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003034:	2300      	movs	r3, #0
 8003036:	77fb      	strb	r3, [r7, #31]
 8003038:	e00f      	b.n	800305a <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800303a:	7ffb      	ldrb	r3, [r7, #31]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	4611      	mov	r1, r2
 8003042:	7ffa      	ldrb	r2, [r7, #31]
 8003044:	0092      	lsls	r2, r2, #2
 8003046:	440a      	add	r2, r1
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	3320      	adds	r3, #32
 800304c:	443b      	add	r3, r7
 800304e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003052:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003054:	7ffb      	ldrb	r3, [r7, #31]
 8003056:	3301      	adds	r3, #1
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	7ffb      	ldrb	r3, [r7, #31]
 800305c:	2b07      	cmp	r3, #7
 800305e:	d9ec      	bls.n	800303a <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003068:	b29a      	uxth	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0208 	orr.w	r2, r2, #8
 8003072:	b292      	uxth	r2, r2
 8003074:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003080:	b29a      	uxth	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800308a:	b292      	uxth	r2, r2
 800308c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003098:	b29a      	uxth	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0204 	orr.w	r2, r2, #4
 80030a2:	b292      	uxth	r2, r2
 80030a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f006 fbb9 	bl	8009820 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f004 fd0a 	bl	8007acc <USB_ReadInterrupts>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c2:	d10e      	bne.n	80030e2 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030d6:	b292      	uxth	r2, r2
 80030d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f006 fb72 	bl	80097c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f004 fcf0 	bl	8007acc <USB_ReadInterrupts>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f6:	d10b      	bne.n	8003110 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003100:	b29a      	uxth	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800310a:	b292      	uxth	r2, r2
 800310c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003110:	bf00      	nop
 8003112:	3720      	adds	r7, #32
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800312a:	2b01      	cmp	r3, #1
 800312c:	d101      	bne.n	8003132 <HAL_PCD_SetAddress+0x1a>
 800312e:	2302      	movs	r3, #2
 8003130:	e013      	b.n	800315a <HAL_PCD_SetAddress+0x42>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f004 fc97 	bl	8007a7e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	4608      	mov	r0, r1
 800316c:	4611      	mov	r1, r2
 800316e:	461a      	mov	r2, r3
 8003170:	4603      	mov	r3, r0
 8003172:	70fb      	strb	r3, [r7, #3]
 8003174:	460b      	mov	r3, r1
 8003176:	803b      	strh	r3, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003184:	2b00      	cmp	r3, #0
 8003186:	da0e      	bge.n	80031a6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	705a      	strb	r2, [r3, #1]
 80031a4:	e00e      	b.n	80031c4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	f003 0207 	and.w	r2, r3, #7
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	4413      	add	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031d0:	883a      	ldrh	r2, [r7, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	78ba      	ldrb	r2, [r7, #2]
 80031da:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	785b      	ldrb	r3, [r3, #1]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d004      	beq.n	80031ee <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031ee:	78bb      	ldrb	r3, [r7, #2]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d102      	bne.n	80031fa <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_PCD_EP_Open+0xa6>
 8003204:	2302      	movs	r3, #2
 8003206:	e00e      	b.n	8003226 <HAL_PCD_EP_Open+0xc4>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68f9      	ldr	r1, [r7, #12]
 8003216:	4618      	mov	r0, r3
 8003218:	f001 ffa6 	bl	8005168 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003224:	7afb      	ldrb	r3, [r7, #11]
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
 8003236:	460b      	mov	r3, r1
 8003238:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800323a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323e:	2b00      	cmp	r3, #0
 8003240:	da0e      	bge.n	8003260 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2201      	movs	r2, #1
 800325c:	705a      	strb	r2, [r3, #1]
 800325e:	e00e      	b.n	800327e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	f003 0207 	and.w	r2, r3, #7
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	b2da      	uxtb	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_PCD_EP_Close+0x6a>
 8003294:	2302      	movs	r3, #2
 8003296:	e00e      	b.n	80032b6 <HAL_PCD_EP_Close+0x88>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68f9      	ldr	r1, [r7, #12]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f002 fac8 	bl	800583c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	460b      	mov	r3, r1
 80032cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ce:	7afb      	ldrb	r3, [r7, #11]
 80032d0:	f003 0207 	and.w	r2, r3, #7
 80032d4:	4613      	mov	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2200      	movs	r2, #0
 80032f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2200      	movs	r2, #0
 80032fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032fe:	7afb      	ldrb	r3, [r7, #11]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	b2da      	uxtb	r2, r3
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800330a:	7afb      	ldrb	r3, [r7, #11]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	2b00      	cmp	r3, #0
 8003312:	d106      	bne.n	8003322 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6979      	ldr	r1, [r7, #20]
 800331a:	4618      	mov	r0, r3
 800331c:	f002 fc7a 	bl	8005c14 <USB_EPStartXfer>
 8003320:	e005      	b.n	800332e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6979      	ldr	r1, [r7, #20]
 8003328:	4618      	mov	r0, r3
 800332a:	f002 fc73 	bl	8005c14 <USB_EPStartXfer>
  }

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003344:	78fb      	ldrb	r3, [r7, #3]
 8003346:	f003 0207 	and.w	r2, r3, #7
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	440b      	add	r3, r1
 8003356:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
 8003372:	460b      	mov	r3, r1
 8003374:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003376:	7afb      	ldrb	r3, [r7, #11]
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4413      	add	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2200      	movs	r2, #0
 80033aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2201      	movs	r2, #1
 80033b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033b2:	7afb      	ldrb	r3, [r7, #11]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033be:	7afb      	ldrb	r3, [r7, #11]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6979      	ldr	r1, [r7, #20]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f002 fc20 	bl	8005c14 <USB_EPStartXfer>
 80033d4:	e005      	b.n	80033e2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6979      	ldr	r1, [r7, #20]
 80033dc:	4618      	mov	r0, r3
 80033de:	f002 fc19 	bl	8005c14 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	f003 0207 	and.w	r2, r3, #7
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	429a      	cmp	r2, r3
 8003404:	d901      	bls.n	800340a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e04c      	b.n	80034a4 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800340a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800340e:	2b00      	cmp	r3, #0
 8003410:	da0e      	bge.n	8003430 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003412:	78fb      	ldrb	r3, [r7, #3]
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	4413      	add	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2201      	movs	r2, #1
 800342c:	705a      	strb	r2, [r3, #1]
 800342e:	e00c      	b.n	800344a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	4413      	add	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2201      	movs	r2, #1
 800344e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	b2da      	uxtb	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_PCD_EP_SetStall+0x7e>
 8003466:	2302      	movs	r3, #2
 8003468:	e01c      	b.n	80034a4 <HAL_PCD_EP_SetStall+0xb8>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68f9      	ldr	r1, [r7, #12]
 8003478:	4618      	mov	r0, r3
 800347a:	f004 fa03 	bl	8007884 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	2b00      	cmp	r3, #0
 8003486:	d108      	bne.n	800349a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003492:	4619      	mov	r1, r3
 8003494:	4610      	mov	r0, r2
 8003496:	f004 fb28 	bl	8007aea <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	f003 020f 	and.w	r2, r3, #15
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d901      	bls.n	80034ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e040      	b.n	800354c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	da0e      	bge.n	80034f0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	705a      	strb	r2, [r3, #1]
 80034ee:	e00e      	b.n	800350e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	f003 0207 	and.w	r2, r3, #7
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	b2da      	uxtb	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_PCD_EP_ClrStall+0x82>
 800352a:	2302      	movs	r3, #2
 800352c:	e00e      	b.n	800354c <HAL_PCD_EP_ClrStall+0xa0>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68f9      	ldr	r1, [r7, #12]
 800353c:	4618      	mov	r0, r3
 800353e:	f004 f9f1 	bl	8007924 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08e      	sub	sp, #56	; 0x38
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800355c:	e2ec      	b.n	8003b38 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003566:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003568:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f003 030f 	and.w	r3, r3, #15
 8003570:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003574:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003578:	2b00      	cmp	r3, #0
 800357a:	f040 8161 	bne.w	8003840 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800357e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003580:	f003 0310 	and.w	r3, r3, #16
 8003584:	2b00      	cmp	r3, #0
 8003586:	d152      	bne.n	800362e <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	b29b      	uxth	r3, r3
 8003590:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003594:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003598:	81fb      	strh	r3, [r7, #14]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	89fb      	ldrh	r3, [r7, #14]
 80035a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3328      	adds	r3, #40	; 0x28
 80035b0:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	3302      	adds	r3, #2
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	441a      	add	r2, r3
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80035ec:	2100      	movs	r1, #0
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f006 f8cf 	bl	8009792 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 829b 	beq.w	8003b38 <PCD_EP_ISR_Handler+0x5e4>
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f040 8296 	bne.w	8003b38 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003612:	b2db      	uxtb	r3, r3
 8003614:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003618:	b2da      	uxtb	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	b292      	uxth	r2, r2
 8003620:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800362c:	e284      	b.n	8003b38 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800363e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003644:	2b00      	cmp	r3, #0
 8003646:	d034      	beq.n	80036b2 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003650:	b29b      	uxth	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	3306      	adds	r3, #6
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6818      	ldr	r0, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003686:	b29b      	uxth	r3, r3
 8003688:	f004 fa7f 	bl	8007b8a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	b29a      	uxth	r2, r3
 8003694:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003698:	4013      	ands	r3, r2
 800369a:	823b      	strh	r3, [r7, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	8a3a      	ldrh	r2, [r7, #16]
 80036a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036a6:	b292      	uxth	r2, r2
 80036a8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f006 f844 	bl	8009738 <HAL_PCD_SetupStageCallback>
 80036b0:	e242      	b.n	8003b38 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80036b2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f280 823e 	bge.w	8003b38 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80036c8:	4013      	ands	r3, r2
 80036ca:	83bb      	strh	r3, [r7, #28]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	8bba      	ldrh	r2, [r7, #28]
 80036d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80036d6:	b292      	uxth	r2, r2
 80036d8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4413      	add	r3, r2
 80036ee:	3306      	adds	r3, #6
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d019      	beq.n	8003742 <PCD_EP_ISR_Handler+0x1ee>
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d015      	beq.n	8003742 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	6959      	ldr	r1, [r3, #20]
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003726:	b29b      	uxth	r3, r3
 8003728:	f004 fa2f 	bl	8007b8a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	441a      	add	r2, r3
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800373a:	2100      	movs	r1, #0
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f006 f80d 	bl	800975c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	881b      	ldrh	r3, [r3, #0]
 8003748:	b29b      	uxth	r3, r3
 800374a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800374e:	2b00      	cmp	r3, #0
 8003750:	f040 81f2 	bne.w	8003b38 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	61bb      	str	r3, [r7, #24]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003762:	b29b      	uxth	r3, r3
 8003764:	461a      	mov	r2, r3
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	4413      	add	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d112      	bne.n	80037a2 <PCD_EP_ISR_Handler+0x24e>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003786:	b29a      	uxth	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	801a      	strh	r2, [r3, #0]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800379a:	b29a      	uxth	r2, r3
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	801a      	strh	r2, [r3, #0]
 80037a0:	e02f      	b.n	8003802 <PCD_EP_ISR_Handler+0x2ae>
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b3e      	cmp	r3, #62	; 0x3e
 80037a8:	d813      	bhi.n	80037d2 <PCD_EP_ISR_Handler+0x27e>
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	085b      	lsrs	r3, r3, #1
 80037b0:	633b      	str	r3, [r7, #48]	; 0x30
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d002      	beq.n	80037c4 <PCD_EP_ISR_Handler+0x270>
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	3301      	adds	r3, #1
 80037c2:	633b      	str	r3, [r7, #48]	; 0x30
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	029b      	lsls	r3, r3, #10
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	801a      	strh	r2, [r3, #0]
 80037d0:	e017      	b.n	8003802 <PCD_EP_ISR_Handler+0x2ae>
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	633b      	str	r3, [r7, #48]	; 0x30
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <PCD_EP_ISR_Handler+0x298>
 80037e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e8:	3b01      	subs	r3, #1
 80037ea:	633b      	str	r3, [r7, #48]	; 0x30
 80037ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	029b      	lsls	r3, r3, #10
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	b29b      	uxth	r3, r3
 800380a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800380e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003812:	827b      	strh	r3, [r7, #18]
 8003814:	8a7b      	ldrh	r3, [r7, #18]
 8003816:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800381a:	827b      	strh	r3, [r7, #18]
 800381c:	8a7b      	ldrh	r3, [r7, #18]
 800381e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003822:	827b      	strh	r3, [r7, #18]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	8a7b      	ldrh	r3, [r7, #18]
 800382a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800382e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383a:	b29b      	uxth	r3, r3
 800383c:	8013      	strh	r3, [r2, #0]
 800383e:	e17b      	b.n	8003b38 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003852:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003856:	2b00      	cmp	r3, #0
 8003858:	f280 80ea 	bge.w	8003a30 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	b29a      	uxth	r2, r3
 800386e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003872:	4013      	ands	r3, r2
 8003874:	853b      	strh	r3, [r7, #40]	; 0x28
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003886:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800388a:	b292      	uxth	r2, r2
 800388c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800388e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	7b1b      	ldrb	r3, [r3, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d122      	bne.n	80038f2 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	461a      	mov	r2, r3
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	4413      	add	r3, r2
 80038c0:	3306      	adds	r3, #6
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d4:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80038d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8087 	beq.w	80039ec <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	6959      	ldr	r1, [r3, #20]
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	88da      	ldrh	r2, [r3, #6]
 80038ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038ec:	f004 f94d 	bl	8007b8a <USB_ReadPMA>
 80038f0:	e07c      	b.n	80039ec <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	78db      	ldrb	r3, [r3, #3]
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d108      	bne.n	800390c <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80038fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80038fc:	461a      	mov	r2, r3
 80038fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f927 	bl	8003b54 <HAL_PCD_EP_DB_Receive>
 8003906:	4603      	mov	r3, r0
 8003908:	86fb      	strh	r3, [r7, #54]	; 0x36
 800390a:	e06f      	b.n	80039ec <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	b29b      	uxth	r3, r3
 800391e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003926:	847b      	strh	r3, [r7, #34]	; 0x22
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	441a      	add	r2, r3
 8003936:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800393c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003944:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003948:	b29b      	uxth	r3, r3
 800394a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d021      	beq.n	80039aa <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800396e:	b29b      	uxth	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	4413      	add	r3, r2
 800397a:	3302      	adds	r3, #2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800398e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003990:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003992:	2b00      	cmp	r3, #0
 8003994:	d02a      	beq.n	80039ec <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	6959      	ldr	r1, [r3, #20]
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	891a      	ldrh	r2, [r3, #8]
 80039a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039a4:	f004 f8f1 	bl	8007b8a <USB_ReadPMA>
 80039a8:	e020      	b.n	80039ec <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	461a      	mov	r2, r3
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4413      	add	r3, r2
 80039be:	3306      	adds	r3, #6
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6812      	ldr	r2, [r2, #0]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039cc:	881b      	ldrh	r3, [r3, #0]
 80039ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039d2:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80039d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d008      	beq.n	80039ec <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	6959      	ldr	r1, [r3, #20]
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	895a      	ldrh	r2, [r3, #10]
 80039e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039e8:	f004 f8cf 	bl	8007b8a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039f2:	441a      	add	r2, r3
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039fe:	441a      	add	r2, r3
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d004      	beq.n	8003a16 <PCD_EP_ISR_Handler+0x4c2>
 8003a0c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d206      	bcs.n	8003a24 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f005 fe9d 	bl	800975c <HAL_PCD_DataOutStageCallback>
 8003a22:	e005      	b.n	8003a30 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f002 f8f2 	bl	8005c14 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003a30:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d07e      	beq.n	8003b38 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003a3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a68:	843b      	strh	r3, [r7, #32]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	441a      	add	r2, r3
 8003a78:	8c3b      	ldrh	r3, [r7, #32]
 8003a7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	78db      	ldrb	r3, [r3, #3]
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d00c      	beq.n	8003aa8 <PCD_EP_ISR_Handler+0x554>
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	78db      	ldrb	r3, [r3, #3]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d008      	beq.n	8003aa8 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d146      	bne.n	8003b2c <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003a9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d141      	bne.n	8003b2c <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	3302      	adds	r3, #2
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ad0:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	8bfb      	ldrh	r3, [r7, #30]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d906      	bls.n	8003aea <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	699a      	ldr	r2, [r3, #24]
 8003ae0:	8bfb      	ldrh	r3, [r7, #30]
 8003ae2:	1ad2      	subs	r2, r2, r3
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	619a      	str	r2, [r3, #24]
 8003ae8:	e002      	b.n	8003af0 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	2200      	movs	r2, #0
 8003aee:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d106      	bne.n	8003b06 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	4619      	mov	r1, r3
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f005 fe47 	bl	8009792 <HAL_PCD_DataInStageCallback>
 8003b04:	e018      	b.n	8003b38 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	8bfb      	ldrh	r3, [r7, #30]
 8003b0c:	441a      	add	r2, r3
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	69da      	ldr	r2, [r3, #28]
 8003b16:	8bfb      	ldrh	r3, [r7, #30]
 8003b18:	441a      	add	r2, r3
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b24:	4618      	mov	r0, r3
 8003b26:	f002 f875 	bl	8005c14 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003b2a:	e005      	b.n	8003b38 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003b2e:	461a      	mov	r2, r3
 8003b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f91b 	bl	8003d6e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	b21b      	sxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f6ff ad0a 	blt.w	800355e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3738      	adds	r7, #56	; 0x38
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b62:	88fb      	ldrh	r3, [r7, #6]
 8003b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d07e      	beq.n	8003c6a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	461a      	mov	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4413      	add	r3, r2
 8003b80:	3302      	adds	r3, #2
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	6812      	ldr	r2, [r2, #0]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	8b7b      	ldrh	r3, [r7, #26]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d306      	bcc.n	8003bae <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	699a      	ldr	r2, [r3, #24]
 8003ba4:	8b7b      	ldrh	r3, [r7, #26]
 8003ba6:	1ad2      	subs	r2, r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	619a      	str	r2, [r3, #24]
 8003bac:	e002      	b.n	8003bb4 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d123      	bne.n	8003c04 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	833b      	strh	r3, [r7, #24]
 8003bd8:	8b3b      	ldrh	r3, [r7, #24]
 8003bda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003bde:	833b      	strh	r3, [r7, #24]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	441a      	add	r2, r3
 8003bee:	8b3b      	ldrh	r3, [r7, #24]
 8003bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d01f      	beq.n	8003c4e <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c28:	82fb      	strh	r3, [r7, #22]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	441a      	add	r2, r3
 8003c38:	8afb      	ldrh	r3, [r7, #22]
 8003c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c4e:	8b7b      	ldrh	r3, [r7, #26]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8087 	beq.w	8003d64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	6959      	ldr	r1, [r3, #20]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	891a      	ldrh	r2, [r3, #8]
 8003c62:	8b7b      	ldrh	r3, [r7, #26]
 8003c64:	f003 ff91 	bl	8007b8a <USB_ReadPMA>
 8003c68:	e07c      	b.n	8003d64 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3306      	adds	r3, #6
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c92:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	699a      	ldr	r2, [r3, #24]
 8003c98:	8b7b      	ldrh	r3, [r7, #26]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d306      	bcc.n	8003cac <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	699a      	ldr	r2, [r3, #24]
 8003ca2:	8b7b      	ldrh	r3, [r7, #26]
 8003ca4:	1ad2      	subs	r2, r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	619a      	str	r2, [r3, #24]
 8003caa:	e002      	b.n	8003cb2 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d123      	bne.n	8003d02 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cd4:	83fb      	strh	r3, [r7, #30]
 8003cd6:	8bfb      	ldrh	r3, [r7, #30]
 8003cd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003cdc:	83fb      	strh	r3, [r7, #30]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	441a      	add	r2, r3
 8003cec:	8bfb      	ldrh	r3, [r7, #30]
 8003cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d11f      	bne.n	8003d4c <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d26:	83bb      	strh	r3, [r7, #28]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	441a      	add	r2, r3
 8003d36:	8bbb      	ldrh	r3, [r7, #28]
 8003d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d44:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d4c:	8b7b      	ldrh	r3, [r7, #26]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d008      	beq.n	8003d64 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6818      	ldr	r0, [r3, #0]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	6959      	ldr	r1, [r3, #20]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	895a      	ldrh	r2, [r3, #10]
 8003d5e:	8b7b      	ldrh	r3, [r7, #26]
 8003d60:	f003 ff13 	bl	8007b8a <USB_ReadPMA>
    }
  }

  return count;
 8003d64:	8b7b      	ldrh	r3, [r7, #26]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3720      	adds	r7, #32
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b0a2      	sub	sp, #136	; 0x88
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 81c7 	beq.w	8004116 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3302      	adds	r3, #2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	699a      	ldr	r2, [r3, #24]
 8003db8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d907      	bls.n	8003dd0 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	699a      	ldr	r2, [r3, #24]
 8003dc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003dc8:	1ad2      	subs	r2, r2, r3
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	619a      	str	r2, [r3, #24]
 8003dce:	e002      	b.n	8003dd6 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f040 80b9 	bne.w	8003f52 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d126      	bne.n	8003e36 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	4413      	add	r3, r2
 8003dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	011a      	lsls	r2, r3, #4
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	4413      	add	r3, r2
 8003e0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1e:	801a      	strh	r2, [r3, #0]
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	e01a      	b.n	8003e6c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d116      	bne.n	8003e6c <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	633b      	str	r3, [r7, #48]	; 0x30
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	4413      	add	r3, r2
 8003e54:	633b      	str	r3, [r7, #48]	; 0x30
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	011a      	lsls	r2, r3, #4
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5e:	4413      	add	r3, r2
 8003e60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e68:	2200      	movs	r2, #0
 8003e6a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	623b      	str	r3, [r7, #32]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	785b      	ldrb	r3, [r3, #1]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d126      	bne.n	8003ec8 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	61bb      	str	r3, [r7, #24]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	4413      	add	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	011a      	lsls	r2, r3, #4
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	801a      	strh	r2, [r3, #0]
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ebc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	801a      	strh	r2, [r3, #0]
 8003ec6:	e017      	b.n	8003ef8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	785b      	ldrb	r3, [r3, #1]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d113      	bne.n	8003ef8 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	4413      	add	r3, r2
 8003ee0:	623b      	str	r3, [r7, #32]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	011a      	lsls	r2, r3, #4
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	4413      	add	r3, r2
 8003eec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	4619      	mov	r1, r3
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f005 fc47 	bl	8009792 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	f000 82d4 	beq.w	80044b8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2a:	827b      	strh	r3, [r7, #18]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	461a      	mov	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	441a      	add	r2, r3
 8003f3a:	8a7b      	ldrh	r3, [r7, #18]
 8003f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	8013      	strh	r3, [r2, #0]
 8003f50:	e2b2      	b.n	80044b8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d021      	beq.n	8003fa0 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	461a      	mov	r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f76:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	441a      	add	r2, r3
 8003f88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	f040 8286 	bne.w	80044b8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	695a      	ldr	r2, [r3, #20]
 8003fb0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fb4:	441a      	add	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	69da      	ldr	r2, [r3, #28]
 8003fbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003fc2:	441a      	add	r2, r3
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	6a1a      	ldr	r2, [r3, #32]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d309      	bcc.n	8003fe8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6a1a      	ldr	r2, [r3, #32]
 8003fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe0:	1ad2      	subs	r2, r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	621a      	str	r2, [r3, #32]
 8003fe6:	e015      	b.n	8004014 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d107      	bne.n	8004000 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003ff0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ff4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ffe:	e009      	b.n	8004014 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2200      	movs	r2, #0
 8004012:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	785b      	ldrb	r3, [r3, #1]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d155      	bne.n	80040c8 <HAL_PCD_EP_DB_Transmit+0x35a>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	63bb      	str	r3, [r7, #56]	; 0x38
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800402a:	b29b      	uxth	r3, r3
 800402c:	461a      	mov	r2, r3
 800402e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004030:	4413      	add	r3, r2
 8004032:	63bb      	str	r3, [r7, #56]	; 0x38
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	011a      	lsls	r2, r3, #4
 800403a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403c:	4413      	add	r3, r2
 800403e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004042:	637b      	str	r3, [r7, #52]	; 0x34
 8004044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004046:	2b00      	cmp	r3, #0
 8004048:	d112      	bne.n	8004070 <HAL_PCD_EP_DB_Transmit+0x302>
 800404a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	b29b      	uxth	r3, r3
 8004050:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004054:	b29a      	uxth	r2, r3
 8004056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004058:	801a      	strh	r2, [r3, #0]
 800405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004068:	b29a      	uxth	r2, r3
 800406a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800406c:	801a      	strh	r2, [r3, #0]
 800406e:	e047      	b.n	8004100 <HAL_PCD_EP_DB_Transmit+0x392>
 8004070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004072:	2b3e      	cmp	r3, #62	; 0x3e
 8004074:	d811      	bhi.n	800409a <HAL_PCD_EP_DB_Transmit+0x32c>
 8004076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	64bb      	str	r3, [r7, #72]	; 0x48
 800407c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_PCD_EP_DB_Transmit+0x31e>
 8004086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004088:	3301      	adds	r3, #1
 800408a:	64bb      	str	r3, [r7, #72]	; 0x48
 800408c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800408e:	b29b      	uxth	r3, r3
 8004090:	029b      	lsls	r3, r3, #10
 8004092:	b29a      	uxth	r2, r3
 8004094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004096:	801a      	strh	r2, [r3, #0]
 8004098:	e032      	b.n	8004100 <HAL_PCD_EP_DB_Transmit+0x392>
 800409a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	64bb      	str	r3, [r7, #72]	; 0x48
 80040a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <HAL_PCD_EP_DB_Transmit+0x342>
 80040aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ac:	3b01      	subs	r3, #1
 80040ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80040b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	029b      	lsls	r3, r3, #10
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c4:	801a      	strh	r2, [r3, #0]
 80040c6:	e01b      	b.n	8004100 <HAL_PCD_EP_DB_Transmit+0x392>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	785b      	ldrb	r3, [r3, #1]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d117      	bne.n	8004100 <HAL_PCD_EP_DB_Transmit+0x392>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	643b      	str	r3, [r7, #64]	; 0x40
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040de:	b29b      	uxth	r3, r3
 80040e0:	461a      	mov	r2, r3
 80040e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e4:	4413      	add	r3, r2
 80040e6:	643b      	str	r3, [r7, #64]	; 0x40
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	011a      	lsls	r2, r3, #4
 80040ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f0:	4413      	add	r3, r2
 80040f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040fe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	6959      	ldr	r1, [r3, #20]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	891a      	ldrh	r2, [r3, #8]
 800410c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410e:	b29b      	uxth	r3, r3
 8004110:	f003 fcf6 	bl	8007b00 <USB_WritePMA>
 8004114:	e1d0      	b.n	80044b8 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800411e:	b29b      	uxth	r3, r3
 8004120:	461a      	mov	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4413      	add	r3, r2
 800412a:	3306      	adds	r3, #6
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800413e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	699a      	ldr	r2, [r3, #24]
 8004146:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800414a:	429a      	cmp	r2, r3
 800414c:	d307      	bcc.n	800415e <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004156:	1ad2      	subs	r2, r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	619a      	str	r2, [r3, #24]
 800415c:	e002      	b.n	8004164 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2200      	movs	r2, #0
 8004162:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	2b00      	cmp	r3, #0
 800416a:	f040 80c4 	bne.w	80042f6 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	785b      	ldrb	r3, [r3, #1]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d126      	bne.n	80041c4 <HAL_PCD_EP_DB_Transmit+0x456>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004184:	b29b      	uxth	r3, r3
 8004186:	461a      	mov	r2, r3
 8004188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418a:	4413      	add	r3, r2
 800418c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	011a      	lsls	r2, r3, #4
 8004194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004196:	4413      	add	r3, r2
 8004198:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800419c:	66bb      	str	r3, [r7, #104]	; 0x68
 800419e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041ac:	801a      	strh	r2, [r3, #0]
 80041ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041bc:	b29a      	uxth	r2, r3
 80041be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041c0:	801a      	strh	r2, [r3, #0]
 80041c2:	e01a      	b.n	80041fa <HAL_PCD_EP_DB_Transmit+0x48c>
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	785b      	ldrb	r3, [r3, #1]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d116      	bne.n	80041fa <HAL_PCD_EP_DB_Transmit+0x48c>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	677b      	str	r3, [r7, #116]	; 0x74
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041da:	b29b      	uxth	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e0:	4413      	add	r3, r2
 80041e2:	677b      	str	r3, [r7, #116]	; 0x74
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	011a      	lsls	r2, r3, #4
 80041ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ec:	4413      	add	r3, r2
 80041ee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80041f2:	673b      	str	r3, [r7, #112]	; 0x70
 80041f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041f6:	2200      	movs	r2, #0
 80041f8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	785b      	ldrb	r3, [r3, #1]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d12f      	bne.n	8004268 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004218:	b29b      	uxth	r3, r3
 800421a:	461a      	mov	r2, r3
 800421c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004220:	4413      	add	r3, r2
 8004222:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	011a      	lsls	r2, r3, #4
 800422c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004230:	4413      	add	r3, r2
 8004232:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004236:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800423a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004246:	b29a      	uxth	r2, r3
 8004248:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800424c:	801a      	strh	r2, [r3, #0]
 800424e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	b29b      	uxth	r3, r3
 8004256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800425a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800425e:	b29a      	uxth	r2, r3
 8004260:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004264:	801a      	strh	r2, [r3, #0]
 8004266:	e017      	b.n	8004298 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	785b      	ldrb	r3, [r3, #1]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d113      	bne.n	8004298 <HAL_PCD_EP_DB_Transmit+0x52a>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004278:	b29b      	uxth	r3, r3
 800427a:	461a      	mov	r2, r3
 800427c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800427e:	4413      	add	r3, r2
 8004280:	67bb      	str	r3, [r7, #120]	; 0x78
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	011a      	lsls	r2, r3, #4
 8004288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800428a:	4413      	add	r3, r2
 800428c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004290:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004292:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004294:	2200      	movs	r2, #0
 8004296:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	4619      	mov	r1, r3
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f005 fa77 	bl	8009792 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f040 8104 	bne.w	80044b8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	441a      	add	r2, r3
 80042dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80042e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	8013      	strh	r3, [r2, #0]
 80042f4:	e0e0      	b.n	80044b8 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80042f6:	88fb      	ldrh	r3, [r7, #6]
 80042f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d121      	bne.n	8004344 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	461a      	mov	r2, r3
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	441a      	add	r2, r3
 800432c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800433c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004340:	b29b      	uxth	r3, r3
 8004342:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800434a:	2b01      	cmp	r3, #1
 800434c:	f040 80b4 	bne.w	80044b8 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004358:	441a      	add	r2, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	69da      	ldr	r2, [r3, #28]
 8004362:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004366:	441a      	add	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	6a1a      	ldr	r2, [r3, #32]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	429a      	cmp	r2, r3
 8004376:	d309      	bcc.n	800438c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	6a1a      	ldr	r2, [r3, #32]
 8004382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004384:	1ad2      	subs	r2, r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	621a      	str	r2, [r3, #32]
 800438a:	e015      	b.n	80043b8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d107      	bne.n	80043a4 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004394:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004398:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80043a2:	e009      	b.n	80043b8 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2200      	movs	r2, #0
 80043ae:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	667b      	str	r3, [r7, #100]	; 0x64
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	785b      	ldrb	r3, [r3, #1]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d155      	bne.n	8004472 <HAL_PCD_EP_DB_Transmit+0x704>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043da:	4413      	add	r3, r2
 80043dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	011a      	lsls	r2, r3, #4
 80043e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e6:	4413      	add	r3, r2
 80043e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80043ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d112      	bne.n	800441a <HAL_PCD_EP_DB_Transmit+0x6ac>
 80043f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043fe:	b29a      	uxth	r2, r3
 8004400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004402:	801a      	strh	r2, [r3, #0]
 8004404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004406:	881b      	ldrh	r3, [r3, #0]
 8004408:	b29b      	uxth	r3, r3
 800440a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800440e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004412:	b29a      	uxth	r2, r3
 8004414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004416:	801a      	strh	r2, [r3, #0]
 8004418:	e044      	b.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x736>
 800441a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800441c:	2b3e      	cmp	r3, #62	; 0x3e
 800441e:	d811      	bhi.n	8004444 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004422:	085b      	lsrs	r3, r3, #1
 8004424:	657b      	str	r3, [r7, #84]	; 0x54
 8004426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004432:	3301      	adds	r3, #1
 8004434:	657b      	str	r3, [r7, #84]	; 0x54
 8004436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004438:	b29b      	uxth	r3, r3
 800443a:	029b      	lsls	r3, r3, #10
 800443c:	b29a      	uxth	r2, r3
 800443e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004440:	801a      	strh	r2, [r3, #0]
 8004442:	e02f      	b.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x736>
 8004444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	657b      	str	r3, [r7, #84]	; 0x54
 800444a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444c:	f003 031f 	and.w	r3, r3, #31
 8004450:	2b00      	cmp	r3, #0
 8004452:	d102      	bne.n	800445a <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004456:	3b01      	subs	r3, #1
 8004458:	657b      	str	r3, [r7, #84]	; 0x54
 800445a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800445c:	b29b      	uxth	r3, r3
 800445e:	029b      	lsls	r3, r3, #10
 8004460:	b29b      	uxth	r3, r3
 8004462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800446a:	b29a      	uxth	r2, r3
 800446c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800446e:	801a      	strh	r2, [r3, #0]
 8004470:	e018      	b.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x736>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	785b      	ldrb	r3, [r3, #1]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d114      	bne.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x736>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004482:	b29b      	uxth	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004488:	4413      	add	r3, r2
 800448a:	667b      	str	r3, [r7, #100]	; 0x64
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	011a      	lsls	r2, r3, #4
 8004492:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004494:	4413      	add	r3, r2
 8004496:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800449a:	663b      	str	r3, [r7, #96]	; 0x60
 800449c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800449e:	b29a      	uxth	r2, r3
 80044a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80044a2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6818      	ldr	r0, [r3, #0]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	6959      	ldr	r1, [r3, #20]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	895a      	ldrh	r2, [r3, #10]
 80044b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f003 fb24 	bl	8007b00 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d2:	823b      	strh	r3, [r7, #16]
 80044d4:	8a3b      	ldrh	r3, [r7, #16]
 80044d6:	f083 0310 	eor.w	r3, r3, #16
 80044da:	823b      	strh	r3, [r7, #16]
 80044dc:	8a3b      	ldrh	r3, [r7, #16]
 80044de:	f083 0320 	eor.w	r3, r3, #32
 80044e2:	823b      	strh	r3, [r7, #16]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	441a      	add	r2, r3
 80044f2:	8a3b      	ldrh	r3, [r7, #16]
 80044f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004504:	b29b      	uxth	r3, r3
 8004506:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3788      	adds	r7, #136	; 0x88
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004512:	b480      	push	{r7}
 8004514:	b087      	sub	sp, #28
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	607b      	str	r3, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	817b      	strh	r3, [r7, #10]
 8004520:	4613      	mov	r3, r2
 8004522:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004524:	897b      	ldrh	r3, [r7, #10]
 8004526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00b      	beq.n	8004548 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004530:	897b      	ldrh	r3, [r7, #10]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	e009      	b.n	800455c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004548:	897a      	ldrh	r2, [r7, #10]
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4413      	add	r3, r2
 800455a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800455c:	893b      	ldrh	r3, [r7, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d107      	bne.n	8004572 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2200      	movs	r2, #0
 8004566:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	b29a      	uxth	r2, r3
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	80da      	strh	r2, [r3, #6]
 8004570:	e00b      	b.n	800458a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	2201      	movs	r2, #1
 8004576:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	b29a      	uxth	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	0c1b      	lsrs	r3, r3, #16
 8004584:	b29a      	uxth	r2, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr
	...

08004598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e272      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 8087 	beq.w	80046c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045b8:	4b92      	ldr	r3, [pc, #584]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	f003 030c 	and.w	r3, r3, #12
 80045c0:	2b04      	cmp	r3, #4
 80045c2:	d00c      	beq.n	80045de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045c4:	4b8f      	ldr	r3, [pc, #572]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 030c 	and.w	r3, r3, #12
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d112      	bne.n	80045f6 <HAL_RCC_OscConfig+0x5e>
 80045d0:	4b8c      	ldr	r3, [pc, #560]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045dc:	d10b      	bne.n	80045f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045de:	4b89      	ldr	r3, [pc, #548]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d06c      	beq.n	80046c4 <HAL_RCC_OscConfig+0x12c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d168      	bne.n	80046c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e24c      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045fe:	d106      	bne.n	800460e <HAL_RCC_OscConfig+0x76>
 8004600:	4b80      	ldr	r3, [pc, #512]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a7f      	ldr	r2, [pc, #508]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 8004606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	e02e      	b.n	800466c <HAL_RCC_OscConfig+0xd4>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0x98>
 8004616:	4b7b      	ldr	r3, [pc, #492]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a7a      	ldr	r2, [pc, #488]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 800461c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	4b78      	ldr	r3, [pc, #480]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a77      	ldr	r2, [pc, #476]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 8004628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	e01d      	b.n	800466c <HAL_RCC_OscConfig+0xd4>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004638:	d10c      	bne.n	8004654 <HAL_RCC_OscConfig+0xbc>
 800463a:	4b72      	ldr	r3, [pc, #456]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a71      	ldr	r2, [pc, #452]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 8004640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	4b6f      	ldr	r3, [pc, #444]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a6e      	ldr	r2, [pc, #440]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 800464c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	e00b      	b.n	800466c <HAL_RCC_OscConfig+0xd4>
 8004654:	4b6b      	ldr	r3, [pc, #428]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a6a      	ldr	r2, [pc, #424]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 800465a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	4b68      	ldr	r3, [pc, #416]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a67      	ldr	r2, [pc, #412]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 8004666:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800466a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d013      	beq.n	800469c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004674:	f7fd f8e6 	bl	8001844 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800467c:	f7fd f8e2 	bl	8001844 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b64      	cmp	r3, #100	; 0x64
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e200      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468e:	4b5d      	ldr	r3, [pc, #372]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0f0      	beq.n	800467c <HAL_RCC_OscConfig+0xe4>
 800469a:	e014      	b.n	80046c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7fd f8d2 	bl	8001844 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046a4:	f7fd f8ce 	bl	8001844 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b64      	cmp	r3, #100	; 0x64
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e1ec      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046b6:	4b53      	ldr	r3, [pc, #332]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1f0      	bne.n	80046a4 <HAL_RCC_OscConfig+0x10c>
 80046c2:	e000      	b.n	80046c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d063      	beq.n	800479a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046d2:	4b4c      	ldr	r3, [pc, #304]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00b      	beq.n	80046f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046de:	4b49      	ldr	r3, [pc, #292]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f003 030c 	and.w	r3, r3, #12
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d11c      	bne.n	8004724 <HAL_RCC_OscConfig+0x18c>
 80046ea:	4b46      	ldr	r3, [pc, #280]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d116      	bne.n	8004724 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046f6:	4b43      	ldr	r3, [pc, #268]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d005      	beq.n	800470e <HAL_RCC_OscConfig+0x176>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d001      	beq.n	800470e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e1c0      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470e:	4b3d      	ldr	r3, [pc, #244]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	4939      	ldr	r1, [pc, #228]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 800471e:	4313      	orrs	r3, r2
 8004720:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004722:	e03a      	b.n	800479a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d020      	beq.n	800476e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800472c:	4b36      	ldr	r3, [pc, #216]	; (8004808 <HAL_RCC_OscConfig+0x270>)
 800472e:	2201      	movs	r2, #1
 8004730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004732:	f7fd f887 	bl	8001844 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800473a:	f7fd f883 	bl	8001844 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e1a1      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800474c:	4b2d      	ldr	r3, [pc, #180]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0f0      	beq.n	800473a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004758:	4b2a      	ldr	r3, [pc, #168]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4927      	ldr	r1, [pc, #156]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 8004768:	4313      	orrs	r3, r2
 800476a:	600b      	str	r3, [r1, #0]
 800476c:	e015      	b.n	800479a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800476e:	4b26      	ldr	r3, [pc, #152]	; (8004808 <HAL_RCC_OscConfig+0x270>)
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004774:	f7fd f866 	bl	8001844 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800477c:	f7fd f862 	bl	8001844 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e180      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800478e:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d03a      	beq.n	800481c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d019      	beq.n	80047e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ae:	4b17      	ldr	r3, [pc, #92]	; (800480c <HAL_RCC_OscConfig+0x274>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b4:	f7fd f846 	bl	8001844 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047bc:	f7fd f842 	bl	8001844 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e160      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ce:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <HAL_RCC_OscConfig+0x26c>)
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f0      	beq.n	80047bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047da:	2001      	movs	r0, #1
 80047dc:	f000 fac4 	bl	8004d68 <RCC_Delay>
 80047e0:	e01c      	b.n	800481c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047e2:	4b0a      	ldr	r3, [pc, #40]	; (800480c <HAL_RCC_OscConfig+0x274>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e8:	f7fd f82c 	bl	8001844 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047ee:	e00f      	b.n	8004810 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047f0:	f7fd f828 	bl	8001844 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d908      	bls.n	8004810 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e146      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000
 8004808:	42420000 	.word	0x42420000
 800480c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004810:	4b92      	ldr	r3, [pc, #584]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e9      	bne.n	80047f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80a6 	beq.w	8004976 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800482a:	2300      	movs	r3, #0
 800482c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800482e:	4b8b      	ldr	r3, [pc, #556]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10d      	bne.n	8004856 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800483a:	4b88      	ldr	r3, [pc, #544]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	4a87      	ldr	r2, [pc, #540]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 8004840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004844:	61d3      	str	r3, [r2, #28]
 8004846:	4b85      	ldr	r3, [pc, #532]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004852:	2301      	movs	r3, #1
 8004854:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004856:	4b82      	ldr	r3, [pc, #520]	; (8004a60 <HAL_RCC_OscConfig+0x4c8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485e:	2b00      	cmp	r3, #0
 8004860:	d118      	bne.n	8004894 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004862:	4b7f      	ldr	r3, [pc, #508]	; (8004a60 <HAL_RCC_OscConfig+0x4c8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a7e      	ldr	r2, [pc, #504]	; (8004a60 <HAL_RCC_OscConfig+0x4c8>)
 8004868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800486e:	f7fc ffe9 	bl	8001844 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004876:	f7fc ffe5 	bl	8001844 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b64      	cmp	r3, #100	; 0x64
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e103      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004888:	4b75      	ldr	r3, [pc, #468]	; (8004a60 <HAL_RCC_OscConfig+0x4c8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0f0      	beq.n	8004876 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d106      	bne.n	80048aa <HAL_RCC_OscConfig+0x312>
 800489c:	4b6f      	ldr	r3, [pc, #444]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	4a6e      	ldr	r2, [pc, #440]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	6213      	str	r3, [r2, #32]
 80048a8:	e02d      	b.n	8004906 <HAL_RCC_OscConfig+0x36e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10c      	bne.n	80048cc <HAL_RCC_OscConfig+0x334>
 80048b2:	4b6a      	ldr	r3, [pc, #424]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	4a69      	ldr	r2, [pc, #420]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80048b8:	f023 0301 	bic.w	r3, r3, #1
 80048bc:	6213      	str	r3, [r2, #32]
 80048be:	4b67      	ldr	r3, [pc, #412]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	4a66      	ldr	r2, [pc, #408]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80048c4:	f023 0304 	bic.w	r3, r3, #4
 80048c8:	6213      	str	r3, [r2, #32]
 80048ca:	e01c      	b.n	8004906 <HAL_RCC_OscConfig+0x36e>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	2b05      	cmp	r3, #5
 80048d2:	d10c      	bne.n	80048ee <HAL_RCC_OscConfig+0x356>
 80048d4:	4b61      	ldr	r3, [pc, #388]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	4a60      	ldr	r2, [pc, #384]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80048da:	f043 0304 	orr.w	r3, r3, #4
 80048de:	6213      	str	r3, [r2, #32]
 80048e0:	4b5e      	ldr	r3, [pc, #376]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	4a5d      	ldr	r2, [pc, #372]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	6213      	str	r3, [r2, #32]
 80048ec:	e00b      	b.n	8004906 <HAL_RCC_OscConfig+0x36e>
 80048ee:	4b5b      	ldr	r3, [pc, #364]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	4a5a      	ldr	r2, [pc, #360]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80048f4:	f023 0301 	bic.w	r3, r3, #1
 80048f8:	6213      	str	r3, [r2, #32]
 80048fa:	4b58      	ldr	r3, [pc, #352]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	4a57      	ldr	r2, [pc, #348]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 8004900:	f023 0304 	bic.w	r3, r3, #4
 8004904:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d015      	beq.n	800493a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800490e:	f7fc ff99 	bl	8001844 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004914:	e00a      	b.n	800492c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004916:	f7fc ff95 	bl	8001844 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	f241 3288 	movw	r2, #5000	; 0x1388
 8004924:	4293      	cmp	r3, r2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e0b1      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492c:	4b4b      	ldr	r3, [pc, #300]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ee      	beq.n	8004916 <HAL_RCC_OscConfig+0x37e>
 8004938:	e014      	b.n	8004964 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800493a:	f7fc ff83 	bl	8001844 <HAL_GetTick>
 800493e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004940:	e00a      	b.n	8004958 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fc ff7f 	bl	8001844 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e09b      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004958:	4b40      	ldr	r3, [pc, #256]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1ee      	bne.n	8004942 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004964:	7dfb      	ldrb	r3, [r7, #23]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d105      	bne.n	8004976 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800496a:	4b3c      	ldr	r3, [pc, #240]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	4a3b      	ldr	r2, [pc, #236]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 8004970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004974:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 8087 	beq.w	8004a8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004980:	4b36      	ldr	r3, [pc, #216]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f003 030c 	and.w	r3, r3, #12
 8004988:	2b08      	cmp	r3, #8
 800498a:	d061      	beq.n	8004a50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d146      	bne.n	8004a22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004994:	4b33      	ldr	r3, [pc, #204]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499a:	f7fc ff53 	bl	8001844 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a2:	f7fc ff4f 	bl	8001844 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e06d      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049b4:	4b29      	ldr	r3, [pc, #164]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f0      	bne.n	80049a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c8:	d108      	bne.n	80049dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049ca:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	4921      	ldr	r1, [pc, #132]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049dc:	4b1f      	ldr	r3, [pc, #124]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a19      	ldr	r1, [r3, #32]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	430b      	orrs	r3, r1
 80049ee:	491b      	ldr	r1, [pc, #108]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049f4:	4b1b      	ldr	r3, [pc, #108]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 80049f6:	2201      	movs	r2, #1
 80049f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fa:	f7fc ff23 	bl	8001844 <HAL_GetTick>
 80049fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a00:	e008      	b.n	8004a14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a02:	f7fc ff1f 	bl	8001844 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e03d      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a14:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0f0      	beq.n	8004a02 <HAL_RCC_OscConfig+0x46a>
 8004a20:	e035      	b.n	8004a8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a22:	4b10      	ldr	r3, [pc, #64]	; (8004a64 <HAL_RCC_OscConfig+0x4cc>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a28:	f7fc ff0c 	bl	8001844 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a30:	f7fc ff08 	bl	8001844 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e026      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a42:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <HAL_RCC_OscConfig+0x4c4>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCC_OscConfig+0x498>
 8004a4e:	e01e      	b.n	8004a8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d107      	bne.n	8004a68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e019      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	40007000 	.word	0x40007000
 8004a64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_RCC_OscConfig+0x500>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a1b      	ldr	r3, [r3, #32]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d106      	bne.n	8004a8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d001      	beq.n	8004a8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40021000 	.word	0x40021000

08004a9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0d0      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab0:	4b6a      	ldr	r3, [pc, #424]	; (8004c5c <HAL_RCC_ClockConfig+0x1c0>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d910      	bls.n	8004ae0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004abe:	4b67      	ldr	r3, [pc, #412]	; (8004c5c <HAL_RCC_ClockConfig+0x1c0>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f023 0207 	bic.w	r2, r3, #7
 8004ac6:	4965      	ldr	r1, [pc, #404]	; (8004c5c <HAL_RCC_ClockConfig+0x1c0>)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ace:	4b63      	ldr	r3, [pc, #396]	; (8004c5c <HAL_RCC_ClockConfig+0x1c0>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d001      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e0b8      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d020      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004af8:	4b59      	ldr	r3, [pc, #356]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	4a58      	ldr	r2, [pc, #352]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004afe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b10:	4b53      	ldr	r3, [pc, #332]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	4a52      	ldr	r2, [pc, #328]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004b16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b1c:	4b50      	ldr	r3, [pc, #320]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	494d      	ldr	r1, [pc, #308]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d040      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d107      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b42:	4b47      	ldr	r3, [pc, #284]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d115      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e07f      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d107      	bne.n	8004b6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5a:	4b41      	ldr	r3, [pc, #260]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e073      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b6a:	4b3d      	ldr	r3, [pc, #244]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e06b      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b7a:	4b39      	ldr	r3, [pc, #228]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f023 0203 	bic.w	r2, r3, #3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4936      	ldr	r1, [pc, #216]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b8c:	f7fc fe5a 	bl	8001844 <HAL_GetTick>
 8004b90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b92:	e00a      	b.n	8004baa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b94:	f7fc fe56 	bl	8001844 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e053      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004baa:	4b2d      	ldr	r3, [pc, #180]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f003 020c 	and.w	r2, r3, #12
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d1eb      	bne.n	8004b94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bbc:	4b27      	ldr	r3, [pc, #156]	; (8004c5c <HAL_RCC_ClockConfig+0x1c0>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d210      	bcs.n	8004bec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bca:	4b24      	ldr	r3, [pc, #144]	; (8004c5c <HAL_RCC_ClockConfig+0x1c0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 0207 	bic.w	r2, r3, #7
 8004bd2:	4922      	ldr	r1, [pc, #136]	; (8004c5c <HAL_RCC_ClockConfig+0x1c0>)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bda:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <HAL_RCC_ClockConfig+0x1c0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e032      	b.n	8004c52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bf8:	4b19      	ldr	r3, [pc, #100]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	4916      	ldr	r1, [pc, #88]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d009      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c16:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	490e      	ldr	r1, [pc, #56]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c2a:	f000 f821 	bl	8004c70 <HAL_RCC_GetSysClockFreq>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <HAL_RCC_ClockConfig+0x1c4>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	091b      	lsrs	r3, r3, #4
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	490a      	ldr	r1, [pc, #40]	; (8004c64 <HAL_RCC_ClockConfig+0x1c8>)
 8004c3c:	5ccb      	ldrb	r3, [r1, r3]
 8004c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c42:	4a09      	ldr	r2, [pc, #36]	; (8004c68 <HAL_RCC_ClockConfig+0x1cc>)
 8004c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c46:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <HAL_RCC_ClockConfig+0x1d0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fc fdb8 	bl	80017c0 <HAL_InitTick>

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40022000 	.word	0x40022000
 8004c60:	40021000 	.word	0x40021000
 8004c64:	0800cb00 	.word	0x0800cb00
 8004c68:	20000000 	.word	0x20000000
 8004c6c:	20000004 	.word	0x20000004

08004c70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c70:	b490      	push	{r4, r7}
 8004c72:	b08a      	sub	sp, #40	; 0x28
 8004c74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c76:	4b29      	ldr	r3, [pc, #164]	; (8004d1c <HAL_RCC_GetSysClockFreq+0xac>)
 8004c78:	1d3c      	adds	r4, r7, #4
 8004c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c80:	f240 2301 	movw	r3, #513	; 0x201
 8004c84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
 8004c92:	2300      	movs	r3, #0
 8004c94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c9a:	4b21      	ldr	r3, [pc, #132]	; (8004d20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f003 030c 	and.w	r3, r3, #12
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d002      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d003      	beq.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x46>
 8004cae:	e02b      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cb0:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004cb2:	623b      	str	r3, [r7, #32]
      break;
 8004cb4:	e02b      	b.n	8004d0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	0c9b      	lsrs	r3, r3, #18
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	3328      	adds	r3, #40	; 0x28
 8004cc0:	443b      	add	r3, r7
 8004cc2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004cc6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d012      	beq.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cd2:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	0c5b      	lsrs	r3, r3, #17
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	3328      	adds	r3, #40	; 0x28
 8004cde:	443b      	add	r3, r7
 8004ce0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ce4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	4a0e      	ldr	r2, [pc, #56]	; (8004d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004cea:	fb03 f202 	mul.w	r2, r3, r2
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf6:	e004      	b.n	8004d02 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	4a0b      	ldr	r2, [pc, #44]	; (8004d28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cfc:	fb02 f303 	mul.w	r3, r2, r3
 8004d00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	623b      	str	r3, [r7, #32]
      break;
 8004d06:	e002      	b.n	8004d0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d08:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d0a:	623b      	str	r3, [r7, #32]
      break;
 8004d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3728      	adds	r7, #40	; 0x28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bc90      	pop	{r4, r7}
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	0800cab0 	.word	0x0800cab0
 8004d20:	40021000 	.word	0x40021000
 8004d24:	007a1200 	.word	0x007a1200
 8004d28:	003d0900 	.word	0x003d0900

08004d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d30:	4b02      	ldr	r3, [pc, #8]	; (8004d3c <HAL_RCC_GetHCLKFreq+0x10>)
 8004d32:	681b      	ldr	r3, [r3, #0]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr
 8004d3c:	20000000 	.word	0x20000000

08004d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d44:	f7ff fff2 	bl	8004d2c <HAL_RCC_GetHCLKFreq>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	0adb      	lsrs	r3, r3, #11
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	4903      	ldr	r1, [pc, #12]	; (8004d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d56:	5ccb      	ldrb	r3, [r1, r3]
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40021000 	.word	0x40021000
 8004d64:	0800cb10 	.word	0x0800cb10

08004d68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d70:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <RCC_Delay+0x34>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a0a      	ldr	r2, [pc, #40]	; (8004da0 <RCC_Delay+0x38>)
 8004d76:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7a:	0a5b      	lsrs	r3, r3, #9
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d84:	bf00      	nop
  }
  while (Delay --);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	1e5a      	subs	r2, r3, #1
 8004d8a:	60fa      	str	r2, [r7, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f9      	bne.n	8004d84 <RCC_Delay+0x1c>
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr
 8004d9c:	20000000 	.word	0x20000000
 8004da0:	10624dd3 	.word	0x10624dd3

08004da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d07d      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dc4:	4b4f      	ldr	r3, [pc, #316]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10d      	bne.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd0:	4b4c      	ldr	r3, [pc, #304]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	4a4b      	ldr	r2, [pc, #300]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dda:	61d3      	str	r3, [r2, #28]
 8004ddc:	4b49      	ldr	r3, [pc, #292]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004de8:	2301      	movs	r3, #1
 8004dea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dec:	4b46      	ldr	r3, [pc, #280]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d118      	bne.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004df8:	4b43      	ldr	r3, [pc, #268]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a42      	ldr	r2, [pc, #264]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e04:	f7fc fd1e 	bl	8001844 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0a:	e008      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e0c:	f7fc fd1a 	bl	8001844 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b64      	cmp	r3, #100	; 0x64
 8004e18:	d901      	bls.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e06d      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1e:	4b3a      	ldr	r3, [pc, #232]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e2a:	4b36      	ldr	r3, [pc, #216]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d02e      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d027      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e48:	4b2e      	ldr	r3, [pc, #184]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e52:	4b2e      	ldr	r3, [pc, #184]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e58:	4b2c      	ldr	r3, [pc, #176]	; (8004f0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e5e:	4a29      	ldr	r2, [pc, #164]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d014      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6e:	f7fc fce9 	bl	8001844 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e74:	e00a      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e76:	f7fc fce5 	bl	8001844 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e036      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e8c:	4b1d      	ldr	r3, [pc, #116]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0ee      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e98:	4b1a      	ldr	r3, [pc, #104]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4917      	ldr	r1, [pc, #92]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004eaa:	7dfb      	ldrb	r3, [r7, #23]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d105      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eb0:	4b14      	ldr	r3, [pc, #80]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	4a13      	ldr	r2, [pc, #76]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d008      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ec8:	4b0e      	ldr	r3, [pc, #56]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	490b      	ldr	r1, [pc, #44]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d008      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ee6:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	4904      	ldr	r1, [pc, #16]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000
 8004f08:	40007000 	.word	0x40007000
 8004f0c:	42420440 	.word	0x42420440

08004f10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f10:	b590      	push	{r4, r7, lr}
 8004f12:	b08d      	sub	sp, #52	; 0x34
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f18:	4b58      	ldr	r3, [pc, #352]	; (800507c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8004f1a:	f107 040c 	add.w	r4, r7, #12
 8004f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f24:	f240 2301 	movw	r3, #513	; 0x201
 8004f28:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f2e:	2300      	movs	r3, #0
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f32:	2300      	movs	r3, #0
 8004f34:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	61fb      	str	r3, [r7, #28]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b10      	cmp	r3, #16
 8004f42:	d00a      	beq.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2b10      	cmp	r3, #16
 8004f48:	f200 808e 	bhi.w	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d049      	beq.n	8004fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d079      	beq.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004f58:	e086      	b.n	8005068 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8004f5a:	4b49      	ldr	r3, [pc, #292]	; (8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004f60:	4b47      	ldr	r3, [pc, #284]	; (8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d07f      	beq.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	0c9b      	lsrs	r3, r3, #18
 8004f70:	f003 030f 	and.w	r3, r3, #15
 8004f74:	3330      	adds	r3, #48	; 0x30
 8004f76:	443b      	add	r3, r7
 8004f78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f7c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d017      	beq.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f88:	4b3d      	ldr	r3, [pc, #244]	; (8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	0c5b      	lsrs	r3, r3, #17
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	3330      	adds	r3, #48	; 0x30
 8004f94:	443b      	add	r3, r7
 8004f96:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00d      	beq.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004fa6:	4a37      	ldr	r2, [pc, #220]	; (8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	fb02 f303 	mul.w	r3, r2, r3
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb6:	e004      	b.n	8004fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	4a33      	ldr	r2, [pc, #204]	; (8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8004fbc:	fb02 f303 	mul.w	r3, r2, r3
 8004fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004fc2:	4b2f      	ldr	r3, [pc, #188]	; (8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fce:	d102      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004fd4:	e04a      	b.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4a2c      	ldr	r2, [pc, #176]	; (800508c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8004fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe0:	085b      	lsrs	r3, r3, #1
 8004fe2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004fe4:	e042      	b.n	800506c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8004fe6:	4b26      	ldr	r3, [pc, #152]	; (8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff6:	d108      	bne.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8005002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005006:	62bb      	str	r3, [r7, #40]	; 0x28
 8005008:	e01f      	b.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005014:	d109      	bne.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8005016:	4b1a      	ldr	r3, [pc, #104]	; (8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8005022:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28
 8005028:	e00f      	b.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005034:	d11c      	bne.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005036:	4b12      	ldr	r3, [pc, #72]	; (8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d016      	beq.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8005042:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005046:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005048:	e012      	b.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800504a:	e011      	b.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800504c:	f7ff fe78 	bl	8004d40 <HAL_RCC_GetPCLK2Freq>
 8005050:	4602      	mov	r2, r0
 8005052:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	0b9b      	lsrs	r3, r3, #14
 8005058:	f003 0303 	and.w	r3, r3, #3
 800505c:	3301      	adds	r3, #1
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	fbb2 f3f3 	udiv	r3, r2, r3
 8005064:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005066:	e004      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005068:	bf00      	nop
 800506a:	e002      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800506c:	bf00      	nop
 800506e:	e000      	b.n	8005072 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005070:	bf00      	nop
    }
  }
  return (frequency);
 8005072:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005074:	4618      	mov	r0, r3
 8005076:	3734      	adds	r7, #52	; 0x34
 8005078:	46bd      	mov	sp, r7
 800507a:	bd90      	pop	{r4, r7, pc}
 800507c:	0800cac0 	.word	0x0800cac0
 8005080:	40021000 	.word	0x40021000
 8005084:	007a1200 	.word	0x007a1200
 8005088:	003d0900 	.word	0x003d0900
 800508c:	aaaaaaab 	.word	0xaaaaaaab

08005090 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005090:	b084      	sub	sp, #16
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	f107 0014 	add.w	r0, r7, #20
 800509e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bc80      	pop	{r7}
 80050ac:	b004      	add	sp, #16
 80050ae:	4770      	bx	lr

080050b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050c0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80050c4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr

080050dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80050e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	43db      	mvns	r3, r3
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	4013      	ands	r3, r2
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	370c      	adds	r7, #12
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005128:	b084      	sub	sp, #16
 800512a:	b480      	push	{r7}
 800512c:	b083      	sub	sp, #12
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	f107 0014 	add.w	r0, r7, #20
 8005136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	b004      	add	sp, #16
 8005166:	4770      	bx	lr

08005168 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005168:	b480      	push	{r7}
 800516a:	b09b      	sub	sp, #108	; 0x6c
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	b29b      	uxth	r3, r3
 8005186:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800518a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	78db      	ldrb	r3, [r3, #3]
 8005196:	2b03      	cmp	r3, #3
 8005198:	d81f      	bhi.n	80051da <USB_ActivateEndpoint+0x72>
 800519a:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <USB_ActivateEndpoint+0x38>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	080051b1 	.word	0x080051b1
 80051a4:	080051cd 	.word	0x080051cd
 80051a8:	080051e3 	.word	0x080051e3
 80051ac:	080051bf 	.word	0x080051bf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80051b0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051b8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80051bc:	e012      	b.n	80051e4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80051be:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051c2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80051c6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80051ca:	e00b      	b.n	80051e4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80051cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051d4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80051d8:	e004      	b.n	80051e4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80051e0:	e000      	b.n	80051e4 <USB_ActivateEndpoint+0x7c>
      break;
 80051e2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	441a      	add	r2, r3
 80051ee:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80051f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005202:	b29b      	uxth	r3, r3
 8005204:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521c:	b29a      	uxth	r2, r3
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	b29b      	uxth	r3, r3
 8005224:	4313      	orrs	r3, r2
 8005226:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	441a      	add	r2, r3
 8005234:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800523c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005248:	b29b      	uxth	r3, r3
 800524a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	7b1b      	ldrb	r3, [r3, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	f040 8149 	bne.w	80054e8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	785b      	ldrb	r3, [r3, #1]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 8084 	beq.w	8005368 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800526a:	b29b      	uxth	r3, r3
 800526c:	461a      	mov	r2, r3
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	4413      	add	r3, r2
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	011a      	lsls	r2, r3, #4
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	88db      	ldrh	r3, [r3, #6]
 8005288:	085b      	lsrs	r3, r3, #1
 800528a:	b29b      	uxth	r3, r3
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	81fb      	strh	r3, [r7, #14]
 80052a2:	89fb      	ldrh	r3, [r7, #14]
 80052a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01b      	beq.n	80052e4 <USB_ActivateEndpoint+0x17c>
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	81bb      	strh	r3, [r7, #12]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	441a      	add	r2, r3
 80052ce:	89bb      	ldrh	r3, [r7, #12]
 80052d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	78db      	ldrb	r3, [r3, #3]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d020      	beq.n	800532e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005302:	813b      	strh	r3, [r7, #8]
 8005304:	893b      	ldrh	r3, [r7, #8]
 8005306:	f083 0320 	eor.w	r3, r3, #32
 800530a:	813b      	strh	r3, [r7, #8]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	441a      	add	r2, r3
 8005316:	893b      	ldrh	r3, [r7, #8]
 8005318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800531c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005328:	b29b      	uxth	r3, r3
 800532a:	8013      	strh	r3, [r2, #0]
 800532c:	e27f      	b.n	800582e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	b29b      	uxth	r3, r3
 800533c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005344:	817b      	strh	r3, [r7, #10]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	441a      	add	r2, r3
 8005350:	897b      	ldrh	r3, [r7, #10]
 8005352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800535e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005362:	b29b      	uxth	r3, r3
 8005364:	8013      	strh	r3, [r2, #0]
 8005366:	e262      	b.n	800582e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005372:	b29b      	uxth	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	4413      	add	r3, r2
 800537a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	011a      	lsls	r2, r3, #4
 8005382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005384:	4413      	add	r3, r2
 8005386:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	88db      	ldrh	r3, [r3, #6]
 8005390:	085b      	lsrs	r3, r3, #1
 8005392:	b29b      	uxth	r3, r3
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	461a      	mov	r2, r3
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	4413      	add	r3, r2
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	011a      	lsls	r2, r3, #4
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	4413      	add	r3, r2
 80053ba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053be:	623b      	str	r3, [r7, #32]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d112      	bne.n	80053ee <USB_ActivateEndpoint+0x286>
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	801a      	strh	r2, [r3, #0]
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	881b      	ldrh	r3, [r3, #0]
 80053dc:	b29b      	uxth	r3, r3
 80053de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	6a3b      	ldr	r3, [r7, #32]
 80053ea:	801a      	strh	r2, [r3, #0]
 80053ec:	e02f      	b.n	800544e <USB_ActivateEndpoint+0x2e6>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	2b3e      	cmp	r3, #62	; 0x3e
 80053f4:	d813      	bhi.n	800541e <USB_ActivateEndpoint+0x2b6>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	085b      	lsrs	r3, r3, #1
 80053fc:	663b      	str	r3, [r7, #96]	; 0x60
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <USB_ActivateEndpoint+0x2a8>
 800540a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800540c:	3301      	adds	r3, #1
 800540e:	663b      	str	r3, [r7, #96]	; 0x60
 8005410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005412:	b29b      	uxth	r3, r3
 8005414:	029b      	lsls	r3, r3, #10
 8005416:	b29a      	uxth	r2, r3
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	801a      	strh	r2, [r3, #0]
 800541c:	e017      	b.n	800544e <USB_ActivateEndpoint+0x2e6>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	095b      	lsrs	r3, r3, #5
 8005424:	663b      	str	r3, [r7, #96]	; 0x60
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 031f 	and.w	r3, r3, #31
 800542e:	2b00      	cmp	r3, #0
 8005430:	d102      	bne.n	8005438 <USB_ActivateEndpoint+0x2d0>
 8005432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005434:	3b01      	subs	r3, #1
 8005436:	663b      	str	r3, [r7, #96]	; 0x60
 8005438:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800543a:	b29b      	uxth	r3, r3
 800543c:	029b      	lsls	r3, r3, #10
 800543e:	b29b      	uxth	r3, r3
 8005440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005448:	b29a      	uxth	r2, r3
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	83fb      	strh	r3, [r7, #30]
 800545c:	8bfb      	ldrh	r3, [r7, #30]
 800545e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01b      	beq.n	800549e <USB_ActivateEndpoint+0x336>
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	881b      	ldrh	r3, [r3, #0]
 8005472:	b29b      	uxth	r3, r3
 8005474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547c:	83bb      	strh	r3, [r7, #28]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	441a      	add	r2, r3
 8005488:	8bbb      	ldrh	r3, [r7, #28]
 800548a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800548e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005492:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800549a:	b29b      	uxth	r3, r3
 800549c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b4:	837b      	strh	r3, [r7, #26]
 80054b6:	8b7b      	ldrh	r3, [r7, #26]
 80054b8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80054bc:	837b      	strh	r3, [r7, #26]
 80054be:	8b7b      	ldrh	r3, [r7, #26]
 80054c0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80054c4:	837b      	strh	r3, [r7, #26]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	441a      	add	r2, r3
 80054d0:	8b7b      	ldrh	r3, [r7, #26]
 80054d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	8013      	strh	r3, [r2, #0]
 80054e6:	e1a2      	b.n	800582e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fe:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	441a      	add	r2, r3
 800550c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005518:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800551c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005520:	b29b      	uxth	r3, r3
 8005522:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	65bb      	str	r3, [r7, #88]	; 0x58
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800552e:	b29b      	uxth	r3, r3
 8005530:	461a      	mov	r2, r3
 8005532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005534:	4413      	add	r3, r2
 8005536:	65bb      	str	r3, [r7, #88]	; 0x58
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	011a      	lsls	r2, r3, #4
 800553e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005540:	4413      	add	r3, r2
 8005542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005546:	657b      	str	r3, [r7, #84]	; 0x54
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	891b      	ldrh	r3, [r3, #8]
 800554c:	085b      	lsrs	r3, r3, #1
 800554e:	b29b      	uxth	r3, r3
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005556:	801a      	strh	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	653b      	str	r3, [r7, #80]	; 0x50
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005562:	b29b      	uxth	r3, r3
 8005564:	461a      	mov	r2, r3
 8005566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005568:	4413      	add	r3, r2
 800556a:	653b      	str	r3, [r7, #80]	; 0x50
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	011a      	lsls	r2, r3, #4
 8005572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005574:	4413      	add	r3, r2
 8005576:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800557a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	895b      	ldrh	r3, [r3, #10]
 8005580:	085b      	lsrs	r3, r3, #1
 8005582:	b29b      	uxth	r3, r3
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800558a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	785b      	ldrb	r3, [r3, #1]
 8005590:	2b00      	cmp	r3, #0
 8005592:	f040 8091 	bne.w	80056b8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	881b      	ldrh	r3, [r3, #0]
 80055a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80055a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80055a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d01b      	beq.n	80055e6 <USB_ActivateEndpoint+0x47e>
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	441a      	add	r2, r3
 80055d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80055d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80055de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	873b      	strh	r3, [r7, #56]	; 0x38
 80055f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d01b      	beq.n	8005636 <USB_ActivateEndpoint+0x4ce>
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	b29b      	uxth	r3, r3
 800560c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005610:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005614:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	441a      	add	r2, r3
 8005620:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800562a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800562e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005632:	b29b      	uxth	r3, r3
 8005634:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	881b      	ldrh	r3, [r3, #0]
 8005642:	b29b      	uxth	r3, r3
 8005644:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800564c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800564e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005650:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005654:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005656:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005658:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800565c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	441a      	add	r2, r3
 8005668:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800566a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567a:	b29b      	uxth	r3, r3
 800567c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	881b      	ldrh	r3, [r3, #0]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005694:	867b      	strh	r3, [r7, #50]	; 0x32
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	441a      	add	r2, r3
 80056a0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80056a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	8013      	strh	r3, [r2, #0]
 80056b6:	e0ba      	b.n	800582e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80056c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80056cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d01d      	beq.n	8005710 <USB_ActivateEndpoint+0x5a8>
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ea:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	441a      	add	r2, r3
 80056f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80056fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005704:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800570c:	b29b      	uxth	r3, r3
 800570e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005720:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005728:	2b00      	cmp	r3, #0
 800572a:	d01d      	beq.n	8005768 <USB_ActivateEndpoint+0x600>
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	881b      	ldrh	r3, [r3, #0]
 8005738:	b29b      	uxth	r3, r3
 800573a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800573e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005742:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	441a      	add	r2, r3
 8005750:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800575c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005760:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005764:	b29b      	uxth	r3, r3
 8005766:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	78db      	ldrb	r3, [r3, #3]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d024      	beq.n	80057ba <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005786:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800578a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800578e:	f083 0320 	eor.w	r3, r3, #32
 8005792:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	441a      	add	r2, r3
 80057a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80057a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	8013      	strh	r3, [r2, #0]
 80057b8:	e01d      	b.n	80057f6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	441a      	add	r2, r3
 80057de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80057e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	b29b      	uxth	r3, r3
 8005804:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	441a      	add	r2, r3
 8005818:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800581a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800581e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582a:	b29b      	uxth	r3, r3
 800582c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800582e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005832:	4618      	mov	r0, r3
 8005834:	376c      	adds	r7, #108	; 0x6c
 8005836:	46bd      	mov	sp, r7
 8005838:	bc80      	pop	{r7}
 800583a:	4770      	bx	lr

0800583c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800583c:	b480      	push	{r7}
 800583e:	b08d      	sub	sp, #52	; 0x34
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	7b1b      	ldrb	r3, [r3, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	f040 808e 	bne.w	800596c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d044      	beq.n	80058e2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	81bb      	strh	r3, [r7, #12]
 8005866:	89bb      	ldrh	r3, [r7, #12]
 8005868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01b      	beq.n	80058a8 <USB_DeactivateEndpoint+0x6c>
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	b29b      	uxth	r3, r3
 800587e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005886:	817b      	strh	r3, [r7, #10]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	441a      	add	r2, r3
 8005892:	897b      	ldrh	r3, [r7, #10]
 8005894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800589c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058be:	813b      	strh	r3, [r7, #8]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	441a      	add	r2, r3
 80058ca:	893b      	ldrh	r3, [r7, #8]
 80058cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058dc:	b29b      	uxth	r3, r3
 80058de:	8013      	strh	r3, [r2, #0]
 80058e0:	e192      	b.n	8005c08 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	827b      	strh	r3, [r7, #18]
 80058f0:	8a7b      	ldrh	r3, [r7, #18]
 80058f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d01b      	beq.n	8005932 <USB_DeactivateEndpoint+0xf6>
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	b29b      	uxth	r3, r3
 8005908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800590c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005910:	823b      	strh	r3, [r7, #16]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	441a      	add	r2, r3
 800591c:	8a3b      	ldrh	r3, [r7, #16]
 800591e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800592a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800592e:	b29b      	uxth	r3, r3
 8005930:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005948:	81fb      	strh	r3, [r7, #14]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	441a      	add	r2, r3
 8005954:	89fb      	ldrh	r3, [r7, #14]
 8005956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800595a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800595e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005966:	b29b      	uxth	r3, r3
 8005968:	8013      	strh	r3, [r2, #0]
 800596a:	e14d      	b.n	8005c08 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	785b      	ldrb	r3, [r3, #1]
 8005970:	2b00      	cmp	r3, #0
 8005972:	f040 80a5 	bne.w	8005ac0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	881b      	ldrh	r3, [r3, #0]
 8005982:	843b      	strh	r3, [r7, #32]
 8005984:	8c3b      	ldrh	r3, [r7, #32]
 8005986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d01b      	beq.n	80059c6 <USB_DeactivateEndpoint+0x18a>
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4413      	add	r3, r2
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a4:	83fb      	strh	r3, [r7, #30]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	441a      	add	r2, r3
 80059b0:	8bfb      	ldrh	r3, [r7, #30]
 80059b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	83bb      	strh	r3, [r7, #28]
 80059d4:	8bbb      	ldrh	r3, [r7, #28]
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d01b      	beq.n	8005a16 <USB_DeactivateEndpoint+0x1da>
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059f4:	837b      	strh	r3, [r7, #26]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	441a      	add	r2, r3
 8005a00:	8b7b      	ldrh	r3, [r7, #26]
 8005a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2c:	833b      	strh	r3, [r7, #24]
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	441a      	add	r2, r3
 8005a38:	8b3b      	ldrh	r3, [r7, #24]
 8005a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a64:	82fb      	strh	r3, [r7, #22]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	441a      	add	r2, r3
 8005a70:	8afb      	ldrh	r3, [r7, #22]
 8005a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a9c:	82bb      	strh	r3, [r7, #20]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	441a      	add	r2, r3
 8005aa8:	8abb      	ldrh	r3, [r7, #20]
 8005aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	8013      	strh	r3, [r2, #0]
 8005abe:	e0a3      	b.n	8005c08 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005ace:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d01b      	beq.n	8005b10 <USB_DeactivateEndpoint+0x2d4>
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	881b      	ldrh	r3, [r3, #0]
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	441a      	add	r2, r3
 8005afa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005b1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d01b      	beq.n	8005b60 <USB_DeactivateEndpoint+0x324>
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	441a      	add	r2, r3
 8005b4a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005b4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b76:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	441a      	add	r2, r3
 8005b82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bae:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	441a      	add	r2, r3
 8005bba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be6:	847b      	strh	r3, [r7, #34]	; 0x22
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	441a      	add	r2, r3
 8005bf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3734      	adds	r7, #52	; 0x34
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr

08005c14 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b0cc      	sub	sp, #304	; 0x130
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c22:	6018      	str	r0, [r3, #0]
 8005c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c2c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	f041 817d 	bne.w	8006f3a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699a      	ldr	r2, [r3, #24]
 8005c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d908      	bls.n	8005c6e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005c6c:	e007      	b.n	8005c7e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	7b1b      	ldrb	r3, [r3, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d152      	bne.n	8005d34 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005c8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6959      	ldr	r1, [r3, #20]
 8005c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	88da      	ldrh	r2, [r3, #6]
 8005ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005cb0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005cb4:	6800      	ldr	r0, [r0, #0]
 8005cb6:	f001 ff23 	bl	8007b00 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005cba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cbe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005cc2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005cc6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	4619      	mov	r1, r3
 8005ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005ce8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005cec:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8005cf0:	6812      	ldr	r2, [r2, #0]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	601a      	str	r2, [r3, #0]
 8005cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	011a      	lsls	r2, r3, #4
 8005d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d08:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d18:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005d1c:	601a      	str	r2, [r3, #0]
 8005d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d28:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	801a      	strh	r2, [r3, #0]
 8005d30:	f001 b8b5 	b.w	8006e9e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	78db      	ldrb	r3, [r3, #3]
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	f040 84c6 	bne.w	80066d2 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6a1a      	ldr	r2, [r3, #32]
 8005d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	f240 8443 	bls.w	80065ea <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	441a      	add	r2, r3
 8005da8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6a1a      	ldr	r2, [r3, #32]
 8005dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd0:	1ad2      	subs	r2, r2, r3
 8005dd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 823e 	beq.w	8006282 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005e0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e12:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005e16:	6812      	ldr	r2, [r2, #0]
 8005e18:	601a      	str	r2, [r3, #0]
 8005e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	785b      	ldrb	r3, [r3, #1]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f040 809a 	bne.w	8005f60 <USB_EPStartXfer+0x34c>
 8005e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e34:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e38:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005e3c:	6812      	ldr	r2, [r2, #0]
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	4619      	mov	r1, r3
 8005e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e5e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8005e62:	6812      	ldr	r2, [r2, #0]
 8005e64:	440a      	add	r2, r1
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	011a      	lsls	r2, r3, #4
 8005e76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4413      	add	r3, r2
 8005e82:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005e86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e8a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d122      	bne.n	8005ede <USB_EPStartXfer+0x2ca>
 8005e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ebc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	801a      	strh	r2, [r3, #0]
 8005edc:	e079      	b.n	8005fd2 <USB_EPStartXfer+0x3be>
 8005ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ee4:	d81b      	bhi.n	8005f1e <USB_EPStartXfer+0x30a>
 8005ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eea:	085b      	lsrs	r3, r3, #1
 8005eec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <USB_EPStartXfer+0x2f2>
 8005efc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f00:	3301      	adds	r3, #1
 8005f02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005f06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	029b      	lsls	r3, r3, #10
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	801a      	strh	r2, [r3, #0]
 8005f1c:	e059      	b.n	8005fd2 <USB_EPStartXfer+0x3be>
 8005f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d104      	bne.n	8005f3e <USB_EPStartXfer+0x32a>
 8005f34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005f3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	029b      	lsls	r3, r3, #10
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f56:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	801a      	strh	r2, [r3, #0]
 8005f5e:	e038      	b.n	8005fd2 <USB_EPStartXfer+0x3be>
 8005f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	785b      	ldrb	r3, [r3, #1]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d130      	bne.n	8005fd2 <USB_EPStartXfer+0x3be>
 8005f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	4619      	mov	r1, r3
 8005f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f86:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005f8a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f8e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8005f92:	6812      	ldr	r2, [r2, #0]
 8005f94:	440a      	add	r2, r1
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	011a      	lsls	r2, r3, #4
 8005fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005faa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	895b      	ldrh	r3, [r3, #10]
 8005fde:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6959      	ldr	r1, [r3, #20]
 8005fee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ff8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ffc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006000:	6800      	ldr	r0, [r0, #0]
 8006002:	f001 fd7d 	bl	8007b00 <USB_WritePMA>
            ep->xfer_buff += len;
 8006006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695a      	ldr	r2, [r3, #20]
 8006012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006016:	441a      	add	r2, r3
 8006018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800601c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006024:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006028:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6a1a      	ldr	r2, [r3, #32]
 8006030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006034:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	429a      	cmp	r2, r3
 800603e:	d90f      	bls.n	8006060 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8006040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006050:	1ad2      	subs	r2, r2, r3
 8006052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	621a      	str	r2, [r3, #32]
 800605e:	e00e      	b.n	800607e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8006060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006064:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2200      	movs	r2, #0
 800607c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800607e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	785b      	ldrb	r3, [r3, #1]
 800608a:	2b00      	cmp	r3, #0
 800608c:	f040 809a 	bne.w	80061c4 <USB_EPStartXfer+0x5b0>
 8006090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006094:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8006098:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800609c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80060a0:	6812      	ldr	r2, [r2, #0]
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	4619      	mov	r1, r3
 80060b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ba:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80060be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80060c2:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80060c6:	6812      	ldr	r2, [r2, #0]
 80060c8:	440a      	add	r2, r1
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	011a      	lsls	r2, r3, #4
 80060da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4413      	add	r3, r2
 80060e6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80060ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80060f2:	601a      	str	r2, [r3, #0]
 80060f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d122      	bne.n	8006142 <USB_EPStartXfer+0x52e>
 80060fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006100:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29b      	uxth	r3, r3
 800610a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800610e:	b29a      	uxth	r2, r3
 8006110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006114:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	801a      	strh	r2, [r3, #0]
 800611c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006120:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800612e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006132:	b29a      	uxth	r2, r3
 8006134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006138:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	e083      	b.n	800624a <USB_EPStartXfer+0x636>
 8006142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006146:	2b3e      	cmp	r3, #62	; 0x3e
 8006148:	d81b      	bhi.n	8006182 <USB_EPStartXfer+0x56e>
 800614a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800614e:	085b      	lsrs	r3, r3, #1
 8006150:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b00      	cmp	r3, #0
 800615e:	d004      	beq.n	800616a <USB_EPStartXfer+0x556>
 8006160:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006164:	3301      	adds	r3, #1
 8006166:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800616a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800616e:	b29b      	uxth	r3, r3
 8006170:	029b      	lsls	r3, r3, #10
 8006172:	b29a      	uxth	r2, r3
 8006174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006178:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	e063      	b.n	800624a <USB_EPStartXfer+0x636>
 8006182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006186:	095b      	lsrs	r3, r3, #5
 8006188:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800618c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006190:	f003 031f 	and.w	r3, r3, #31
 8006194:	2b00      	cmp	r3, #0
 8006196:	d104      	bne.n	80061a2 <USB_EPStartXfer+0x58e>
 8006198:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800619c:	3b01      	subs	r3, #1
 800619e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80061a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	029b      	lsls	r3, r3, #10
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ba:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	e042      	b.n	800624a <USB_EPStartXfer+0x636>
 80061c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d13a      	bne.n	800624a <USB_EPStartXfer+0x636>
 80061d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80061dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80061e0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80061e4:	6812      	ldr	r2, [r2, #0]
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	4619      	mov	r1, r3
 80061fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fe:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006202:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006206:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800620a:	6812      	ldr	r2, [r2, #0]
 800620c:	440a      	add	r2, r1
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	011a      	lsls	r2, r3, #4
 800621e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006222:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4413      	add	r3, r2
 800622a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800622e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006232:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800623c:	b29a      	uxth	r2, r3
 800623e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006242:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800624a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	891b      	ldrh	r3, [r3, #8]
 8006256:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800625a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6959      	ldr	r1, [r3, #20]
 8006266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626a:	b29b      	uxth	r3, r3
 800626c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006270:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006274:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006278:	6800      	ldr	r0, [r0, #0]
 800627a:	f001 fc41 	bl	8007b00 <USB_WritePMA>
 800627e:	f000 be0e 	b.w	8006e9e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d16d      	bne.n	800636e <USB_EPStartXfer+0x75a>
 8006292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006296:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	64bb      	str	r3, [r7, #72]	; 0x48
 800629e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b2:	4413      	add	r3, r2
 80062b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80062b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	011a      	lsls	r2, r3, #4
 80062c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c6:	4413      	add	r3, r2
 80062c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062cc:	647b      	str	r3, [r7, #68]	; 0x44
 80062ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d112      	bne.n	80062fc <USB_EPStartXfer+0x6e8>
 80062d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062d8:	881b      	ldrh	r3, [r3, #0]
 80062da:	b29b      	uxth	r3, r3
 80062dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e4:	801a      	strh	r2, [r3, #0]
 80062e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f8:	801a      	strh	r2, [r3, #0]
 80062fa:	e063      	b.n	80063c4 <USB_EPStartXfer+0x7b0>
 80062fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006300:	2b3e      	cmp	r3, #62	; 0x3e
 8006302:	d817      	bhi.n	8006334 <USB_EPStartXfer+0x720>
 8006304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006308:	085b      	lsrs	r3, r3, #1
 800630a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800630e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d004      	beq.n	8006324 <USB_EPStartXfer+0x710>
 800631a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800631e:	3301      	adds	r3, #1
 8006320:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006324:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006328:	b29b      	uxth	r3, r3
 800632a:	029b      	lsls	r3, r3, #10
 800632c:	b29a      	uxth	r2, r3
 800632e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006330:	801a      	strh	r2, [r3, #0]
 8006332:	e047      	b.n	80063c4 <USB_EPStartXfer+0x7b0>
 8006334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800633e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006342:	f003 031f 	and.w	r3, r3, #31
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <USB_EPStartXfer+0x740>
 800634a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800634e:	3b01      	subs	r3, #1
 8006350:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006354:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006358:	b29b      	uxth	r3, r3
 800635a:	029b      	lsls	r3, r3, #10
 800635c:	b29b      	uxth	r3, r3
 800635e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006366:	b29a      	uxth	r2, r3
 8006368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800636a:	801a      	strh	r2, [r3, #0]
 800636c:	e02a      	b.n	80063c4 <USB_EPStartXfer+0x7b0>
 800636e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	785b      	ldrb	r3, [r3, #1]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d122      	bne.n	80063c4 <USB_EPStartXfer+0x7b0>
 800637e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006382:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	653b      	str	r3, [r7, #80]	; 0x50
 800638a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800638e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006398:	b29b      	uxth	r3, r3
 800639a:	461a      	mov	r2, r3
 800639c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800639e:	4413      	add	r3, r2
 80063a0:	653b      	str	r3, [r7, #80]	; 0x50
 80063a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	011a      	lsls	r2, r3, #4
 80063b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063b2:	4413      	add	r3, r2
 80063b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063be:	b29a      	uxth	r2, r3
 80063c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80063c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	891b      	ldrh	r3, [r3, #8]
 80063d0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6959      	ldr	r1, [r3, #20]
 80063e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80063ea:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80063ee:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80063f2:	6800      	ldr	r0, [r0, #0]
 80063f4:	f001 fb84 	bl	8007b00 <USB_WritePMA>
            ep->xfer_buff += len;
 80063f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	695a      	ldr	r2, [r3, #20]
 8006404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006408:	441a      	add	r2, r3
 800640a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800640e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800641a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6a1a      	ldr	r2, [r3, #32]
 8006422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	429a      	cmp	r2, r3
 8006430:	d90f      	bls.n	8006452 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8006432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	6a1a      	ldr	r2, [r3, #32]
 800643e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006442:	1ad2      	subs	r2, r2, r3
 8006444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006448:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	621a      	str	r2, [r3, #32]
 8006450:	e00e      	b.n	8006470 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8006452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2200      	movs	r2, #0
 800646e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006474:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	643b      	str	r3, [r7, #64]	; 0x40
 800647c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006480:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	785b      	ldrb	r3, [r3, #1]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d16d      	bne.n	8006568 <USB_EPStartXfer+0x954>
 800648c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	63bb      	str	r3, [r7, #56]	; 0x38
 8006498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800649c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	461a      	mov	r2, r3
 80064aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ac:	4413      	add	r3, r2
 80064ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80064b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	011a      	lsls	r2, r3, #4
 80064be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c0:	4413      	add	r3, r2
 80064c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064c6:	637b      	str	r3, [r7, #52]	; 0x34
 80064c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d112      	bne.n	80064f6 <USB_EPStartXfer+0x8e2>
 80064d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d2:	881b      	ldrh	r3, [r3, #0]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064da:	b29a      	uxth	r2, r3
 80064dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064de:	801a      	strh	r2, [r3, #0]
 80064e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	e05d      	b.n	80065b2 <USB_EPStartXfer+0x99e>
 80064f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064fa:	2b3e      	cmp	r3, #62	; 0x3e
 80064fc:	d817      	bhi.n	800652e <USB_EPStartXfer+0x91a>
 80064fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006502:	085b      	lsrs	r3, r3, #1
 8006504:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d004      	beq.n	800651e <USB_EPStartXfer+0x90a>
 8006514:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006518:	3301      	adds	r3, #1
 800651a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800651e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006522:	b29b      	uxth	r3, r3
 8006524:	029b      	lsls	r3, r3, #10
 8006526:	b29a      	uxth	r2, r3
 8006528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652a:	801a      	strh	r2, [r3, #0]
 800652c:	e041      	b.n	80065b2 <USB_EPStartXfer+0x99e>
 800652e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006532:	095b      	lsrs	r3, r3, #5
 8006534:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800653c:	f003 031f 	and.w	r3, r3, #31
 8006540:	2b00      	cmp	r3, #0
 8006542:	d104      	bne.n	800654e <USB_EPStartXfer+0x93a>
 8006544:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006548:	3b01      	subs	r3, #1
 800654a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800654e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006552:	b29b      	uxth	r3, r3
 8006554:	029b      	lsls	r3, r3, #10
 8006556:	b29b      	uxth	r3, r3
 8006558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800655c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006560:	b29a      	uxth	r2, r3
 8006562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	e024      	b.n	80065b2 <USB_EPStartXfer+0x99e>
 8006568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	785b      	ldrb	r3, [r3, #1]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d11c      	bne.n	80065b2 <USB_EPStartXfer+0x99e>
 8006578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006586:	b29b      	uxth	r3, r3
 8006588:	461a      	mov	r2, r3
 800658a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800658c:	4413      	add	r3, r2
 800658e:	643b      	str	r3, [r7, #64]	; 0x40
 8006590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	011a      	lsls	r2, r3, #4
 800659e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a0:	4413      	add	r3, r2
 80065a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80065b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	895b      	ldrh	r3, [r3, #10]
 80065be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6959      	ldr	r1, [r3, #20]
 80065ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80065d8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80065dc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80065e0:	6800      	ldr	r0, [r0, #0]
 80065e2:	f001 fa8d 	bl	8007b00 <USB_WritePMA>
 80065e6:	f000 bc5a 	b.w	8006e9e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80065ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80065fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	881b      	ldrh	r3, [r3, #0]
 8006616:	b29b      	uxth	r3, r3
 8006618:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800661c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006620:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006628:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	441a      	add	r2, r3
 800663e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800664a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800664e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006652:	b29b      	uxth	r3, r3
 8006654:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800665a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006666:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006670:	b29b      	uxth	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006676:	4413      	add	r3, r2
 8006678:	65fb      	str	r3, [r7, #92]	; 0x5c
 800667a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800667e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	011a      	lsls	r2, r3, #4
 8006688:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800668a:	4413      	add	r3, r2
 800668c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006690:	65bb      	str	r3, [r7, #88]	; 0x58
 8006692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006696:	b29a      	uxth	r2, r3
 8006698:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800669a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800669c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	891b      	ldrh	r3, [r3, #8]
 80066a8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6959      	ldr	r1, [r3, #20]
 80066b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066bc:	b29b      	uxth	r3, r3
 80066be:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80066c2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80066c6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80066ca:	6800      	ldr	r0, [r0, #0]
 80066cc:	f001 fa18 	bl	8007b00 <USB_WritePMA>
 80066d0:	e3e5      	b.n	8006e9e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80066d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80066fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006700:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800670a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	441a      	add	r2, r3
 8006716:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800671a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800671e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006722:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800672a:	b29b      	uxth	r3, r3
 800672c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800672e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006732:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6a1a      	ldr	r2, [r3, #32]
 800673a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800673e:	1ad2      	subs	r2, r2, r3
 8006740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800674c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006750:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	b29b      	uxth	r3, r3
 800676a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 81bc 	beq.w	8006aec <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006774:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006778:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006786:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	785b      	ldrb	r3, [r3, #1]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d16d      	bne.n	800686e <USB_EPStartXfer+0xc5a>
 8006792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006796:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	67bb      	str	r3, [r7, #120]	; 0x78
 800679e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067b2:	4413      	add	r3, r2
 80067b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80067b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	011a      	lsls	r2, r3, #4
 80067c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067c6:	4413      	add	r3, r2
 80067c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067cc:	677b      	str	r3, [r7, #116]	; 0x74
 80067ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d112      	bne.n	80067fc <USB_EPStartXfer+0xbe8>
 80067d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	b29b      	uxth	r3, r3
 80067dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067e4:	801a      	strh	r2, [r3, #0]
 80067e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067f8:	801a      	strh	r2, [r3, #0]
 80067fa:	e060      	b.n	80068be <USB_EPStartXfer+0xcaa>
 80067fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006800:	2b3e      	cmp	r3, #62	; 0x3e
 8006802:	d817      	bhi.n	8006834 <USB_EPStartXfer+0xc20>
 8006804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006808:	085b      	lsrs	r3, r3, #1
 800680a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800680e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	2b00      	cmp	r3, #0
 8006818:	d004      	beq.n	8006824 <USB_EPStartXfer+0xc10>
 800681a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800681e:	3301      	adds	r3, #1
 8006820:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006824:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006828:	b29b      	uxth	r3, r3
 800682a:	029b      	lsls	r3, r3, #10
 800682c:	b29a      	uxth	r2, r3
 800682e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006830:	801a      	strh	r2, [r3, #0]
 8006832:	e044      	b.n	80068be <USB_EPStartXfer+0xcaa>
 8006834:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800683e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006842:	f003 031f 	and.w	r3, r3, #31
 8006846:	2b00      	cmp	r3, #0
 8006848:	d104      	bne.n	8006854 <USB_EPStartXfer+0xc40>
 800684a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800684e:	3b01      	subs	r3, #1
 8006850:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006854:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006858:	b29b      	uxth	r3, r3
 800685a:	029b      	lsls	r3, r3, #10
 800685c:	b29b      	uxth	r3, r3
 800685e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006866:	b29a      	uxth	r2, r3
 8006868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800686a:	801a      	strh	r2, [r3, #0]
 800686c:	e027      	b.n	80068be <USB_EPStartXfer+0xcaa>
 800686e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d11f      	bne.n	80068be <USB_EPStartXfer+0xcaa>
 800687e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006882:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800688c:	b29b      	uxth	r3, r3
 800688e:	461a      	mov	r2, r3
 8006890:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006894:	4413      	add	r3, r2
 8006896:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800689a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	011a      	lsls	r2, r3, #4
 80068a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80068ac:	4413      	add	r3, r2
 80068ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80068b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80068bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80068be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	895b      	ldrh	r3, [r3, #10]
 80068ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6959      	ldr	r1, [r3, #20]
 80068da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068de:	b29b      	uxth	r3, r3
 80068e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80068e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80068e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80068ec:	6800      	ldr	r0, [r0, #0]
 80068ee:	f001 f907 	bl	8007b00 <USB_WritePMA>
          ep->xfer_buff += len;
 80068f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695a      	ldr	r2, [r3, #20]
 80068fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006902:	441a      	add	r2, r3
 8006904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6a1a      	ldr	r2, [r3, #32]
 800691c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006920:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	429a      	cmp	r2, r3
 800692a:	d90f      	bls.n	800694c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800692c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6a1a      	ldr	r2, [r3, #32]
 8006938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800693c:	1ad2      	subs	r2, r2, r3
 800693e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	621a      	str	r2, [r3, #32]
 800694a:	e00e      	b.n	800696a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800694c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800695c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2200      	movs	r2, #0
 8006968:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800696a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800696e:	2b00      	cmp	r3, #0
 8006970:	f000 8295 	beq.w	8006e9e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	785b      	ldrb	r3, [r3, #1]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d16d      	bne.n	8006a60 <USB_EPStartXfer+0xe4c>
 8006984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006988:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006994:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800699e:	b29b      	uxth	r3, r3
 80069a0:	461a      	mov	r2, r3
 80069a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069a4:	4413      	add	r3, r2
 80069a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80069a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	011a      	lsls	r2, r3, #4
 80069b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069b8:	4413      	add	r3, r2
 80069ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069be:	667b      	str	r3, [r7, #100]	; 0x64
 80069c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d112      	bne.n	80069ee <USB_EPStartXfer+0xdda>
 80069c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069d6:	801a      	strh	r2, [r3, #0]
 80069d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ea:	801a      	strh	r2, [r3, #0]
 80069ec:	e063      	b.n	8006ab6 <USB_EPStartXfer+0xea2>
 80069ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f2:	2b3e      	cmp	r3, #62	; 0x3e
 80069f4:	d817      	bhi.n	8006a26 <USB_EPStartXfer+0xe12>
 80069f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069fa:	085b      	lsrs	r3, r3, #1
 80069fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006a00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a04:	f003 0301 	and.w	r3, r3, #1
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <USB_EPStartXfer+0xe02>
 8006a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a10:	3301      	adds	r3, #1
 8006a12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	029b      	lsls	r3, r3, #10
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a22:	801a      	strh	r2, [r3, #0]
 8006a24:	e047      	b.n	8006ab6 <USB_EPStartXfer+0xea2>
 8006a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a2a:	095b      	lsrs	r3, r3, #5
 8006a2c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a34:	f003 031f 	and.w	r3, r3, #31
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d104      	bne.n	8006a46 <USB_EPStartXfer+0xe32>
 8006a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a40:	3b01      	subs	r3, #1
 8006a42:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	029b      	lsls	r3, r3, #10
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a5c:	801a      	strh	r2, [r3, #0]
 8006a5e:	e02a      	b.n	8006ab6 <USB_EPStartXfer+0xea2>
 8006a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	785b      	ldrb	r3, [r3, #1]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d122      	bne.n	8006ab6 <USB_EPStartXfer+0xea2>
 8006a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	673b      	str	r3, [r7, #112]	; 0x70
 8006a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a90:	4413      	add	r3, r2
 8006a92:	673b      	str	r3, [r7, #112]	; 0x70
 8006a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	011a      	lsls	r2, r3, #4
 8006aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	891b      	ldrh	r3, [r3, #8]
 8006ac2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6959      	ldr	r1, [r3, #20]
 8006ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006adc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006ae0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ae4:	6800      	ldr	r0, [r0, #0]
 8006ae6:	f001 f80b 	bl	8007b00 <USB_WritePMA>
 8006aea:	e1d8      	b.n	8006e9e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	785b      	ldrb	r3, [r3, #1]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d178      	bne.n	8006bee <USB_EPStartXfer+0xfda>
 8006afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b20:	4413      	add	r3, r2
 8006b22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	011a      	lsls	r2, r3, #4
 8006b34:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b38:	4413      	add	r3, r2
 8006b3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006b3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d116      	bne.n	8006b78 <USB_EPStartXfer+0xf64>
 8006b4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b5c:	801a      	strh	r2, [r3, #0]
 8006b5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b74:	801a      	strh	r2, [r3, #0]
 8006b76:	e06b      	b.n	8006c50 <USB_EPStartXfer+0x103c>
 8006b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b7c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b7e:	d818      	bhi.n	8006bb2 <USB_EPStartXfer+0xf9e>
 8006b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b84:	085b      	lsrs	r3, r3, #1
 8006b86:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d004      	beq.n	8006ba0 <USB_EPStartXfer+0xf8c>
 8006b96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006ba0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	029b      	lsls	r3, r3, #10
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bae:	801a      	strh	r2, [r3, #0]
 8006bb0:	e04e      	b.n	8006c50 <USB_EPStartXfer+0x103c>
 8006bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d104      	bne.n	8006bd2 <USB_EPStartXfer+0xfbe>
 8006bc8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006bd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	029b      	lsls	r3, r3, #10
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006be0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006bea:	801a      	strh	r2, [r3, #0]
 8006bec:	e030      	b.n	8006c50 <USB_EPStartXfer+0x103c>
 8006bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	785b      	ldrb	r3, [r3, #1]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d128      	bne.n	8006c50 <USB_EPStartXfer+0x103c>
 8006bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c22:	4413      	add	r3, r2
 8006c24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	011a      	lsls	r2, r3, #4
 8006c36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006c40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	891b      	ldrh	r3, [r3, #8]
 8006c5c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6959      	ldr	r1, [r3, #20]
 8006c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c76:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006c7a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006c7e:	6800      	ldr	r0, [r0, #0]
 8006c80:	f000 ff3e 	bl	8007b00 <USB_WritePMA>
          ep->xfer_buff += len;
 8006c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	695a      	ldr	r2, [r3, #20]
 8006c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c94:	441a      	add	r2, r3
 8006c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6a1a      	ldr	r2, [r3, #32]
 8006cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d90f      	bls.n	8006cde <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6a1a      	ldr	r2, [r3, #32]
 8006cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cce:	1ad2      	subs	r2, r2, r3
 8006cd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	621a      	str	r2, [r3, #32]
 8006cdc:	e00e      	b.n	8006cfc <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 80cc 	beq.w	8006e9e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	785b      	ldrb	r3, [r3, #1]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d178      	bne.n	8006e16 <USB_EPStartXfer+0x1202>
 8006d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	461a      	mov	r2, r3
 8006d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d48:	4413      	add	r3, r2
 8006d4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	011a      	lsls	r2, r3, #4
 8006d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d60:	4413      	add	r3, r2
 8006d62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d116      	bne.n	8006da0 <USB_EPStartXfer+0x118c>
 8006d72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d84:	801a      	strh	r2, [r3, #0]
 8006d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d8a:	881b      	ldrh	r3, [r3, #0]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d9c:	801a      	strh	r2, [r3, #0]
 8006d9e:	e064      	b.n	8006e6a <USB_EPStartXfer+0x1256>
 8006da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da4:	2b3e      	cmp	r3, #62	; 0x3e
 8006da6:	d818      	bhi.n	8006dda <USB_EPStartXfer+0x11c6>
 8006da8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dac:	085b      	lsrs	r3, r3, #1
 8006dae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d004      	beq.n	8006dc8 <USB_EPStartXfer+0x11b4>
 8006dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	029b      	lsls	r3, r3, #10
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dd6:	801a      	strh	r2, [r3, #0]
 8006dd8:	e047      	b.n	8006e6a <USB_EPStartXfer+0x1256>
 8006dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dde:	095b      	lsrs	r3, r3, #5
 8006de0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006de4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de8:	f003 031f 	and.w	r3, r3, #31
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d104      	bne.n	8006dfa <USB_EPStartXfer+0x11e6>
 8006df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006df4:	3b01      	subs	r3, #1
 8006df6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	029b      	lsls	r3, r3, #10
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e12:	801a      	strh	r2, [r3, #0]
 8006e14:	e029      	b.n	8006e6a <USB_EPStartXfer+0x1256>
 8006e16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	785b      	ldrb	r3, [r3, #1]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d121      	bne.n	8006e6a <USB_EPStartXfer+0x1256>
 8006e26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	461a      	mov	r2, r3
 8006e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	011a      	lsls	r2, r3, #4
 8006e50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e54:	4413      	add	r3, r2
 8006e56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e62:	b29a      	uxth	r2, r3
 8006e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	895b      	ldrh	r3, [r3, #10]
 8006e76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6959      	ldr	r1, [r3, #20]
 8006e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006e90:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006e94:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006e98:	6800      	ldr	r0, [r0, #0]
 8006e9a:	f000 fe31 	bl	8007b00 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ea2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ec0:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006ec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ecc:	8013      	strh	r3, [r2, #0]
 8006ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006ed6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006eda:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006ede:	8812      	ldrh	r2, [r2, #0]
 8006ee0:	f082 0210 	eor.w	r2, r2, #16
 8006ee4:	801a      	strh	r2, [r3, #0]
 8006ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eea:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006eee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ef2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006ef6:	8812      	ldrh	r2, [r2, #0]
 8006ef8:	f082 0220 	eor.w	r2, r2, #32
 8006efc:	801a      	strh	r2, [r3, #0]
 8006efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	441a      	add	r2, r3
 8006f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	8013      	strh	r3, [r2, #0]
 8006f36:	f000 bc9f 	b.w	8007878 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	7b1b      	ldrb	r3, [r3, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f040 80ae 	bne.w	80070a8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	699a      	ldr	r2, [r3, #24]
 8006f58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d917      	bls.n	8006f98 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	699a      	ldr	r2, [r3, #24]
 8006f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f88:	1ad2      	subs	r2, r2, r3
 8006f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	619a      	str	r2, [r3, #24]
 8006f96:	e00e      	b.n	8006fb6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006fda:	4413      	add	r3, r2
 8006fdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	011a      	lsls	r2, r3, #4
 8006fee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007000:	2b00      	cmp	r3, #0
 8007002:	d116      	bne.n	8007032 <USB_EPStartXfer+0x141e>
 8007004:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	b29b      	uxth	r3, r3
 800700c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007010:	b29a      	uxth	r2, r3
 8007012:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007016:	801a      	strh	r2, [r3, #0]
 8007018:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29b      	uxth	r3, r3
 8007020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007028:	b29a      	uxth	r2, r3
 800702a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800702e:	801a      	strh	r2, [r3, #0]
 8007030:	e3e8      	b.n	8007804 <USB_EPStartXfer+0x1bf0>
 8007032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007036:	2b3e      	cmp	r3, #62	; 0x3e
 8007038:	d818      	bhi.n	800706c <USB_EPStartXfer+0x1458>
 800703a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800703e:	085b      	lsrs	r3, r3, #1
 8007040:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b00      	cmp	r3, #0
 800704e:	d004      	beq.n	800705a <USB_EPStartXfer+0x1446>
 8007050:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007054:	3301      	adds	r3, #1
 8007056:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800705a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800705e:	b29b      	uxth	r3, r3
 8007060:	029b      	lsls	r3, r3, #10
 8007062:	b29a      	uxth	r2, r3
 8007064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007068:	801a      	strh	r2, [r3, #0]
 800706a:	e3cb      	b.n	8007804 <USB_EPStartXfer+0x1bf0>
 800706c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007070:	095b      	lsrs	r3, r3, #5
 8007072:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800707a:	f003 031f 	and.w	r3, r3, #31
 800707e:	2b00      	cmp	r3, #0
 8007080:	d104      	bne.n	800708c <USB_EPStartXfer+0x1478>
 8007082:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007086:	3b01      	subs	r3, #1
 8007088:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800708c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007090:	b29b      	uxth	r3, r3
 8007092:	029b      	lsls	r3, r3, #10
 8007094:	b29b      	uxth	r3, r3
 8007096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800709a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800709e:	b29a      	uxth	r2, r3
 80070a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070a4:	801a      	strh	r2, [r3, #0]
 80070a6:	e3ad      	b.n	8007804 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80070a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	78db      	ldrb	r3, [r3, #3]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	f040 8200 	bne.w	80074ba <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80070ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	785b      	ldrb	r3, [r3, #1]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f040 8091 	bne.w	80071ee <USB_EPStartXfer+0x15da>
 80070cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	461a      	mov	r2, r3
 80070ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80070f0:	4413      	add	r3, r2
 80070f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80070f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	011a      	lsls	r2, r3, #4
 8007104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007108:	4413      	add	r3, r2
 800710a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800710e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d116      	bne.n	8007150 <USB_EPStartXfer+0x153c>
 8007122:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007126:	881b      	ldrh	r3, [r3, #0]
 8007128:	b29b      	uxth	r3, r3
 800712a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800712e:	b29a      	uxth	r2, r3
 8007130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007134:	801a      	strh	r2, [r3, #0]
 8007136:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	b29b      	uxth	r3, r3
 800713e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007146:	b29a      	uxth	r2, r3
 8007148:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800714c:	801a      	strh	r2, [r3, #0]
 800714e:	e083      	b.n	8007258 <USB_EPStartXfer+0x1644>
 8007150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007154:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	2b3e      	cmp	r3, #62	; 0x3e
 800715e:	d820      	bhi.n	80071a2 <USB_EPStartXfer+0x158e>
 8007160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	085b      	lsrs	r3, r3, #1
 800716e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007176:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <USB_EPStartXfer+0x157c>
 8007186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800718a:	3301      	adds	r3, #1
 800718c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007194:	b29b      	uxth	r3, r3
 8007196:	029b      	lsls	r3, r3, #10
 8007198:	b29a      	uxth	r2, r3
 800719a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800719e:	801a      	strh	r2, [r3, #0]
 80071a0:	e05a      	b.n	8007258 <USB_EPStartXfer+0x1644>
 80071a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	095b      	lsrs	r3, r3, #5
 80071b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80071b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	f003 031f 	and.w	r3, r3, #31
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d104      	bne.n	80071d2 <USB_EPStartXfer+0x15be>
 80071c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071cc:	3b01      	subs	r3, #1
 80071ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80071d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	029b      	lsls	r3, r3, #10
 80071da:	b29b      	uxth	r3, r3
 80071dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071ea:	801a      	strh	r2, [r3, #0]
 80071ec:	e034      	b.n	8007258 <USB_EPStartXfer+0x1644>
 80071ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	785b      	ldrb	r3, [r3, #1]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d12c      	bne.n	8007258 <USB_EPStartXfer+0x1644>
 80071fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007202:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800720c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007210:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800721a:	b29b      	uxth	r3, r3
 800721c:	461a      	mov	r2, r3
 800721e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007222:	4413      	add	r3, r2
 8007224:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800722c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	011a      	lsls	r2, r3, #4
 8007236:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800723a:	4413      	add	r3, r2
 800723c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	b29a      	uxth	r2, r3
 8007252:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007256:	801a      	strh	r2, [r3, #0]
 8007258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	785b      	ldrb	r3, [r3, #1]
 8007272:	2b00      	cmp	r3, #0
 8007274:	f040 8091 	bne.w	800739a <USB_EPStartXfer+0x1786>
 8007278:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800728a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007294:	b29b      	uxth	r3, r3
 8007296:	461a      	mov	r2, r3
 8007298:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800729c:	4413      	add	r3, r2
 800729e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80072a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	011a      	lsls	r2, r3, #4
 80072b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80072b4:	4413      	add	r3, r2
 80072b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80072be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d116      	bne.n	80072fc <USB_EPStartXfer+0x16e8>
 80072ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072d2:	881b      	ldrh	r3, [r3, #0]
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072da:	b29a      	uxth	r2, r3
 80072dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072e0:	801a      	strh	r2, [r3, #0]
 80072e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80072f8:	801a      	strh	r2, [r3, #0]
 80072fa:	e07c      	b.n	80073f6 <USB_EPStartXfer+0x17e2>
 80072fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007300:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	2b3e      	cmp	r3, #62	; 0x3e
 800730a:	d820      	bhi.n	800734e <USB_EPStartXfer+0x173a>
 800730c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	085b      	lsrs	r3, r3, #1
 800731a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800731e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007322:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d004      	beq.n	800733c <USB_EPStartXfer+0x1728>
 8007332:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007336:	3301      	adds	r3, #1
 8007338:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800733c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007340:	b29b      	uxth	r3, r3
 8007342:	029b      	lsls	r3, r3, #10
 8007344:	b29a      	uxth	r2, r3
 8007346:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800734a:	801a      	strh	r2, [r3, #0]
 800734c:	e053      	b.n	80073f6 <USB_EPStartXfer+0x17e2>
 800734e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	095b      	lsrs	r3, r3, #5
 800735c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f003 031f 	and.w	r3, r3, #31
 8007370:	2b00      	cmp	r3, #0
 8007372:	d104      	bne.n	800737e <USB_EPStartXfer+0x176a>
 8007374:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007378:	3b01      	subs	r3, #1
 800737a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800737e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007382:	b29b      	uxth	r3, r3
 8007384:	029b      	lsls	r3, r3, #10
 8007386:	b29b      	uxth	r3, r3
 8007388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800738c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007390:	b29a      	uxth	r2, r3
 8007392:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007396:	801a      	strh	r2, [r3, #0]
 8007398:	e02d      	b.n	80073f6 <USB_EPStartXfer+0x17e2>
 800739a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	785b      	ldrb	r3, [r3, #1]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d125      	bne.n	80073f6 <USB_EPStartXfer+0x17e2>
 80073aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	461a      	mov	r2, r3
 80073bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073c0:	4413      	add	r3, r2
 80073c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80073c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	011a      	lsls	r2, r3, #4
 80073d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073d8:	4413      	add	r3, r2
 80073da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073f4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80073f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 81fe 	beq.w	8007804 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007416:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007428:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800742c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d005      	beq.n	8007440 <USB_EPStartXfer+0x182c>
 8007434:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743c:	2b00      	cmp	r3, #0
 800743e:	d10d      	bne.n	800745c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007440:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007448:	2b00      	cmp	r3, #0
 800744a:	f040 81db 	bne.w	8007804 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800744e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007456:	2b00      	cmp	r3, #0
 8007458:	f040 81d4 	bne.w	8007804 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800745c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007460:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	b29b      	uxth	r3, r3
 800747a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800747e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007482:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8007486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800748a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007494:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	441a      	add	r2, r3
 80074a0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80074a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	8013      	strh	r3, [r2, #0]
 80074b8:	e1a4      	b.n	8007804 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80074ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	78db      	ldrb	r3, [r3, #3]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	f040 819a 	bne.w	8007800 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80074cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	699a      	ldr	r2, [r3, #24]
 80074d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d917      	bls.n	8007518 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80074e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	691b      	ldr	r3, [r3, #16]
 80074f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80074f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	699a      	ldr	r2, [r3, #24]
 8007504:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007508:	1ad2      	subs	r2, r2, r3
 800750a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	619a      	str	r2, [r3, #24]
 8007516:	e00e      	b.n	8007536 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8007518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800751c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	699b      	ldr	r3, [r3, #24]
 8007524:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8007528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2200      	movs	r2, #0
 8007534:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	785b      	ldrb	r3, [r3, #1]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d178      	bne.n	8007638 <USB_EPStartXfer+0x1a24>
 8007546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800754a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007558:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007562:	b29b      	uxth	r3, r3
 8007564:	461a      	mov	r2, r3
 8007566:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800756a:	4413      	add	r3, r2
 800756c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	011a      	lsls	r2, r3, #4
 800757e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007582:	4413      	add	r3, r2
 8007584:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007588:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800758c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007590:	2b00      	cmp	r3, #0
 8007592:	d116      	bne.n	80075c2 <USB_EPStartXfer+0x19ae>
 8007594:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	b29b      	uxth	r3, r3
 800759c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075a6:	801a      	strh	r2, [r3, #0]
 80075a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075ac:	881b      	ldrh	r3, [r3, #0]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075be:	801a      	strh	r2, [r3, #0]
 80075c0:	e06b      	b.n	800769a <USB_EPStartXfer+0x1a86>
 80075c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c6:	2b3e      	cmp	r3, #62	; 0x3e
 80075c8:	d818      	bhi.n	80075fc <USB_EPStartXfer+0x19e8>
 80075ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075ce:	085b      	lsrs	r3, r3, #1
 80075d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80075d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d004      	beq.n	80075ea <USB_EPStartXfer+0x19d6>
 80075e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075e4:	3301      	adds	r3, #1
 80075e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80075ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	029b      	lsls	r3, r3, #10
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075f8:	801a      	strh	r2, [r3, #0]
 80075fa:	e04e      	b.n	800769a <USB_EPStartXfer+0x1a86>
 80075fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007600:	095b      	lsrs	r3, r3, #5
 8007602:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800760a:	f003 031f 	and.w	r3, r3, #31
 800760e:	2b00      	cmp	r3, #0
 8007610:	d104      	bne.n	800761c <USB_EPStartXfer+0x1a08>
 8007612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007616:	3b01      	subs	r3, #1
 8007618:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800761c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007620:	b29b      	uxth	r3, r3
 8007622:	029b      	lsls	r3, r3, #10
 8007624:	b29b      	uxth	r3, r3
 8007626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800762a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800762e:	b29a      	uxth	r2, r3
 8007630:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007634:	801a      	strh	r2, [r3, #0]
 8007636:	e030      	b.n	800769a <USB_EPStartXfer+0x1a86>
 8007638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	785b      	ldrb	r3, [r3, #1]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d128      	bne.n	800769a <USB_EPStartXfer+0x1a86>
 8007648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007664:	b29b      	uxth	r3, r3
 8007666:	461a      	mov	r2, r3
 8007668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800766c:	4413      	add	r3, r2
 800766e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	011a      	lsls	r2, r3, #4
 8007680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007684:	4413      	add	r3, r2
 8007686:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800768a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800768e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007692:	b29a      	uxth	r2, r3
 8007694:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007698:	801a      	strh	r2, [r3, #0]
 800769a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800769e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	785b      	ldrb	r3, [r3, #1]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d178      	bne.n	80077aa <USB_EPStartXfer+0x1b96>
 80076b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80076c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	461a      	mov	r2, r3
 80076d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076dc:	4413      	add	r3, r2
 80076de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80076e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	011a      	lsls	r2, r3, #4
 80076f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076f4:	4413      	add	r3, r2
 80076f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80076fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007702:	2b00      	cmp	r3, #0
 8007704:	d116      	bne.n	8007734 <USB_EPStartXfer+0x1b20>
 8007706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800770a:	881b      	ldrh	r3, [r3, #0]
 800770c:	b29b      	uxth	r3, r3
 800770e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007712:	b29a      	uxth	r2, r3
 8007714:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007718:	801a      	strh	r2, [r3, #0]
 800771a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800771e:	881b      	ldrh	r3, [r3, #0]
 8007720:	b29b      	uxth	r3, r3
 8007722:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007726:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800772a:	b29a      	uxth	r2, r3
 800772c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007730:	801a      	strh	r2, [r3, #0]
 8007732:	e067      	b.n	8007804 <USB_EPStartXfer+0x1bf0>
 8007734:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007738:	2b3e      	cmp	r3, #62	; 0x3e
 800773a:	d818      	bhi.n	800776e <USB_EPStartXfer+0x1b5a>
 800773c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007740:	085b      	lsrs	r3, r3, #1
 8007742:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d004      	beq.n	800775c <USB_EPStartXfer+0x1b48>
 8007752:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007756:	3301      	adds	r3, #1
 8007758:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800775c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007760:	b29b      	uxth	r3, r3
 8007762:	029b      	lsls	r3, r3, #10
 8007764:	b29a      	uxth	r2, r3
 8007766:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800776a:	801a      	strh	r2, [r3, #0]
 800776c:	e04a      	b.n	8007804 <USB_EPStartXfer+0x1bf0>
 800776e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007772:	095b      	lsrs	r3, r3, #5
 8007774:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777c:	f003 031f 	and.w	r3, r3, #31
 8007780:	2b00      	cmp	r3, #0
 8007782:	d104      	bne.n	800778e <USB_EPStartXfer+0x1b7a>
 8007784:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007788:	3b01      	subs	r3, #1
 800778a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800778e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007792:	b29b      	uxth	r3, r3
 8007794:	029b      	lsls	r3, r3, #10
 8007796:	b29b      	uxth	r3, r3
 8007798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800779c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077a6:	801a      	strh	r2, [r3, #0]
 80077a8:	e02c      	b.n	8007804 <USB_EPStartXfer+0x1bf0>
 80077aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	785b      	ldrb	r3, [r3, #1]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d124      	bne.n	8007804 <USB_EPStartXfer+0x1bf0>
 80077ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	461a      	mov	r2, r3
 80077cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077d0:	4413      	add	r3, r2
 80077d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	011a      	lsls	r2, r3, #4
 80077e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e8:	4413      	add	r3, r2
 80077ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f6:	b29a      	uxth	r2, r3
 80077f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077fc:	801a      	strh	r2, [r3, #0]
 80077fe:	e001      	b.n	8007804 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e03a      	b.n	800787a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007808:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	b29b      	uxth	r3, r3
 8007822:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800782a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800782e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007832:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007836:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800783a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800783e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007842:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800784a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007854:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	441a      	add	r2, r3
 8007860:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800786c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007874:	b29b      	uxth	r3, r3
 8007876:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	785b      	ldrb	r3, [r3, #1]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d020      	beq.n	80078d8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078ac:	81bb      	strh	r3, [r7, #12]
 80078ae:	89bb      	ldrh	r3, [r7, #12]
 80078b0:	f083 0310 	eor.w	r3, r3, #16
 80078b4:	81bb      	strh	r3, [r7, #12]
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	441a      	add	r2, r3
 80078c0:	89bb      	ldrh	r3, [r7, #12]
 80078c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	8013      	strh	r3, [r2, #0]
 80078d6:	e01f      	b.n	8007918 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	4413      	add	r3, r2
 80078e2:	881b      	ldrh	r3, [r3, #0]
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ee:	81fb      	strh	r3, [r7, #14]
 80078f0:	89fb      	ldrh	r3, [r7, #14]
 80078f2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80078f6:	81fb      	strh	r3, [r7, #14]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	441a      	add	r2, r3
 8007902:	89fb      	ldrh	r3, [r7, #14]
 8007904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800790c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007914:	b29b      	uxth	r3, r3
 8007916:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3714      	adds	r7, #20
 800791e:	46bd      	mov	sp, r7
 8007920:	bc80      	pop	{r7}
 8007922:	4770      	bx	lr

08007924 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	7b1b      	ldrb	r3, [r3, #12]
 8007932:	2b00      	cmp	r3, #0
 8007934:	f040 809d 	bne.w	8007a72 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	785b      	ldrb	r3, [r3, #1]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d04c      	beq.n	80079da <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	823b      	strh	r3, [r7, #16]
 800794e:	8a3b      	ldrh	r3, [r7, #16]
 8007950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007954:	2b00      	cmp	r3, #0
 8007956:	d01b      	beq.n	8007990 <USB_EPClearStall+0x6c>
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b29b      	uxth	r3, r3
 8007966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800796a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796e:	81fb      	strh	r3, [r7, #14]
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	441a      	add	r2, r3
 800797a:	89fb      	ldrh	r3, [r7, #14]
 800797c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007988:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800798c:	b29b      	uxth	r3, r3
 800798e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	78db      	ldrb	r3, [r3, #3]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d06c      	beq.n	8007a72 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ae:	81bb      	strh	r3, [r7, #12]
 80079b0:	89bb      	ldrh	r3, [r7, #12]
 80079b2:	f083 0320 	eor.w	r3, r3, #32
 80079b6:	81bb      	strh	r3, [r7, #12]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	441a      	add	r2, r3
 80079c2:	89bb      	ldrh	r3, [r7, #12]
 80079c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	8013      	strh	r3, [r2, #0]
 80079d8:	e04b      	b.n	8007a72 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	781b      	ldrb	r3, [r3, #0]
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	881b      	ldrh	r3, [r3, #0]
 80079e6:	82fb      	strh	r3, [r7, #22]
 80079e8:	8afb      	ldrh	r3, [r7, #22]
 80079ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d01b      	beq.n	8007a2a <USB_EPClearStall+0x106>
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a08:	82bb      	strh	r3, [r7, #20]
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	441a      	add	r2, r3
 8007a14:	8abb      	ldrh	r3, [r7, #20]
 8007a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	881b      	ldrh	r3, [r3, #0]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a40:	827b      	strh	r3, [r7, #18]
 8007a42:	8a7b      	ldrh	r3, [r7, #18]
 8007a44:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007a48:	827b      	strh	r3, [r7, #18]
 8007a4a:	8a7b      	ldrh	r3, [r7, #18]
 8007a4c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a50:	827b      	strh	r3, [r7, #18]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	441a      	add	r2, r3
 8007a5c:	8a7b      	ldrh	r3, [r7, #18]
 8007a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	371c      	adds	r7, #28
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bc80      	pop	{r7}
 8007a7c:	4770      	bx	lr

08007a7e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	460b      	mov	r3, r1
 8007a88:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007a8a:	78fb      	ldrb	r3, [r7, #3]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d103      	bne.n	8007a98 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2280      	movs	r2, #128	; 0x80
 8007a94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bc80      	pop	{r7}
 8007aa2:	4770      	bx	lr

08007aa4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bc80      	pop	{r7}
 8007ab6:	4770      	bx	lr

08007ab8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bc80      	pop	{r7}
 8007aca:	4770      	bx	lr

08007acc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007ade:	68fb      	ldr	r3, [r7, #12]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bc80      	pop	{r7}
 8007ae8:	4770      	bx	lr

08007aea <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b083      	sub	sp, #12
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bc80      	pop	{r7}
 8007afe:	4770      	bx	lr

08007b00 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b08d      	sub	sp, #52	; 0x34
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	460b      	mov	r3, r1
 8007b10:	80fb      	strh	r3, [r7, #6]
 8007b12:	4613      	mov	r3, r2
 8007b14:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007b16:	88bb      	ldrh	r3, [r7, #4]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	085b      	lsrs	r3, r3, #1
 8007b1c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	005a      	lsls	r2, r3, #1
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007b32:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007b34:	6a3b      	ldr	r3, [r7, #32]
 8007b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b38:	e01e      	b.n	8007b78 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	3301      	adds	r3, #1
 8007b44:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b62:	3302      	adds	r3, #2
 8007b64:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8007b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b68:	3302      	adds	r3, #2
 8007b6a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6e:	3301      	adds	r3, #1
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b74:	3b01      	subs	r3, #1
 8007b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1dd      	bne.n	8007b3a <USB_WritePMA+0x3a>
  }
}
 8007b7e:	bf00      	nop
 8007b80:	bf00      	nop
 8007b82:	3734      	adds	r7, #52	; 0x34
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bc80      	pop	{r7}
 8007b88:	4770      	bx	lr

08007b8a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b08b      	sub	sp, #44	; 0x2c
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	60f8      	str	r0, [r7, #12]
 8007b92:	60b9      	str	r1, [r7, #8]
 8007b94:	4611      	mov	r1, r2
 8007b96:	461a      	mov	r2, r3
 8007b98:	460b      	mov	r3, r1
 8007b9a:	80fb      	strh	r3, [r7, #6]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007ba0:	88bb      	ldrh	r3, [r7, #4]
 8007ba2:	085b      	lsrs	r3, r3, #1
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007bb0:	88fb      	ldrh	r3, [r7, #6]
 8007bb2:	005a      	lsls	r2, r3, #1
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bbc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bc2:	e01b      	b.n	8007bfc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007bc4:	6a3b      	ldr	r3, [r7, #32]
 8007bc6:	881b      	ldrh	r3, [r3, #0]
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	3302      	adds	r3, #2
 8007bd0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	0a1b      	lsrs	r3, r3, #8
 8007be4:	b2da      	uxtb	r2, r3
 8007be6:	69fb      	ldr	r3, [r7, #28]
 8007be8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	3301      	adds	r3, #1
 8007bee:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	3302      	adds	r3, #2
 8007bf4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e0      	bne.n	8007bc4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007c02:	88bb      	ldrh	r3, [r7, #4]
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d007      	beq.n	8007c1e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	881b      	ldrh	r3, [r3, #0]
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	701a      	strb	r2, [r3, #0]
  }
}
 8007c1e:	bf00      	nop
 8007c20:	372c      	adds	r7, #44	; 0x2c
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bc80      	pop	{r7}
 8007c26:	4770      	bx	lr

08007c28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	460b      	mov	r3, r1
 8007c32:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	7c1b      	ldrb	r3, [r3, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d115      	bne.n	8007c6c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c44:	2202      	movs	r2, #2
 8007c46:	2181      	movs	r1, #129	; 0x81
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 fe86 	bl	800995a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c58:	2202      	movs	r2, #2
 8007c5a:	2101      	movs	r1, #1
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f001 fe7c 	bl	800995a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007c6a:	e012      	b.n	8007c92 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007c6c:	2340      	movs	r3, #64	; 0x40
 8007c6e:	2202      	movs	r2, #2
 8007c70:	2181      	movs	r1, #129	; 0x81
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f001 fe71 	bl	800995a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007c7e:	2340      	movs	r3, #64	; 0x40
 8007c80:	2202      	movs	r2, #2
 8007c82:	2101      	movs	r1, #1
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f001 fe68 	bl	800995a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c92:	2308      	movs	r3, #8
 8007c94:	2203      	movs	r2, #3
 8007c96:	2182      	movs	r1, #130	; 0x82
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 fe5e 	bl	800995a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ca4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ca8:	f001 ff7e 	bl	8009ba8 <USBD_static_malloc>
 8007cac:	4602      	mov	r2, r0
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d102      	bne.n	8007cc4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	73fb      	strb	r3, [r7, #15]
 8007cc2:	e026      	b.n	8007d12 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cca:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	7c1b      	ldrb	r3, [r3, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d109      	bne.n	8007d02 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f001 ff1e 	bl	8009b3c <USBD_LL_PrepareReceive>
 8007d00:	e007      	b.n	8007d12 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d08:	2340      	movs	r3, #64	; 0x40
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f001 ff15 	bl	8009b3c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	460b      	mov	r3, r1
 8007d26:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007d2c:	2181      	movs	r1, #129	; 0x81
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f001 fe39 	bl	80099a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f001 fe32 	bl	80099a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007d4a:	2182      	movs	r1, #130	; 0x82
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f001 fe2a 	bl	80099a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00e      	beq.n	8007d80 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 ff24 	bl	8009bc0 <USBD_static_free>
    pdev->pClassData = NULL;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b086      	sub	sp, #24
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d039      	beq.n	8007e28 <USBD_CDC_Setup+0x9e>
 8007db4:	2b20      	cmp	r3, #32
 8007db6:	d17f      	bne.n	8007eb8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	88db      	ldrh	r3, [r3, #6]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d029      	beq.n	8007e14 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	b25b      	sxtb	r3, r3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	da11      	bge.n	8007dee <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007dd6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	88d2      	ldrh	r2, [r2, #6]
 8007ddc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007dde:	6939      	ldr	r1, [r7, #16]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	88db      	ldrh	r3, [r3, #6]
 8007de4:	461a      	mov	r2, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 fa09 	bl	80091fe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007dec:	e06b      	b.n	8007ec6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	785a      	ldrb	r2, [r3, #1]
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	88db      	ldrh	r3, [r3, #6]
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007e04:	6939      	ldr	r1, [r7, #16]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	88db      	ldrh	r3, [r3, #6]
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f001 fa24 	bl	800925a <USBD_CtlPrepareRx>
      break;
 8007e12:	e058      	b.n	8007ec6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	683a      	ldr	r2, [r7, #0]
 8007e1e:	7850      	ldrb	r0, [r2, #1]
 8007e20:	2200      	movs	r2, #0
 8007e22:	6839      	ldr	r1, [r7, #0]
 8007e24:	4798      	blx	r3
      break;
 8007e26:	e04e      	b.n	8007ec6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	785b      	ldrb	r3, [r3, #1]
 8007e2c:	2b0b      	cmp	r3, #11
 8007e2e:	d02e      	beq.n	8007e8e <USBD_CDC_Setup+0x104>
 8007e30:	2b0b      	cmp	r3, #11
 8007e32:	dc38      	bgt.n	8007ea6 <USBD_CDC_Setup+0x11c>
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d002      	beq.n	8007e3e <USBD_CDC_Setup+0xb4>
 8007e38:	2b0a      	cmp	r3, #10
 8007e3a:	d014      	beq.n	8007e66 <USBD_CDC_Setup+0xdc>
 8007e3c:	e033      	b.n	8007ea6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d107      	bne.n	8007e58 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007e48:	f107 030c 	add.w	r3, r7, #12
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f001 f9d4 	bl	80091fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e56:	e02e      	b.n	8007eb6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 f965 	bl	800912a <USBD_CtlError>
            ret = USBD_FAIL;
 8007e60:	2302      	movs	r3, #2
 8007e62:	75fb      	strb	r3, [r7, #23]
          break;
 8007e64:	e027      	b.n	8007eb6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e6c:	2b03      	cmp	r3, #3
 8007e6e:	d107      	bne.n	8007e80 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e70:	f107 030f 	add.w	r3, r7, #15
 8007e74:	2201      	movs	r2, #1
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 f9c0 	bl	80091fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e7e:	e01a      	b.n	8007eb6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f001 f951 	bl	800912a <USBD_CtlError>
            ret = USBD_FAIL;
 8007e88:	2302      	movs	r3, #2
 8007e8a:	75fb      	strb	r3, [r7, #23]
          break;
 8007e8c:	e013      	b.n	8007eb6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	d00d      	beq.n	8007eb4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007e98:	6839      	ldr	r1, [r7, #0]
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f001 f945 	bl	800912a <USBD_CtlError>
            ret = USBD_FAIL;
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007ea4:	e006      	b.n	8007eb4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f001 f93e 	bl	800912a <USBD_CtlError>
          ret = USBD_FAIL;
 8007eae:	2302      	movs	r3, #2
 8007eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8007eb2:	e000      	b.n	8007eb6 <USBD_CDC_Setup+0x12c>
          break;
 8007eb4:	bf00      	nop
      }
      break;
 8007eb6:	e006      	b.n	8007ec6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f001 f935 	bl	800912a <USBD_CtlError>
      ret = USBD_FAIL;
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ec4:	bf00      	nop
  }

  return ret;
 8007ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	460b      	mov	r3, r1
 8007eda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eea:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d03a      	beq.n	8007f6c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007ef6:	78fa      	ldrb	r2, [r7, #3]
 8007ef8:	6879      	ldr	r1, [r7, #4]
 8007efa:	4613      	mov	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	4413      	add	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	440b      	add	r3, r1
 8007f04:	331c      	adds	r3, #28
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d029      	beq.n	8007f60 <USBD_CDC_DataIn+0x90>
 8007f0c:	78fa      	ldrb	r2, [r7, #3]
 8007f0e:	6879      	ldr	r1, [r7, #4]
 8007f10:	4613      	mov	r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	4413      	add	r3, r2
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	440b      	add	r3, r1
 8007f1a:	331c      	adds	r3, #28
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	78f9      	ldrb	r1, [r7, #3]
 8007f20:	68b8      	ldr	r0, [r7, #8]
 8007f22:	460b      	mov	r3, r1
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	440b      	add	r3, r1
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	4403      	add	r3, r0
 8007f2c:	3338      	adds	r3, #56	; 0x38
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	fbb2 f1f3 	udiv	r1, r2, r3
 8007f34:	fb01 f303 	mul.w	r3, r1, r3
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d110      	bne.n	8007f60 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007f3e:	78fa      	ldrb	r2, [r7, #3]
 8007f40:	6879      	ldr	r1, [r7, #4]
 8007f42:	4613      	mov	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4413      	add	r3, r2
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	440b      	add	r3, r1
 8007f4c:	331c      	adds	r3, #28
 8007f4e:	2200      	movs	r2, #0
 8007f50:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f52:	78f9      	ldrb	r1, [r7, #3]
 8007f54:	2300      	movs	r3, #0
 8007f56:	2200      	movs	r2, #0
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 fdcc 	bl	8009af6 <USBD_LL_Transmit>
 8007f5e:	e003      	b.n	8007f68 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	e000      	b.n	8007f6e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007f6c:	2302      	movs	r3, #2
  }
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b084      	sub	sp, #16
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	460b      	mov	r3, r1
 8007f80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f88:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f001 fdf7 	bl	8009b82 <USBD_LL_GetRxDataSize>
 8007f94:	4602      	mov	r2, r0
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00d      	beq.n	8007fc2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007fba:	4611      	mov	r1, r2
 8007fbc:	4798      	blx	r3

    return USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	e000      	b.n	8007fc4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007fc2:	2302      	movs	r3, #2
  }
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fda:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d015      	beq.n	8008012 <USBD_CDC_EP0_RxReady+0x46>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007fec:	2bff      	cmp	r3, #255	; 0xff
 8007fee:	d010      	beq.n	8008012 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007ffe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008006:	b292      	uxth	r2, r2
 8008008:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	22ff      	movs	r2, #255	; 0xff
 800800e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2243      	movs	r2, #67	; 0x43
 8008028:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800802a:	4b03      	ldr	r3, [pc, #12]	; (8008038 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	bc80      	pop	{r7}
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	20000094 	.word	0x20000094

0800803c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800803c:	b480      	push	{r7}
 800803e:	b083      	sub	sp, #12
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2243      	movs	r2, #67	; 0x43
 8008048:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800804a:	4b03      	ldr	r3, [pc, #12]	; (8008058 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800804c:	4618      	mov	r0, r3
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	bc80      	pop	{r7}
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop
 8008058:	20000050 	.word	0x20000050

0800805c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2243      	movs	r2, #67	; 0x43
 8008068:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800806a:	4b03      	ldr	r3, [pc, #12]	; (8008078 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800806c:	4618      	mov	r0, r3
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	bc80      	pop	{r7}
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	200000d8 	.word	0x200000d8

0800807c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	220a      	movs	r2, #10
 8008088:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800808a:	4b03      	ldr	r3, [pc, #12]	; (8008098 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800808c:	4618      	mov	r0, r3
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	bc80      	pop	{r7}
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	2000000c 	.word	0x2000000c

0800809c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80080a6:	2302      	movs	r3, #2
 80080a8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d005      	beq.n	80080bc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3714      	adds	r7, #20
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bc80      	pop	{r7}
 80080c6:	4770      	bx	lr

080080c8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	4613      	mov	r3, r2
 80080d4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080dc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80080e6:	88fa      	ldrh	r2, [r7, #6]
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	371c      	adds	r7, #28
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bc80      	pop	{r7}
 80080f8:	4770      	bx	lr

080080fa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b085      	sub	sp, #20
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800810a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3714      	adds	r7, #20
 800811a:	46bd      	mov	sp, r7
 800811c:	bc80      	pop	{r7}
 800811e:	4770      	bx	lr

08008120 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800812e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008136:	2b00      	cmp	r3, #0
 8008138:	d01c      	beq.n	8008174 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008140:	2b00      	cmp	r3, #0
 8008142:	d115      	bne.n	8008170 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2201      	movs	r2, #1
 8008148:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008162:	b29b      	uxth	r3, r3
 8008164:	2181      	movs	r1, #129	; 0x81
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 fcc5 	bl	8009af6 <USBD_LL_Transmit>

      return USBD_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	e002      	b.n	8008176 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008170:	2301      	movs	r3, #1
 8008172:	e000      	b.n	8008176 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008174:	2302      	movs	r3, #2
  }
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800818c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008194:	2b00      	cmp	r3, #0
 8008196:	d017      	beq.n	80081c8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	7c1b      	ldrb	r3, [r3, #16]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d109      	bne.n	80081b4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081aa:	2101      	movs	r1, #1
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f001 fcc5 	bl	8009b3c <USBD_LL_PrepareReceive>
 80081b2:	e007      	b.n	80081c4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081ba:	2340      	movs	r3, #64	; 0x40
 80081bc:	2101      	movs	r1, #1
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f001 fcbc 	bl	8009b3c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	e000      	b.n	80081ca <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80081c8:	2302      	movs	r3, #2
  }
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	60b9      	str	r1, [r7, #8]
 80081dc:	4613      	mov	r3, r2
 80081de:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d101      	bne.n	80081ea <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80081e6:	2302      	movs	r3, #2
 80081e8:	e01a      	b.n	8008220 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d003      	beq.n	80081fc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d003      	beq.n	800820a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	79fa      	ldrb	r2, [r7, #7]
 8008216:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008218:	68f8      	ldr	r0, [r7, #12]
 800821a:	f001 fb29 	bl	8009870 <USBD_LL_Init>

  return USBD_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d006      	beq.n	800824a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	683a      	ldr	r2, [r7, #0]
 8008240:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	73fb      	strb	r3, [r7, #15]
 8008248:	e001      	b.n	800824e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800824a:	2302      	movs	r3, #2
 800824c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800824e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3714      	adds	r7, #20
 8008254:	46bd      	mov	sp, r7
 8008256:	bc80      	pop	{r7}
 8008258:	4770      	bx	lr

0800825a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b082      	sub	sp, #8
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f001 fb5e 	bl	8009924 <USBD_LL_Start>

  return USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008272:	b480      	push	{r7}
 8008274:	b083      	sub	sp, #12
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	bc80      	pop	{r7}
 8008284:	4770      	bx	lr

08008286 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	460b      	mov	r3, r1
 8008290:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008292:	2302      	movs	r3, #2
 8008294:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00c      	beq.n	80082ba <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	78fa      	ldrb	r2, [r7, #3]
 80082aa:	4611      	mov	r1, r2
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	4798      	blx	r3
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	460b      	mov	r3, r1
 80082ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	78fa      	ldrb	r2, [r7, #3]
 80082da:	4611      	mov	r1, r2
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	4798      	blx	r3

  return USBD_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f000 fed8 	bl	80090b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008310:	461a      	mov	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800831e:	f003 031f 	and.w	r3, r3, #31
 8008322:	2b02      	cmp	r3, #2
 8008324:	d016      	beq.n	8008354 <USBD_LL_SetupStage+0x6a>
 8008326:	2b02      	cmp	r3, #2
 8008328:	d81c      	bhi.n	8008364 <USBD_LL_SetupStage+0x7a>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <USBD_LL_SetupStage+0x4a>
 800832e:	2b01      	cmp	r3, #1
 8008330:	d008      	beq.n	8008344 <USBD_LL_SetupStage+0x5a>
 8008332:	e017      	b.n	8008364 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800833a:	4619      	mov	r1, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f9cb 	bl	80086d8 <USBD_StdDevReq>
      break;
 8008342:	e01a      	b.n	800837a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800834a:	4619      	mov	r1, r3
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fa2d 	bl	80087ac <USBD_StdItfReq>
      break;
 8008352:	e012      	b.n	800837a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fa6d 	bl	800883c <USBD_StdEPReq>
      break;
 8008362:	e00a      	b.n	800837a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800836a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800836e:	b2db      	uxtb	r3, r3
 8008370:	4619      	mov	r1, r3
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f001 fb36 	bl	80099e4 <USBD_LL_StallEP>
      break;
 8008378:	bf00      	nop
  }

  return USBD_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	460b      	mov	r3, r1
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008392:	7afb      	ldrb	r3, [r7, #11]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d14b      	bne.n	8008430 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800839e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d134      	bne.n	8008414 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d919      	bls.n	80083ea <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	68da      	ldr	r2, [r3, #12]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	1ad2      	subs	r2, r2, r3
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d203      	bcs.n	80083d8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	e002      	b.n	80083de <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80083dc:	b29b      	uxth	r3, r3
 80083de:	461a      	mov	r2, r3
 80083e0:	6879      	ldr	r1, [r7, #4]
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 ff57 	bl	8009296 <USBD_CtlContinueRx>
 80083e8:	e038      	b.n	800845c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083f0:	691b      	ldr	r3, [r3, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00a      	beq.n	800840c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d105      	bne.n	800840c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 ff54 	bl	80092ba <USBD_CtlSendStatus>
 8008412:	e023      	b.n	800845c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800841a:	2b05      	cmp	r3, #5
 800841c:	d11e      	bne.n	800845c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008426:	2100      	movs	r1, #0
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f001 fadb 	bl	80099e4 <USBD_LL_StallEP>
 800842e:	e015      	b.n	800845c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00d      	beq.n	8008458 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008442:	2b03      	cmp	r3, #3
 8008444:	d108      	bne.n	8008458 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	7afa      	ldrb	r2, [r7, #11]
 8008450:	4611      	mov	r1, r2
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	4798      	blx	r3
 8008456:	e001      	b.n	800845c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008458:	2302      	movs	r3, #2
 800845a:	e000      	b.n	800845e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b086      	sub	sp, #24
 800846a:	af00      	add	r7, sp, #0
 800846c:	60f8      	str	r0, [r7, #12]
 800846e:	460b      	mov	r3, r1
 8008470:	607a      	str	r2, [r7, #4]
 8008472:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008474:	7afb      	ldrb	r3, [r7, #11]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d17f      	bne.n	800857a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	3314      	adds	r3, #20
 800847e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008486:	2b02      	cmp	r3, #2
 8008488:	d15c      	bne.n	8008544 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	68da      	ldr	r2, [r3, #12]
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	429a      	cmp	r2, r3
 8008494:	d915      	bls.n	80084c2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	68da      	ldr	r2, [r3, #12]
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	1ad2      	subs	r2, r2, r3
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	461a      	mov	r2, r3
 80084ac:	6879      	ldr	r1, [r7, #4]
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f000 fec1 	bl	8009236 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084b4:	2300      	movs	r3, #0
 80084b6:	2200      	movs	r2, #0
 80084b8:	2100      	movs	r1, #0
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f001 fb3e 	bl	8009b3c <USBD_LL_PrepareReceive>
 80084c0:	e04e      	b.n	8008560 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	6912      	ldr	r2, [r2, #16]
 80084ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80084ce:	fb01 f202 	mul.w	r2, r1, r2
 80084d2:	1a9b      	subs	r3, r3, r2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d11c      	bne.n	8008512 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d316      	bcc.n	8008512 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	689a      	ldr	r2, [r3, #8]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d20f      	bcs.n	8008512 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084f2:	2200      	movs	r2, #0
 80084f4:	2100      	movs	r1, #0
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 fe9d 	bl	8009236 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008504:	2300      	movs	r3, #0
 8008506:	2200      	movs	r2, #0
 8008508:	2100      	movs	r1, #0
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f001 fb16 	bl	8009b3c <USBD_LL_PrepareReceive>
 8008510:	e026      	b.n	8008560 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00a      	beq.n	8008534 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008524:	2b03      	cmp	r3, #3
 8008526:	d105      	bne.n	8008534 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008534:	2180      	movs	r1, #128	; 0x80
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f001 fa54 	bl	80099e4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	f000 fecf 	bl	80092e0 <USBD_CtlReceiveStatus>
 8008542:	e00d      	b.n	8008560 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800854a:	2b04      	cmp	r3, #4
 800854c:	d004      	beq.n	8008558 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008554:	2b00      	cmp	r3, #0
 8008556:	d103      	bne.n	8008560 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008558:	2180      	movs	r1, #128	; 0x80
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f001 fa42 	bl	80099e4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008566:	2b01      	cmp	r3, #1
 8008568:	d11d      	bne.n	80085a6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7ff fe81 	bl	8008272 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008578:	e015      	b.n	80085a6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00d      	beq.n	80085a2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800858c:	2b03      	cmp	r3, #3
 800858e:	d108      	bne.n	80085a2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008596:	695b      	ldr	r3, [r3, #20]
 8008598:	7afa      	ldrb	r2, [r7, #11]
 800859a:	4611      	mov	r1, r2
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	4798      	blx	r3
 80085a0:	e001      	b.n	80085a6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085a2:	2302      	movs	r3, #2
 80085a4:	e000      	b.n	80085a8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3718      	adds	r7, #24
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085b8:	2340      	movs	r3, #64	; 0x40
 80085ba:	2200      	movs	r2, #0
 80085bc:	2100      	movs	r1, #0
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f001 f9cb 	bl	800995a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2240      	movs	r2, #64	; 0x40
 80085d0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80085d4:	2340      	movs	r3, #64	; 0x40
 80085d6:	2200      	movs	r2, #0
 80085d8:	2180      	movs	r1, #128	; 0x80
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f001 f9bd 	bl	800995a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2240      	movs	r2, #64	; 0x40
 80085ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008610:	2b00      	cmp	r3, #0
 8008612:	d009      	beq.n	8008628 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	6852      	ldr	r2, [r2, #4]
 8008620:	b2d2      	uxtb	r2, r2
 8008622:	4611      	mov	r1, r2
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	4798      	blx	r3
  }

  return USBD_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008632:	b480      	push	{r7}
 8008634:	b083      	sub	sp, #12
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	460b      	mov	r3, r1
 800863c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	78fa      	ldrb	r2, [r7, #3]
 8008642:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	370c      	adds	r7, #12
 800864a:	46bd      	mov	sp, r7
 800864c:	bc80      	pop	{r7}
 800864e:	4770      	bx	lr

08008650 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2204      	movs	r2, #4
 8008668:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	bc80      	pop	{r7}
 8008676:	4770      	bx	lr

08008678 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008686:	2b04      	cmp	r3, #4
 8008688:	d105      	bne.n	8008696 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	bc80      	pop	{r7}
 80086a0:	4770      	bx	lr

080086a2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b082      	sub	sp, #8
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d10b      	bne.n	80086cc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d005      	beq.n	80086cc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086c6:	69db      	ldr	r3, [r3, #28]
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
	...

080086d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086e2:	2300      	movs	r3, #0
 80086e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086ee:	2b40      	cmp	r3, #64	; 0x40
 80086f0:	d005      	beq.n	80086fe <USBD_StdDevReq+0x26>
 80086f2:	2b40      	cmp	r3, #64	; 0x40
 80086f4:	d84f      	bhi.n	8008796 <USBD_StdDevReq+0xbe>
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d009      	beq.n	800870e <USBD_StdDevReq+0x36>
 80086fa:	2b20      	cmp	r3, #32
 80086fc:	d14b      	bne.n	8008796 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	4798      	blx	r3
      break;
 800870c:	e048      	b.n	80087a0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	785b      	ldrb	r3, [r3, #1]
 8008712:	2b09      	cmp	r3, #9
 8008714:	d839      	bhi.n	800878a <USBD_StdDevReq+0xb2>
 8008716:	a201      	add	r2, pc, #4	; (adr r2, 800871c <USBD_StdDevReq+0x44>)
 8008718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871c:	0800876d 	.word	0x0800876d
 8008720:	08008781 	.word	0x08008781
 8008724:	0800878b 	.word	0x0800878b
 8008728:	08008777 	.word	0x08008777
 800872c:	0800878b 	.word	0x0800878b
 8008730:	0800874f 	.word	0x0800874f
 8008734:	08008745 	.word	0x08008745
 8008738:	0800878b 	.word	0x0800878b
 800873c:	08008763 	.word	0x08008763
 8008740:	08008759 	.word	0x08008759
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f9dc 	bl	8008b04 <USBD_GetDescriptor>
          break;
 800874c:	e022      	b.n	8008794 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fb3f 	bl	8008dd4 <USBD_SetAddress>
          break;
 8008756:	e01d      	b.n	8008794 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008758:	6839      	ldr	r1, [r7, #0]
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fb7e 	bl	8008e5c <USBD_SetConfig>
          break;
 8008760:	e018      	b.n	8008794 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008762:	6839      	ldr	r1, [r7, #0]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fc07 	bl	8008f78 <USBD_GetConfig>
          break;
 800876a:	e013      	b.n	8008794 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 fc37 	bl	8008fe2 <USBD_GetStatus>
          break;
 8008774:	e00e      	b.n	8008794 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fc65 	bl	8009048 <USBD_SetFeature>
          break;
 800877e:	e009      	b.n	8008794 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fc74 	bl	8009070 <USBD_ClrFeature>
          break;
 8008788:	e004      	b.n	8008794 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fccc 	bl	800912a <USBD_CtlError>
          break;
 8008792:	bf00      	nop
      }
      break;
 8008794:	e004      	b.n	80087a0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f000 fcc6 	bl	800912a <USBD_CtlError>
      break;
 800879e:	bf00      	nop
  }

  return ret;
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop

080087ac <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087b6:	2300      	movs	r3, #0
 80087b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087c2:	2b40      	cmp	r3, #64	; 0x40
 80087c4:	d005      	beq.n	80087d2 <USBD_StdItfReq+0x26>
 80087c6:	2b40      	cmp	r3, #64	; 0x40
 80087c8:	d82e      	bhi.n	8008828 <USBD_StdItfReq+0x7c>
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <USBD_StdItfReq+0x26>
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d12a      	bne.n	8008828 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d8:	3b01      	subs	r3, #1
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d81d      	bhi.n	800881a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	889b      	ldrh	r3, [r3, #4]
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d813      	bhi.n	8008810 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	6839      	ldr	r1, [r7, #0]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	4798      	blx	r3
 80087f6:	4603      	mov	r3, r0
 80087f8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	88db      	ldrh	r3, [r3, #6]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d110      	bne.n	8008824 <USBD_StdItfReq+0x78>
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10d      	bne.n	8008824 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fd56 	bl	80092ba <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800880e:	e009      	b.n	8008824 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fc89 	bl	800912a <USBD_CtlError>
          break;
 8008818:	e004      	b.n	8008824 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fc84 	bl	800912a <USBD_CtlError>
          break;
 8008822:	e000      	b.n	8008826 <USBD_StdItfReq+0x7a>
          break;
 8008824:	bf00      	nop
      }
      break;
 8008826:	e004      	b.n	8008832 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fc7d 	bl	800912a <USBD_CtlError>
      break;
 8008830:	bf00      	nop
  }

  return USBD_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	889b      	ldrh	r3, [r3, #4]
 800884e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008858:	2b40      	cmp	r3, #64	; 0x40
 800885a:	d007      	beq.n	800886c <USBD_StdEPReq+0x30>
 800885c:	2b40      	cmp	r3, #64	; 0x40
 800885e:	f200 8146 	bhi.w	8008aee <USBD_StdEPReq+0x2b2>
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00a      	beq.n	800887c <USBD_StdEPReq+0x40>
 8008866:	2b20      	cmp	r3, #32
 8008868:	f040 8141 	bne.w	8008aee <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	4798      	blx	r3
      break;
 800887a:	e13d      	b.n	8008af8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008884:	2b20      	cmp	r3, #32
 8008886:	d10a      	bne.n	800889e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	4798      	blx	r3
 8008896:	4603      	mov	r3, r0
 8008898:	73fb      	strb	r3, [r7, #15]

        return ret;
 800889a:	7bfb      	ldrb	r3, [r7, #15]
 800889c:	e12d      	b.n	8008afa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	785b      	ldrb	r3, [r3, #1]
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d007      	beq.n	80088b6 <USBD_StdEPReq+0x7a>
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	f300 811b 	bgt.w	8008ae2 <USBD_StdEPReq+0x2a6>
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d072      	beq.n	8008996 <USBD_StdEPReq+0x15a>
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d03a      	beq.n	800892a <USBD_StdEPReq+0xee>
 80088b4:	e115      	b.n	8008ae2 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d002      	beq.n	80088c6 <USBD_StdEPReq+0x8a>
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d015      	beq.n	80088f0 <USBD_StdEPReq+0xb4>
 80088c4:	e02b      	b.n	800891e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088c6:	7bbb      	ldrb	r3, [r7, #14]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00c      	beq.n	80088e6 <USBD_StdEPReq+0xaa>
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
 80088ce:	2b80      	cmp	r3, #128	; 0x80
 80088d0:	d009      	beq.n	80088e6 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80088d2:	7bbb      	ldrb	r3, [r7, #14]
 80088d4:	4619      	mov	r1, r3
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f001 f884 	bl	80099e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80088dc:	2180      	movs	r1, #128	; 0x80
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f001 f880 	bl	80099e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088e4:	e020      	b.n	8008928 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80088e6:	6839      	ldr	r1, [r7, #0]
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fc1e 	bl	800912a <USBD_CtlError>
              break;
 80088ee:	e01b      	b.n	8008928 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	885b      	ldrh	r3, [r3, #2]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10e      	bne.n	8008916 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80088f8:	7bbb      	ldrb	r3, [r7, #14]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00b      	beq.n	8008916 <USBD_StdEPReq+0xda>
 80088fe:	7bbb      	ldrb	r3, [r7, #14]
 8008900:	2b80      	cmp	r3, #128	; 0x80
 8008902:	d008      	beq.n	8008916 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	88db      	ldrh	r3, [r3, #6]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d104      	bne.n	8008916 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800890c:	7bbb      	ldrb	r3, [r7, #14]
 800890e:	4619      	mov	r1, r3
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f001 f867 	bl	80099e4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fccf 	bl	80092ba <USBD_CtlSendStatus>

              break;
 800891c:	e004      	b.n	8008928 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f000 fc02 	bl	800912a <USBD_CtlError>
              break;
 8008926:	bf00      	nop
          }
          break;
 8008928:	e0e0      	b.n	8008aec <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008930:	2b02      	cmp	r3, #2
 8008932:	d002      	beq.n	800893a <USBD_StdEPReq+0xfe>
 8008934:	2b03      	cmp	r3, #3
 8008936:	d015      	beq.n	8008964 <USBD_StdEPReq+0x128>
 8008938:	e026      	b.n	8008988 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00c      	beq.n	800895a <USBD_StdEPReq+0x11e>
 8008940:	7bbb      	ldrb	r3, [r7, #14]
 8008942:	2b80      	cmp	r3, #128	; 0x80
 8008944:	d009      	beq.n	800895a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008946:	7bbb      	ldrb	r3, [r7, #14]
 8008948:	4619      	mov	r1, r3
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f001 f84a 	bl	80099e4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008950:	2180      	movs	r1, #128	; 0x80
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f001 f846 	bl	80099e4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008958:	e01c      	b.n	8008994 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f000 fbe4 	bl	800912a <USBD_CtlError>
              break;
 8008962:	e017      	b.n	8008994 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	885b      	ldrh	r3, [r3, #2]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d112      	bne.n	8008992 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008972:	2b00      	cmp	r3, #0
 8008974:	d004      	beq.n	8008980 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008976:	7bbb      	ldrb	r3, [r7, #14]
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f001 f851 	bl	8009a22 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fc9a 	bl	80092ba <USBD_CtlSendStatus>
              }
              break;
 8008986:	e004      	b.n	8008992 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fbcd 	bl	800912a <USBD_CtlError>
              break;
 8008990:	e000      	b.n	8008994 <USBD_StdEPReq+0x158>
              break;
 8008992:	bf00      	nop
          }
          break;
 8008994:	e0aa      	b.n	8008aec <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800899c:	2b02      	cmp	r3, #2
 800899e:	d002      	beq.n	80089a6 <USBD_StdEPReq+0x16a>
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d032      	beq.n	8008a0a <USBD_StdEPReq+0x1ce>
 80089a4:	e097      	b.n	8008ad6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089a6:	7bbb      	ldrb	r3, [r7, #14]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d007      	beq.n	80089bc <USBD_StdEPReq+0x180>
 80089ac:	7bbb      	ldrb	r3, [r7, #14]
 80089ae:	2b80      	cmp	r3, #128	; 0x80
 80089b0:	d004      	beq.n	80089bc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80089b2:	6839      	ldr	r1, [r7, #0]
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 fbb8 	bl	800912a <USBD_CtlError>
                break;
 80089ba:	e091      	b.n	8008ae0 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	da0b      	bge.n	80089dc <USBD_StdEPReq+0x1a0>
 80089c4:	7bbb      	ldrb	r3, [r7, #14]
 80089c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	3310      	adds	r3, #16
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	4413      	add	r3, r2
 80089d8:	3304      	adds	r3, #4
 80089da:	e00b      	b.n	80089f4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089dc:	7bbb      	ldrb	r3, [r7, #14]
 80089de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089e2:	4613      	mov	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	4413      	add	r3, r2
 80089f2:	3304      	adds	r3, #4
 80089f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	2200      	movs	r2, #0
 80089fa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2202      	movs	r2, #2
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fbfb 	bl	80091fe <USBD_CtlSendData>
              break;
 8008a08:	e06a      	b.n	8008ae0 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	da11      	bge.n	8008a36 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a12:	7bbb      	ldrb	r3, [r7, #14]
 8008a14:	f003 020f 	and.w	r2, r3, #15
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	440b      	add	r3, r1
 8008a24:	3318      	adds	r3, #24
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d117      	bne.n	8008a5c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fb7b 	bl	800912a <USBD_CtlError>
                  break;
 8008a34:	e054      	b.n	8008ae0 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a36:	7bbb      	ldrb	r3, [r7, #14]
 8008a38:	f003 020f 	and.w	r2, r3, #15
 8008a3c:	6879      	ldr	r1, [r7, #4]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4413      	add	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	440b      	add	r3, r1
 8008a48:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d104      	bne.n	8008a5c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008a52:	6839      	ldr	r1, [r7, #0]
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fb68 	bl	800912a <USBD_CtlError>
                  break;
 8008a5a:	e041      	b.n	8008ae0 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	da0b      	bge.n	8008a7c <USBD_StdEPReq+0x240>
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
 8008a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4413      	add	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	3310      	adds	r3, #16
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	4413      	add	r3, r2
 8008a78:	3304      	adds	r3, #4
 8008a7a:	e00b      	b.n	8008a94 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
 8008a7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a82:	4613      	mov	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	4413      	add	r3, r2
 8008a92:	3304      	adds	r3, #4
 8008a94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a96:	7bbb      	ldrb	r3, [r7, #14]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <USBD_StdEPReq+0x266>
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	2b80      	cmp	r3, #128	; 0x80
 8008aa0:	d103      	bne.n	8008aaa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	601a      	str	r2, [r3, #0]
 8008aa8:	e00e      	b.n	8008ac8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008aaa:	7bbb      	ldrb	r3, [r7, #14]
 8008aac:	4619      	mov	r1, r3
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 ffd6 	bl	8009a60 <USBD_LL_IsStallEP>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	2201      	movs	r2, #1
 8008abe:	601a      	str	r2, [r3, #0]
 8008ac0:	e002      	b.n	8008ac8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2202      	movs	r2, #2
 8008acc:	4619      	mov	r1, r3
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fb95 	bl	80091fe <USBD_CtlSendData>
              break;
 8008ad4:	e004      	b.n	8008ae0 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008ad6:	6839      	ldr	r1, [r7, #0]
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 fb26 	bl	800912a <USBD_CtlError>
              break;
 8008ade:	bf00      	nop
          }
          break;
 8008ae0:	e004      	b.n	8008aec <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fb20 	bl	800912a <USBD_CtlError>
          break;
 8008aea:	bf00      	nop
      }
      break;
 8008aec:	e004      	b.n	8008af8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fb1a 	bl	800912a <USBD_CtlError>
      break;
 8008af6:	bf00      	nop
  }

  return ret;
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
	...

08008b04 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b12:	2300      	movs	r3, #0
 8008b14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	885b      	ldrh	r3, [r3, #2]
 8008b1e:	0a1b      	lsrs	r3, r3, #8
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	3b01      	subs	r3, #1
 8008b24:	2b06      	cmp	r3, #6
 8008b26:	f200 8128 	bhi.w	8008d7a <USBD_GetDescriptor+0x276>
 8008b2a:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <USBD_GetDescriptor+0x2c>)
 8008b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b30:	08008b4d 	.word	0x08008b4d
 8008b34:	08008b65 	.word	0x08008b65
 8008b38:	08008ba5 	.word	0x08008ba5
 8008b3c:	08008d7b 	.word	0x08008d7b
 8008b40:	08008d7b 	.word	0x08008d7b
 8008b44:	08008d1b 	.word	0x08008d1b
 8008b48:	08008d47 	.word	0x08008d47
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	7c12      	ldrb	r2, [r2, #16]
 8008b58:	f107 0108 	add.w	r1, r7, #8
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	4798      	blx	r3
 8008b60:	60f8      	str	r0, [r7, #12]
      break;
 8008b62:	e112      	b.n	8008d8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	7c1b      	ldrb	r3, [r3, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10d      	bne.n	8008b88 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b74:	f107 0208 	add.w	r2, r7, #8
 8008b78:	4610      	mov	r0, r2
 8008b7a:	4798      	blx	r3
 8008b7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3301      	adds	r3, #1
 8008b82:	2202      	movs	r2, #2
 8008b84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b86:	e100      	b.n	8008d8a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b90:	f107 0208 	add.w	r2, r7, #8
 8008b94:	4610      	mov	r0, r2
 8008b96:	4798      	blx	r3
 8008b98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	701a      	strb	r2, [r3, #0]
      break;
 8008ba2:	e0f2      	b.n	8008d8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	885b      	ldrh	r3, [r3, #2]
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b05      	cmp	r3, #5
 8008bac:	f200 80ac 	bhi.w	8008d08 <USBD_GetDescriptor+0x204>
 8008bb0:	a201      	add	r2, pc, #4	; (adr r2, 8008bb8 <USBD_GetDescriptor+0xb4>)
 8008bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb6:	bf00      	nop
 8008bb8:	08008bd1 	.word	0x08008bd1
 8008bbc:	08008c05 	.word	0x08008c05
 8008bc0:	08008c39 	.word	0x08008c39
 8008bc4:	08008c6d 	.word	0x08008c6d
 8008bc8:	08008ca1 	.word	0x08008ca1
 8008bcc:	08008cd5 	.word	0x08008cd5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d00b      	beq.n	8008bf4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	7c12      	ldrb	r2, [r2, #16]
 8008be8:	f107 0108 	add.w	r1, r7, #8
 8008bec:	4610      	mov	r0, r2
 8008bee:	4798      	blx	r3
 8008bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bf2:	e091      	b.n	8008d18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fa97 	bl	800912a <USBD_CtlError>
            err++;
 8008bfc:	7afb      	ldrb	r3, [r7, #11]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	72fb      	strb	r3, [r7, #11]
          break;
 8008c02:	e089      	b.n	8008d18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00b      	beq.n	8008c28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	7c12      	ldrb	r2, [r2, #16]
 8008c1c:	f107 0108 	add.w	r1, r7, #8
 8008c20:	4610      	mov	r0, r2
 8008c22:	4798      	blx	r3
 8008c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c26:	e077      	b.n	8008d18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fa7d 	bl	800912a <USBD_CtlError>
            err++;
 8008c30:	7afb      	ldrb	r3, [r7, #11]
 8008c32:	3301      	adds	r3, #1
 8008c34:	72fb      	strb	r3, [r7, #11]
          break;
 8008c36:	e06f      	b.n	8008d18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00b      	beq.n	8008c5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	7c12      	ldrb	r2, [r2, #16]
 8008c50:	f107 0108 	add.w	r1, r7, #8
 8008c54:	4610      	mov	r0, r2
 8008c56:	4798      	blx	r3
 8008c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c5a:	e05d      	b.n	8008d18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f000 fa63 	bl	800912a <USBD_CtlError>
            err++;
 8008c64:	7afb      	ldrb	r3, [r7, #11]
 8008c66:	3301      	adds	r3, #1
 8008c68:	72fb      	strb	r3, [r7, #11]
          break;
 8008c6a:	e055      	b.n	8008d18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00b      	beq.n	8008c90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	7c12      	ldrb	r2, [r2, #16]
 8008c84:	f107 0108 	add.w	r1, r7, #8
 8008c88:	4610      	mov	r0, r2
 8008c8a:	4798      	blx	r3
 8008c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c8e:	e043      	b.n	8008d18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fa49 	bl	800912a <USBD_CtlError>
            err++;
 8008c98:	7afb      	ldrb	r3, [r7, #11]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c9e:	e03b      	b.n	8008d18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ca6:	695b      	ldr	r3, [r3, #20]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00b      	beq.n	8008cc4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cb2:	695b      	ldr	r3, [r3, #20]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	7c12      	ldrb	r2, [r2, #16]
 8008cb8:	f107 0108 	add.w	r1, r7, #8
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	4798      	blx	r3
 8008cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cc2:	e029      	b.n	8008d18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cc4:	6839      	ldr	r1, [r7, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fa2f 	bl	800912a <USBD_CtlError>
            err++;
 8008ccc:	7afb      	ldrb	r3, [r7, #11]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8008cd2:	e021      	b.n	8008d18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00b      	beq.n	8008cf8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ce6:	699b      	ldr	r3, [r3, #24]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	7c12      	ldrb	r2, [r2, #16]
 8008cec:	f107 0108 	add.w	r1, r7, #8
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	4798      	blx	r3
 8008cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cf6:	e00f      	b.n	8008d18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fa15 	bl	800912a <USBD_CtlError>
            err++;
 8008d00:	7afb      	ldrb	r3, [r7, #11]
 8008d02:	3301      	adds	r3, #1
 8008d04:	72fb      	strb	r3, [r7, #11]
          break;
 8008d06:	e007      	b.n	8008d18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fa0d 	bl	800912a <USBD_CtlError>
          err++;
 8008d10:	7afb      	ldrb	r3, [r7, #11]
 8008d12:	3301      	adds	r3, #1
 8008d14:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008d16:	e038      	b.n	8008d8a <USBD_GetDescriptor+0x286>
 8008d18:	e037      	b.n	8008d8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	7c1b      	ldrb	r3, [r3, #16]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d109      	bne.n	8008d36 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d2a:	f107 0208 	add.w	r2, r7, #8
 8008d2e:	4610      	mov	r0, r2
 8008d30:	4798      	blx	r3
 8008d32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d34:	e029      	b.n	8008d8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f9f6 	bl	800912a <USBD_CtlError>
        err++;
 8008d3e:	7afb      	ldrb	r3, [r7, #11]
 8008d40:	3301      	adds	r3, #1
 8008d42:	72fb      	strb	r3, [r7, #11]
      break;
 8008d44:	e021      	b.n	8008d8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	7c1b      	ldrb	r3, [r3, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10d      	bne.n	8008d6a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d56:	f107 0208 	add.w	r2, r7, #8
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	4798      	blx	r3
 8008d5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	3301      	adds	r3, #1
 8008d64:	2207      	movs	r2, #7
 8008d66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d68:	e00f      	b.n	8008d8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d6a:	6839      	ldr	r1, [r7, #0]
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f000 f9dc 	bl	800912a <USBD_CtlError>
        err++;
 8008d72:	7afb      	ldrb	r3, [r7, #11]
 8008d74:	3301      	adds	r3, #1
 8008d76:	72fb      	strb	r3, [r7, #11]
      break;
 8008d78:	e007      	b.n	8008d8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f9d4 	bl	800912a <USBD_CtlError>
      err++;
 8008d82:	7afb      	ldrb	r3, [r7, #11]
 8008d84:	3301      	adds	r3, #1
 8008d86:	72fb      	strb	r3, [r7, #11]
      break;
 8008d88:	bf00      	nop
  }

  if (err != 0U)
 8008d8a:	7afb      	ldrb	r3, [r7, #11]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d11c      	bne.n	8008dca <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008d90:	893b      	ldrh	r3, [r7, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d011      	beq.n	8008dba <USBD_GetDescriptor+0x2b6>
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	88db      	ldrh	r3, [r3, #6]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00d      	beq.n	8008dba <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	88da      	ldrh	r2, [r3, #6]
 8008da2:	893b      	ldrh	r3, [r7, #8]
 8008da4:	4293      	cmp	r3, r2
 8008da6:	bf28      	it	cs
 8008da8:	4613      	movcs	r3, r2
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008dae:	893b      	ldrh	r3, [r7, #8]
 8008db0:	461a      	mov	r2, r3
 8008db2:	68f9      	ldr	r1, [r7, #12]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fa22 	bl	80091fe <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	88db      	ldrh	r3, [r3, #6]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d104      	bne.n	8008dcc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fa79 	bl	80092ba <USBD_CtlSendStatus>
 8008dc8:	e000      	b.n	8008dcc <USBD_GetDescriptor+0x2c8>
    return;
 8008dca:	bf00      	nop
    }
  }
}
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop

08008dd4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	889b      	ldrh	r3, [r3, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d130      	bne.n	8008e48 <USBD_SetAddress+0x74>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	88db      	ldrh	r3, [r3, #6]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d12c      	bne.n	8008e48 <USBD_SetAddress+0x74>
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	885b      	ldrh	r3, [r3, #2]
 8008df2:	2b7f      	cmp	r3, #127	; 0x7f
 8008df4:	d828      	bhi.n	8008e48 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	885b      	ldrh	r3, [r3, #2]
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d104      	bne.n	8008e16 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f98b 	bl	800912a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e14:	e01d      	b.n	8008e52 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	7bfa      	ldrb	r2, [r7, #15]
 8008e1a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
 8008e20:	4619      	mov	r1, r3
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fe48 	bl	8009ab8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fa46 	bl	80092ba <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d004      	beq.n	8008e3e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2202      	movs	r2, #2
 8008e38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e3c:	e009      	b.n	8008e52 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e46:	e004      	b.n	8008e52 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f96d 	bl	800912a <USBD_CtlError>
  }
}
 8008e50:	bf00      	nop
 8008e52:	bf00      	nop
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
	...

08008e5c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b082      	sub	sp, #8
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	885b      	ldrh	r3, [r3, #2]
 8008e6a:	b2da      	uxtb	r2, r3
 8008e6c:	4b41      	ldr	r3, [pc, #260]	; (8008f74 <USBD_SetConfig+0x118>)
 8008e6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e70:	4b40      	ldr	r3, [pc, #256]	; (8008f74 <USBD_SetConfig+0x118>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d904      	bls.n	8008e82 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f955 	bl	800912a <USBD_CtlError>
 8008e80:	e075      	b.n	8008f6e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d002      	beq.n	8008e92 <USBD_SetConfig+0x36>
 8008e8c:	2b03      	cmp	r3, #3
 8008e8e:	d023      	beq.n	8008ed8 <USBD_SetConfig+0x7c>
 8008e90:	e062      	b.n	8008f58 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008e92:	4b38      	ldr	r3, [pc, #224]	; (8008f74 <USBD_SetConfig+0x118>)
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d01a      	beq.n	8008ed0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008e9a:	4b36      	ldr	r3, [pc, #216]	; (8008f74 <USBD_SetConfig+0x118>)
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2203      	movs	r2, #3
 8008ea8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008eac:	4b31      	ldr	r3, [pc, #196]	; (8008f74 <USBD_SetConfig+0x118>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7ff f9e7 	bl	8008286 <USBD_SetClassConfig>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d104      	bne.n	8008ec8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008ebe:	6839      	ldr	r1, [r7, #0]
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f932 	bl	800912a <USBD_CtlError>
            return;
 8008ec6:	e052      	b.n	8008f6e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f9f6 	bl	80092ba <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008ece:	e04e      	b.n	8008f6e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f9f2 	bl	80092ba <USBD_CtlSendStatus>
        break;
 8008ed6:	e04a      	b.n	8008f6e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008ed8:	4b26      	ldr	r3, [pc, #152]	; (8008f74 <USBD_SetConfig+0x118>)
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d112      	bne.n	8008f06 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008ee8:	4b22      	ldr	r3, [pc, #136]	; (8008f74 <USBD_SetConfig+0x118>)
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	461a      	mov	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008ef2:	4b20      	ldr	r3, [pc, #128]	; (8008f74 <USBD_SetConfig+0x118>)
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff f9e3 	bl	80082c4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 f9db 	bl	80092ba <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008f04:	e033      	b.n	8008f6e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008f06:	4b1b      	ldr	r3, [pc, #108]	; (8008f74 <USBD_SetConfig+0x118>)
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d01d      	beq.n	8008f50 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7ff f9d1 	bl	80082c4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008f22:	4b14      	ldr	r3, [pc, #80]	; (8008f74 <USBD_SetConfig+0x118>)
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008f2c:	4b11      	ldr	r3, [pc, #68]	; (8008f74 <USBD_SetConfig+0x118>)
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	4619      	mov	r1, r3
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7ff f9a7 	bl	8008286 <USBD_SetClassConfig>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d104      	bne.n	8008f48 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008f3e:	6839      	ldr	r1, [r7, #0]
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 f8f2 	bl	800912a <USBD_CtlError>
            return;
 8008f46:	e012      	b.n	8008f6e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f9b6 	bl	80092ba <USBD_CtlSendStatus>
        break;
 8008f4e:	e00e      	b.n	8008f6e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f9b2 	bl	80092ba <USBD_CtlSendStatus>
        break;
 8008f56:	e00a      	b.n	8008f6e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008f58:	6839      	ldr	r1, [r7, #0]
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f8e5 	bl	800912a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008f60:	4b04      	ldr	r3, [pc, #16]	; (8008f74 <USBD_SetConfig+0x118>)
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	4619      	mov	r1, r3
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7ff f9ac 	bl	80082c4 <USBD_ClrClassConfig>
        break;
 8008f6c:	bf00      	nop
    }
  }
}
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	200003f4 	.word	0x200003f4

08008f78 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	88db      	ldrh	r3, [r3, #6]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d004      	beq.n	8008f94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f8a:	6839      	ldr	r1, [r7, #0]
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f8cc 	bl	800912a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f92:	e022      	b.n	8008fda <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	dc02      	bgt.n	8008fa4 <USBD_GetConfig+0x2c>
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	dc03      	bgt.n	8008faa <USBD_GetConfig+0x32>
 8008fa2:	e015      	b.n	8008fd0 <USBD_GetConfig+0x58>
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	d00b      	beq.n	8008fc0 <USBD_GetConfig+0x48>
 8008fa8:	e012      	b.n	8008fd0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3308      	adds	r3, #8
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f920 	bl	80091fe <USBD_CtlSendData>
        break;
 8008fbe:	e00c      	b.n	8008fda <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f918 	bl	80091fe <USBD_CtlSendData>
        break;
 8008fce:	e004      	b.n	8008fda <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008fd0:	6839      	ldr	r1, [r7, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f8a9 	bl	800912a <USBD_CtlError>
        break;
 8008fd8:	bf00      	nop
}
 8008fda:	bf00      	nop
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b082      	sub	sp, #8
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d81e      	bhi.n	8009036 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	88db      	ldrh	r3, [r3, #6]
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d004      	beq.n	800900a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f891 	bl	800912a <USBD_CtlError>
        break;
 8009008:	e01a      	b.n	8009040 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009016:	2b00      	cmp	r3, #0
 8009018:	d005      	beq.n	8009026 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	f043 0202 	orr.w	r2, r3, #2
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	330c      	adds	r3, #12
 800902a:	2202      	movs	r2, #2
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f8e5 	bl	80091fe <USBD_CtlSendData>
      break;
 8009034:	e004      	b.n	8009040 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 f876 	bl	800912a <USBD_CtlError>
      break;
 800903e:	bf00      	nop
  }
}
 8009040:	bf00      	nop
 8009042:	3708      	adds	r7, #8
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	885b      	ldrh	r3, [r3, #2]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d106      	bne.n	8009068 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f929 	bl	80092ba <USBD_CtlSendStatus>
  }
}
 8009068:	bf00      	nop
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009080:	3b01      	subs	r3, #1
 8009082:	2b02      	cmp	r3, #2
 8009084:	d80b      	bhi.n	800909e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	885b      	ldrh	r3, [r3, #2]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d10c      	bne.n	80090a8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f90f 	bl	80092ba <USBD_CtlSendStatus>
      }
      break;
 800909c:	e004      	b.n	80090a8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f842 	bl	800912a <USBD_CtlError>
      break;
 80090a6:	e000      	b.n	80090aa <USBD_ClrFeature+0x3a>
      break;
 80090a8:	bf00      	nop
  }
}
 80090aa:	bf00      	nop
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b083      	sub	sp, #12
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	781a      	ldrb	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	785a      	ldrb	r2, [r3, #1]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	3302      	adds	r3, #2
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	3303      	adds	r3, #3
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	b29b      	uxth	r3, r3
 80090dc:	021b      	lsls	r3, r3, #8
 80090de:	b29b      	uxth	r3, r3
 80090e0:	4413      	add	r3, r2
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	3304      	adds	r3, #4
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	3305      	adds	r3, #5
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	021b      	lsls	r3, r3, #8
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	4413      	add	r3, r2
 80090fe:	b29a      	uxth	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	3306      	adds	r3, #6
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	b29a      	uxth	r2, r3
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	3307      	adds	r3, #7
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	b29b      	uxth	r3, r3
 8009114:	021b      	lsls	r3, r3, #8
 8009116:	b29b      	uxth	r3, r3
 8009118:	4413      	add	r3, r2
 800911a:	b29a      	uxth	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	80da      	strh	r2, [r3, #6]

}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	bc80      	pop	{r7}
 8009128:	4770      	bx	lr

0800912a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800912a:	b580      	push	{r7, lr}
 800912c:	b082      	sub	sp, #8
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009134:	2180      	movs	r1, #128	; 0x80
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 fc54 	bl	80099e4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800913c:	2100      	movs	r1, #0
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fc50 	bl	80099e4 <USBD_LL_StallEP>
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	60b9      	str	r1, [r7, #8]
 8009156:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009158:	2300      	movs	r3, #0
 800915a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d032      	beq.n	80091c8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f000 f834 	bl	80091d0 <USBD_GetLen>
 8009168:	4603      	mov	r3, r0
 800916a:	3301      	adds	r3, #1
 800916c:	b29b      	uxth	r3, r3
 800916e:	005b      	lsls	r3, r3, #1
 8009170:	b29a      	uxth	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	75fa      	strb	r2, [r7, #23]
 800917c:	461a      	mov	r2, r3
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	4413      	add	r3, r2
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	7812      	ldrb	r2, [r2, #0]
 8009186:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009188:	7dfb      	ldrb	r3, [r7, #23]
 800918a:	1c5a      	adds	r2, r3, #1
 800918c:	75fa      	strb	r2, [r7, #23]
 800918e:	461a      	mov	r2, r3
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	4413      	add	r3, r2
 8009194:	2203      	movs	r2, #3
 8009196:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009198:	e012      	b.n	80091c0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	1c5a      	adds	r2, r3, #1
 800919e:	60fa      	str	r2, [r7, #12]
 80091a0:	7dfa      	ldrb	r2, [r7, #23]
 80091a2:	1c51      	adds	r1, r2, #1
 80091a4:	75f9      	strb	r1, [r7, #23]
 80091a6:	4611      	mov	r1, r2
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	440a      	add	r2, r1
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	75fa      	strb	r2, [r7, #23]
 80091b6:	461a      	mov	r2, r3
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	4413      	add	r3, r2
 80091bc:	2200      	movs	r2, #0
 80091be:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e8      	bne.n	800919a <USBD_GetString+0x4e>
    }
  }
}
 80091c8:	bf00      	nop
 80091ca:	3718      	adds	r7, #24
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b085      	sub	sp, #20
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80091dc:	e005      	b.n	80091ea <USBD_GetLen+0x1a>
  {
    len++;
 80091de:	7bfb      	ldrb	r3, [r7, #15]
 80091e0:	3301      	adds	r3, #1
 80091e2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	3301      	adds	r3, #1
 80091e8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1f5      	bne.n	80091de <USBD_GetLen+0xe>
  }

  return len;
 80091f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bc80      	pop	{r7}
 80091fc:	4770      	bx	lr

080091fe <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	60f8      	str	r0, [r7, #12]
 8009206:	60b9      	str	r1, [r7, #8]
 8009208:	4613      	mov	r3, r2
 800920a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2202      	movs	r2, #2
 8009210:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009214:	88fa      	ldrh	r2, [r7, #6]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800921a:	88fa      	ldrh	r2, [r7, #6]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009220:	88fb      	ldrh	r3, [r7, #6]
 8009222:	68ba      	ldr	r2, [r7, #8]
 8009224:	2100      	movs	r1, #0
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f000 fc65 	bl	8009af6 <USBD_LL_Transmit>

  return USBD_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009236:	b580      	push	{r7, lr}
 8009238:	b084      	sub	sp, #16
 800923a:	af00      	add	r7, sp, #0
 800923c:	60f8      	str	r0, [r7, #12]
 800923e:	60b9      	str	r1, [r7, #8]
 8009240:	4613      	mov	r3, r2
 8009242:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009244:	88fb      	ldrh	r3, [r7, #6]
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	2100      	movs	r1, #0
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f000 fc53 	bl	8009af6 <USBD_LL_Transmit>

  return USBD_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b084      	sub	sp, #16
 800925e:	af00      	add	r7, sp, #0
 8009260:	60f8      	str	r0, [r7, #12]
 8009262:	60b9      	str	r1, [r7, #8]
 8009264:	4613      	mov	r3, r2
 8009266:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2203      	movs	r2, #3
 800926c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009270:	88fa      	ldrh	r2, [r7, #6]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009278:	88fa      	ldrh	r2, [r7, #6]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009280:	88fb      	ldrh	r3, [r7, #6]
 8009282:	68ba      	ldr	r2, [r7, #8]
 8009284:	2100      	movs	r1, #0
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f000 fc58 	bl	8009b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800928c:	2300      	movs	r3, #0
}
 800928e:	4618      	mov	r0, r3
 8009290:	3710      	adds	r7, #16
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b084      	sub	sp, #16
 800929a:	af00      	add	r7, sp, #0
 800929c:	60f8      	str	r0, [r7, #12]
 800929e:	60b9      	str	r1, [r7, #8]
 80092a0:	4613      	mov	r3, r2
 80092a2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092a4:	88fb      	ldrh	r3, [r7, #6]
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	2100      	movs	r1, #0
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 fc46 	bl	8009b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3710      	adds	r7, #16
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}

080092ba <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b082      	sub	sp, #8
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2204      	movs	r2, #4
 80092c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092ca:	2300      	movs	r3, #0
 80092cc:	2200      	movs	r2, #0
 80092ce:	2100      	movs	r1, #0
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fc10 	bl	8009af6 <USBD_LL_Transmit>

  return USBD_OK;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3708      	adds	r7, #8
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2205      	movs	r2, #5
 80092ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092f0:	2300      	movs	r3, #0
 80092f2:	2200      	movs	r2, #0
 80092f4:	2100      	movs	r1, #0
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fc20 	bl	8009b3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
	...

08009308 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800930c:	2200      	movs	r2, #0
 800930e:	4912      	ldr	r1, [pc, #72]	; (8009358 <MX_USB_DEVICE_Init+0x50>)
 8009310:	4812      	ldr	r0, [pc, #72]	; (800935c <MX_USB_DEVICE_Init+0x54>)
 8009312:	f7fe ff5e 	bl	80081d2 <USBD_Init>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d001      	beq.n	8009320 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800931c:	f7f8 f860 	bl	80013e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009320:	490f      	ldr	r1, [pc, #60]	; (8009360 <MX_USB_DEVICE_Init+0x58>)
 8009322:	480e      	ldr	r0, [pc, #56]	; (800935c <MX_USB_DEVICE_Init+0x54>)
 8009324:	f7fe ff80 	bl	8008228 <USBD_RegisterClass>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800932e:	f7f8 f857 	bl	80013e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009332:	490c      	ldr	r1, [pc, #48]	; (8009364 <MX_USB_DEVICE_Init+0x5c>)
 8009334:	4809      	ldr	r0, [pc, #36]	; (800935c <MX_USB_DEVICE_Init+0x54>)
 8009336:	f7fe feb1 	bl	800809c <USBD_CDC_RegisterInterface>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d001      	beq.n	8009344 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009340:	f7f8 f84e 	bl	80013e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009344:	4805      	ldr	r0, [pc, #20]	; (800935c <MX_USB_DEVICE_Init+0x54>)
 8009346:	f7fe ff88 	bl	800825a <USBD_Start>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009350:	f7f8 f846 	bl	80013e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009354:	bf00      	nop
 8009356:	bd80      	pop	{r7, pc}
 8009358:	2000012c 	.word	0x2000012c
 800935c:	200003f8 	.word	0x200003f8
 8009360:	20000018 	.word	0x20000018
 8009364:	2000011c 	.word	0x2000011c

08009368 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800936c:	2200      	movs	r2, #0
 800936e:	4905      	ldr	r1, [pc, #20]	; (8009384 <CDC_Init_FS+0x1c>)
 8009370:	4805      	ldr	r0, [pc, #20]	; (8009388 <CDC_Init_FS+0x20>)
 8009372:	f7fe fea9 	bl	80080c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009376:	4905      	ldr	r1, [pc, #20]	; (800938c <CDC_Init_FS+0x24>)
 8009378:	4803      	ldr	r0, [pc, #12]	; (8009388 <CDC_Init_FS+0x20>)
 800937a:	f7fe febe 	bl	80080fa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800937e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009380:	4618      	mov	r0, r3
 8009382:	bd80      	pop	{r7, pc}
 8009384:	20000abc 	.word	0x20000abc
 8009388:	200003f8 	.word	0x200003f8
 800938c:	200006bc 	.word	0x200006bc

08009390 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009390:	b480      	push	{r7}
 8009392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009394:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009396:	4618      	mov	r0, r3
 8009398:	46bd      	mov	sp, r7
 800939a:	bc80      	pop	{r7}
 800939c:	4770      	bx	lr
	...

080093a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	4603      	mov	r3, r0
 80093a8:	6039      	str	r1, [r7, #0]
 80093aa:	71fb      	strb	r3, [r7, #7]
 80093ac:	4613      	mov	r3, r2
 80093ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80093b0:	79fb      	ldrb	r3, [r7, #7]
 80093b2:	2b23      	cmp	r3, #35	; 0x23
 80093b4:	d84a      	bhi.n	800944c <CDC_Control_FS+0xac>
 80093b6:	a201      	add	r2, pc, #4	; (adr r2, 80093bc <CDC_Control_FS+0x1c>)
 80093b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093bc:	0800944d 	.word	0x0800944d
 80093c0:	0800944d 	.word	0x0800944d
 80093c4:	0800944d 	.word	0x0800944d
 80093c8:	0800944d 	.word	0x0800944d
 80093cc:	0800944d 	.word	0x0800944d
 80093d0:	0800944d 	.word	0x0800944d
 80093d4:	0800944d 	.word	0x0800944d
 80093d8:	0800944d 	.word	0x0800944d
 80093dc:	0800944d 	.word	0x0800944d
 80093e0:	0800944d 	.word	0x0800944d
 80093e4:	0800944d 	.word	0x0800944d
 80093e8:	0800944d 	.word	0x0800944d
 80093ec:	0800944d 	.word	0x0800944d
 80093f0:	0800944d 	.word	0x0800944d
 80093f4:	0800944d 	.word	0x0800944d
 80093f8:	0800944d 	.word	0x0800944d
 80093fc:	0800944d 	.word	0x0800944d
 8009400:	0800944d 	.word	0x0800944d
 8009404:	0800944d 	.word	0x0800944d
 8009408:	0800944d 	.word	0x0800944d
 800940c:	0800944d 	.word	0x0800944d
 8009410:	0800944d 	.word	0x0800944d
 8009414:	0800944d 	.word	0x0800944d
 8009418:	0800944d 	.word	0x0800944d
 800941c:	0800944d 	.word	0x0800944d
 8009420:	0800944d 	.word	0x0800944d
 8009424:	0800944d 	.word	0x0800944d
 8009428:	0800944d 	.word	0x0800944d
 800942c:	0800944d 	.word	0x0800944d
 8009430:	0800944d 	.word	0x0800944d
 8009434:	0800944d 	.word	0x0800944d
 8009438:	0800944d 	.word	0x0800944d
 800943c:	0800944d 	.word	0x0800944d
 8009440:	0800944d 	.word	0x0800944d
 8009444:	0800944d 	.word	0x0800944d
 8009448:	0800944d 	.word	0x0800944d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800944c:	bf00      	nop
  }

  return (USBD_OK);
 800944e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009450:	4618      	mov	r0, r3
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	bc80      	pop	{r7}
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop

0800945c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	4805      	ldr	r0, [pc, #20]	; (8009480 <CDC_Receive_FS+0x24>)
 800946a:	f7fe fe46 	bl	80080fa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800946e:	4804      	ldr	r0, [pc, #16]	; (8009480 <CDC_Receive_FS+0x24>)
 8009470:	f7fe fe85 	bl	800817e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009474:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	200003f8 	.word	0x200003f8

08009484 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009494:	4b0d      	ldr	r3, [pc, #52]	; (80094cc <CDC_Transmit_FS+0x48>)
 8009496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800949a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e00b      	b.n	80094c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80094aa:	887b      	ldrh	r3, [r7, #2]
 80094ac:	461a      	mov	r2, r3
 80094ae:	6879      	ldr	r1, [r7, #4]
 80094b0:	4806      	ldr	r0, [pc, #24]	; (80094cc <CDC_Transmit_FS+0x48>)
 80094b2:	f7fe fe09 	bl	80080c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80094b6:	4805      	ldr	r0, [pc, #20]	; (80094cc <CDC_Transmit_FS+0x48>)
 80094b8:	f7fe fe32 	bl	8008120 <USBD_CDC_TransmitPacket>
 80094bc:	4603      	mov	r3, r0
 80094be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80094c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	200003f8 	.word	0x200003f8

080094d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	4603      	mov	r3, r0
 80094d8:	6039      	str	r1, [r7, #0]
 80094da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	2212      	movs	r2, #18
 80094e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094e2:	4b03      	ldr	r3, [pc, #12]	; (80094f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bc80      	pop	{r7}
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	20000148 	.word	0x20000148

080094f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	4603      	mov	r3, r0
 80094fc:	6039      	str	r1, [r7, #0]
 80094fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	2204      	movs	r2, #4
 8009504:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009506:	4b03      	ldr	r3, [pc, #12]	; (8009514 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009508:	4618      	mov	r0, r3
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	bc80      	pop	{r7}
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	2000015c 	.word	0x2000015c

08009518 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	4603      	mov	r3, r0
 8009520:	6039      	str	r1, [r7, #0]
 8009522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009524:	79fb      	ldrb	r3, [r7, #7]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d105      	bne.n	8009536 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800952a:	683a      	ldr	r2, [r7, #0]
 800952c:	4907      	ldr	r1, [pc, #28]	; (800954c <USBD_FS_ProductStrDescriptor+0x34>)
 800952e:	4808      	ldr	r0, [pc, #32]	; (8009550 <USBD_FS_ProductStrDescriptor+0x38>)
 8009530:	f7ff fe0c 	bl	800914c <USBD_GetString>
 8009534:	e004      	b.n	8009540 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	4904      	ldr	r1, [pc, #16]	; (800954c <USBD_FS_ProductStrDescriptor+0x34>)
 800953a:	4805      	ldr	r0, [pc, #20]	; (8009550 <USBD_FS_ProductStrDescriptor+0x38>)
 800953c:	f7ff fe06 	bl	800914c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009540:	4b02      	ldr	r3, [pc, #8]	; (800954c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20000ebc 	.word	0x20000ebc
 8009550:	0800cad0 	.word	0x0800cad0

08009554 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	6039      	str	r1, [r7, #0]
 800955e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	4904      	ldr	r1, [pc, #16]	; (8009574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009564:	4804      	ldr	r0, [pc, #16]	; (8009578 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009566:	f7ff fdf1 	bl	800914c <USBD_GetString>
  return USBD_StrDesc;
 800956a:	4b02      	ldr	r3, [pc, #8]	; (8009574 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800956c:	4618      	mov	r0, r3
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	20000ebc 	.word	0x20000ebc
 8009578:	0800cadc 	.word	0x0800cadc

0800957c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	4603      	mov	r3, r0
 8009584:	6039      	str	r1, [r7, #0]
 8009586:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	221a      	movs	r2, #26
 800958c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800958e:	f000 f843 	bl	8009618 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009592:	4b02      	ldr	r3, [pc, #8]	; (800959c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009594:	4618      	mov	r0, r3
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	20000160 	.word	0x20000160

080095a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	4603      	mov	r3, r0
 80095a8:	6039      	str	r1, [r7, #0]
 80095aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80095ac:	79fb      	ldrb	r3, [r7, #7]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d105      	bne.n	80095be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095b2:	683a      	ldr	r2, [r7, #0]
 80095b4:	4907      	ldr	r1, [pc, #28]	; (80095d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095b6:	4808      	ldr	r0, [pc, #32]	; (80095d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095b8:	f7ff fdc8 	bl	800914c <USBD_GetString>
 80095bc:	e004      	b.n	80095c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80095be:	683a      	ldr	r2, [r7, #0]
 80095c0:	4904      	ldr	r1, [pc, #16]	; (80095d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80095c2:	4805      	ldr	r0, [pc, #20]	; (80095d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80095c4:	f7ff fdc2 	bl	800914c <USBD_GetString>
  }
  return USBD_StrDesc;
 80095c8:	4b02      	ldr	r3, [pc, #8]	; (80095d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20000ebc 	.word	0x20000ebc
 80095d8:	0800cae4 	.word	0x0800cae4

080095dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	6039      	str	r1, [r7, #0]
 80095e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095e8:	79fb      	ldrb	r3, [r7, #7]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d105      	bne.n	80095fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	4907      	ldr	r1, [pc, #28]	; (8009610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095f2:	4808      	ldr	r0, [pc, #32]	; (8009614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095f4:	f7ff fdaa 	bl	800914c <USBD_GetString>
 80095f8:	e004      	b.n	8009604 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	4904      	ldr	r1, [pc, #16]	; (8009610 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095fe:	4805      	ldr	r0, [pc, #20]	; (8009614 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009600:	f7ff fda4 	bl	800914c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009604:	4b02      	ldr	r3, [pc, #8]	; (8009610 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	20000ebc 	.word	0x20000ebc
 8009614:	0800caf0 	.word	0x0800caf0

08009618 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800961e:	4b0f      	ldr	r3, [pc, #60]	; (800965c <Get_SerialNum+0x44>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009624:	4b0e      	ldr	r3, [pc, #56]	; (8009660 <Get_SerialNum+0x48>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800962a:	4b0e      	ldr	r3, [pc, #56]	; (8009664 <Get_SerialNum+0x4c>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4413      	add	r3, r2
 8009636:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d009      	beq.n	8009652 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800963e:	2208      	movs	r2, #8
 8009640:	4909      	ldr	r1, [pc, #36]	; (8009668 <Get_SerialNum+0x50>)
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 f814 	bl	8009670 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009648:	2204      	movs	r2, #4
 800964a:	4908      	ldr	r1, [pc, #32]	; (800966c <Get_SerialNum+0x54>)
 800964c:	68b8      	ldr	r0, [r7, #8]
 800964e:	f000 f80f 	bl	8009670 <IntToUnicode>
  }
}
 8009652:	bf00      	nop
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	1ffff7e8 	.word	0x1ffff7e8
 8009660:	1ffff7ec 	.word	0x1ffff7ec
 8009664:	1ffff7f0 	.word	0x1ffff7f0
 8009668:	20000162 	.word	0x20000162
 800966c:	20000172 	.word	0x20000172

08009670 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009670:	b480      	push	{r7}
 8009672:	b087      	sub	sp, #28
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	4613      	mov	r3, r2
 800967c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800967e:	2300      	movs	r3, #0
 8009680:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009682:	2300      	movs	r3, #0
 8009684:	75fb      	strb	r3, [r7, #23]
 8009686:	e027      	b.n	80096d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	0f1b      	lsrs	r3, r3, #28
 800968c:	2b09      	cmp	r3, #9
 800968e:	d80b      	bhi.n	80096a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	0f1b      	lsrs	r3, r3, #28
 8009694:	b2da      	uxtb	r2, r3
 8009696:	7dfb      	ldrb	r3, [r7, #23]
 8009698:	005b      	lsls	r3, r3, #1
 800969a:	4619      	mov	r1, r3
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	440b      	add	r3, r1
 80096a0:	3230      	adds	r2, #48	; 0x30
 80096a2:	b2d2      	uxtb	r2, r2
 80096a4:	701a      	strb	r2, [r3, #0]
 80096a6:	e00a      	b.n	80096be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	0f1b      	lsrs	r3, r3, #28
 80096ac:	b2da      	uxtb	r2, r3
 80096ae:	7dfb      	ldrb	r3, [r7, #23]
 80096b0:	005b      	lsls	r3, r3, #1
 80096b2:	4619      	mov	r1, r3
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	440b      	add	r3, r1
 80096b8:	3237      	adds	r2, #55	; 0x37
 80096ba:	b2d2      	uxtb	r2, r2
 80096bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	011b      	lsls	r3, r3, #4
 80096c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
 80096c6:	005b      	lsls	r3, r3, #1
 80096c8:	3301      	adds	r3, #1
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	4413      	add	r3, r2
 80096ce:	2200      	movs	r2, #0
 80096d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80096d2:	7dfb      	ldrb	r3, [r7, #23]
 80096d4:	3301      	adds	r3, #1
 80096d6:	75fb      	strb	r3, [r7, #23]
 80096d8:	7dfa      	ldrb	r2, [r7, #23]
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d3d3      	bcc.n	8009688 <IntToUnicode+0x18>
  }
}
 80096e0:	bf00      	nop
 80096e2:	bf00      	nop
 80096e4:	371c      	adds	r7, #28
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bc80      	pop	{r7}
 80096ea:	4770      	bx	lr

080096ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a0d      	ldr	r2, [pc, #52]	; (8009730 <HAL_PCD_MspInit+0x44>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d113      	bne.n	8009726 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80096fe:	4b0d      	ldr	r3, [pc, #52]	; (8009734 <HAL_PCD_MspInit+0x48>)
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	4a0c      	ldr	r2, [pc, #48]	; (8009734 <HAL_PCD_MspInit+0x48>)
 8009704:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009708:	61d3      	str	r3, [r2, #28]
 800970a:	4b0a      	ldr	r3, [pc, #40]	; (8009734 <HAL_PCD_MspInit+0x48>)
 800970c:	69db      	ldr	r3, [r3, #28]
 800970e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009712:	60fb      	str	r3, [r7, #12]
 8009714:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009716:	2200      	movs	r2, #0
 8009718:	2100      	movs	r1, #0
 800971a:	2014      	movs	r0, #20
 800971c:	f7f8 feb7 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009720:	2014      	movs	r0, #20
 8009722:	f7f8 fed0 	bl	80024c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009726:	bf00      	nop
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	40005c00 	.word	0x40005c00
 8009734:	40021000 	.word	0x40021000

08009738 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800974c:	4619      	mov	r1, r3
 800974e:	4610      	mov	r0, r2
 8009750:	f7fe fdcb 	bl	80082ea <USBD_LL_SetupStage>
}
 8009754:	bf00      	nop
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	460b      	mov	r3, r1
 8009766:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800976e:	78fa      	ldrb	r2, [r7, #3]
 8009770:	6879      	ldr	r1, [r7, #4]
 8009772:	4613      	mov	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	00db      	lsls	r3, r3, #3
 800977a:	440b      	add	r3, r1
 800977c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	78fb      	ldrb	r3, [r7, #3]
 8009784:	4619      	mov	r1, r3
 8009786:	f7fe fdfd 	bl	8008384 <USBD_LL_DataOutStage>
}
 800978a:	bf00      	nop
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b082      	sub	sp, #8
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
 800979a:	460b      	mov	r3, r1
 800979c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80097a4:	78fa      	ldrb	r2, [r7, #3]
 80097a6:	6879      	ldr	r1, [r7, #4]
 80097a8:	4613      	mov	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	00db      	lsls	r3, r3, #3
 80097b0:	440b      	add	r3, r1
 80097b2:	333c      	adds	r3, #60	; 0x3c
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	78fb      	ldrb	r3, [r7, #3]
 80097b8:	4619      	mov	r1, r3
 80097ba:	f7fe fe54 	bl	8008466 <USBD_LL_DataInStage>
}
 80097be:	bf00      	nop
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b082      	sub	sp, #8
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fe ff64 	bl	80086a2 <USBD_LL_SOF>
}
 80097da:	bf00      	nop
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b084      	sub	sp, #16
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097ea:	2301      	movs	r3, #1
 80097ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d001      	beq.n	80097fa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80097f6:	f7f7 fdf3 	bl	80013e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009800:	7bfa      	ldrb	r2, [r7, #15]
 8009802:	4611      	mov	r1, r2
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe ff14 	bl	8008632 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009810:	4618      	mov	r0, r3
 8009812:	f7fe fecd 	bl	80085b0 <USBD_LL_Reset>
}
 8009816:	bf00      	nop
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
	...

08009820 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800982e:	4618      	mov	r0, r3
 8009830:	f7fe ff0e 	bl	8008650 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d005      	beq.n	8009848 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800983c:	4b04      	ldr	r3, [pc, #16]	; (8009850 <HAL_PCD_SuspendCallback+0x30>)
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	4a03      	ldr	r2, [pc, #12]	; (8009850 <HAL_PCD_SuspendCallback+0x30>)
 8009842:	f043 0306 	orr.w	r3, r3, #6
 8009846:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009848:	bf00      	nop
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	e000ed00 	.word	0xe000ed00

08009854 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009862:	4618      	mov	r0, r3
 8009864:	f7fe ff08 	bl	8008678 <USBD_LL_Resume>
}
 8009868:	bf00      	nop
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009878:	4a28      	ldr	r2, [pc, #160]	; (800991c <USBD_LL_Init+0xac>)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a26      	ldr	r2, [pc, #152]	; (800991c <USBD_LL_Init+0xac>)
 8009884:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009888:	4b24      	ldr	r3, [pc, #144]	; (800991c <USBD_LL_Init+0xac>)
 800988a:	4a25      	ldr	r2, [pc, #148]	; (8009920 <USBD_LL_Init+0xb0>)
 800988c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800988e:	4b23      	ldr	r3, [pc, #140]	; (800991c <USBD_LL_Init+0xac>)
 8009890:	2208      	movs	r2, #8
 8009892:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009894:	4b21      	ldr	r3, [pc, #132]	; (800991c <USBD_LL_Init+0xac>)
 8009896:	2202      	movs	r2, #2
 8009898:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800989a:	4b20      	ldr	r3, [pc, #128]	; (800991c <USBD_LL_Init+0xac>)
 800989c:	2200      	movs	r2, #0
 800989e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80098a0:	4b1e      	ldr	r3, [pc, #120]	; (800991c <USBD_LL_Init+0xac>)
 80098a2:	2200      	movs	r2, #0
 80098a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80098a6:	4b1d      	ldr	r3, [pc, #116]	; (800991c <USBD_LL_Init+0xac>)
 80098a8:	2200      	movs	r2, #0
 80098aa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80098ac:	481b      	ldr	r0, [pc, #108]	; (800991c <USBD_LL_Init+0xac>)
 80098ae:	f7f9 f9af 	bl	8002c10 <HAL_PCD_Init>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80098b8:	f7f7 fd92 	bl	80013e0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098c2:	2318      	movs	r3, #24
 80098c4:	2200      	movs	r2, #0
 80098c6:	2100      	movs	r1, #0
 80098c8:	f7fa fe23 	bl	8004512 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098d2:	2358      	movs	r3, #88	; 0x58
 80098d4:	2200      	movs	r2, #0
 80098d6:	2180      	movs	r1, #128	; 0x80
 80098d8:	f7fa fe1b 	bl	8004512 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098e2:	23c0      	movs	r3, #192	; 0xc0
 80098e4:	2200      	movs	r2, #0
 80098e6:	2181      	movs	r1, #129	; 0x81
 80098e8:	f7fa fe13 	bl	8004512 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80098f2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80098f6:	2200      	movs	r2, #0
 80098f8:	2101      	movs	r1, #1
 80098fa:	f7fa fe0a 	bl	8004512 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009908:	2200      	movs	r2, #0
 800990a:	2182      	movs	r1, #130	; 0x82
 800990c:	f7fa fe01 	bl	8004512 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009910:	2300      	movs	r3, #0
}
 8009912:	4618      	mov	r0, r3
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	200010bc 	.word	0x200010bc
 8009920:	40005c00 	.word	0x40005c00

08009924 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800993a:	4618      	mov	r0, r3
 800993c:	f7f9 fa73 	bl	8002e26 <HAL_PCD_Start>
 8009940:	4603      	mov	r3, r0
 8009942:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009944:	7bfb      	ldrb	r3, [r7, #15]
 8009946:	4618      	mov	r0, r3
 8009948:	f000 f94e 	bl	8009be8 <USBD_Get_USB_Status>
 800994c:	4603      	mov	r3, r0
 800994e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009950:	7bbb      	ldrb	r3, [r7, #14]
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
 8009962:	4608      	mov	r0, r1
 8009964:	4611      	mov	r1, r2
 8009966:	461a      	mov	r2, r3
 8009968:	4603      	mov	r3, r0
 800996a:	70fb      	strb	r3, [r7, #3]
 800996c:	460b      	mov	r3, r1
 800996e:	70bb      	strb	r3, [r7, #2]
 8009970:	4613      	mov	r3, r2
 8009972:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009982:	78bb      	ldrb	r3, [r7, #2]
 8009984:	883a      	ldrh	r2, [r7, #0]
 8009986:	78f9      	ldrb	r1, [r7, #3]
 8009988:	f7f9 fbeb 	bl	8003162 <HAL_PCD_EP_Open>
 800998c:	4603      	mov	r3, r0
 800998e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009990:	7bfb      	ldrb	r3, [r7, #15]
 8009992:	4618      	mov	r0, r3
 8009994:	f000 f928 	bl	8009be8 <USBD_Get_USB_Status>
 8009998:	4603      	mov	r3, r0
 800999a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800999c:	7bbb      	ldrb	r3, [r7, #14]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b084      	sub	sp, #16
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	6078      	str	r0, [r7, #4]
 80099ae:	460b      	mov	r3, r1
 80099b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099b2:	2300      	movs	r3, #0
 80099b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099b6:	2300      	movs	r3, #0
 80099b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099c0:	78fa      	ldrb	r2, [r7, #3]
 80099c2:	4611      	mov	r1, r2
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7f9 fc32 	bl	800322e <HAL_PCD_EP_Close>
 80099ca:	4603      	mov	r3, r0
 80099cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ce:	7bfb      	ldrb	r3, [r7, #15]
 80099d0:	4618      	mov	r0, r3
 80099d2:	f000 f909 	bl	8009be8 <USBD_Get_USB_Status>
 80099d6:	4603      	mov	r3, r0
 80099d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099da:	7bbb      	ldrb	r3, [r7, #14]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099f4:	2300      	movs	r3, #0
 80099f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099fe:	78fa      	ldrb	r2, [r7, #3]
 8009a00:	4611      	mov	r1, r2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7f9 fcf2 	bl	80033ec <HAL_PCD_EP_SetStall>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 f8ea 	bl	8009be8 <USBD_Get_USB_Status>
 8009a14:	4603      	mov	r3, r0
 8009a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b084      	sub	sp, #16
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a3c:	78fa      	ldrb	r2, [r7, #3]
 8009a3e:	4611      	mov	r1, r2
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7f9 fd33 	bl	80034ac <HAL_PCD_EP_ClrStall>
 8009a46:	4603      	mov	r3, r0
 8009a48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 f8cb 	bl	8009be8 <USBD_Get_USB_Status>
 8009a52:	4603      	mov	r3, r0
 8009a54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	da0c      	bge.n	8009a96 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009a7c:	78fb      	ldrb	r3, [r7, #3]
 8009a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a82:	68f9      	ldr	r1, [r7, #12]
 8009a84:	1c5a      	adds	r2, r3, #1
 8009a86:	4613      	mov	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4413      	add	r3, r2
 8009a8c:	00db      	lsls	r3, r3, #3
 8009a8e:	440b      	add	r3, r1
 8009a90:	3302      	adds	r3, #2
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	e00b      	b.n	8009aae <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009a96:	78fb      	ldrb	r3, [r7, #3]
 8009a98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a9c:	68f9      	ldr	r1, [r7, #12]
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	00db      	lsls	r3, r3, #3
 8009aa6:	440b      	add	r3, r1
 8009aa8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009aac:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bc80      	pop	{r7}
 8009ab6:	4770      	bx	lr

08009ab8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ad2:	78fa      	ldrb	r2, [r7, #3]
 8009ad4:	4611      	mov	r1, r2
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7f9 fb1e 	bl	8003118 <HAL_PCD_SetAddress>
 8009adc:	4603      	mov	r3, r0
 8009ade:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 f880 	bl	8009be8 <USBD_Get_USB_Status>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aec:	7bbb      	ldrb	r3, [r7, #14]
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b086      	sub	sp, #24
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	60f8      	str	r0, [r7, #12]
 8009afe:	607a      	str	r2, [r7, #4]
 8009b00:	461a      	mov	r2, r3
 8009b02:	460b      	mov	r3, r1
 8009b04:	72fb      	strb	r3, [r7, #11]
 8009b06:	4613      	mov	r3, r2
 8009b08:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b18:	893b      	ldrh	r3, [r7, #8]
 8009b1a:	7af9      	ldrb	r1, [r7, #11]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	f7f9 fc22 	bl	8003366 <HAL_PCD_EP_Transmit>
 8009b22:	4603      	mov	r3, r0
 8009b24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b26:	7dfb      	ldrb	r3, [r7, #23]
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f000 f85d 	bl	8009be8 <USBD_Get_USB_Status>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b32:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	607a      	str	r2, [r7, #4]
 8009b46:	461a      	mov	r2, r3
 8009b48:	460b      	mov	r3, r1
 8009b4a:	72fb      	strb	r3, [r7, #11]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009b5e:	893b      	ldrh	r3, [r7, #8]
 8009b60:	7af9      	ldrb	r1, [r7, #11]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	f7f9 fbab 	bl	80032be <HAL_PCD_EP_Receive>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b6c:	7dfb      	ldrb	r3, [r7, #23]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f000 f83a 	bl	8009be8 <USBD_Get_USB_Status>
 8009b74:	4603      	mov	r3, r0
 8009b76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b78:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b082      	sub	sp, #8
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b94:	78fa      	ldrb	r2, [r7, #3]
 8009b96:	4611      	mov	r1, r2
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7f9 fbcd 	bl	8003338 <HAL_PCD_EP_GetRxCount>
 8009b9e:	4603      	mov	r3, r0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009bb0:	4b02      	ldr	r3, [pc, #8]	; (8009bbc <USBD_static_malloc+0x14>)
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bc80      	pop	{r7}
 8009bba:	4770      	bx	lr
 8009bbc:	200013a8 	.word	0x200013a8

08009bc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]

}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bc80      	pop	{r7}
 8009bd0:	4770      	bx	lr

08009bd2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b083      	sub	sp, #12
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	460b      	mov	r3, r1
 8009bdc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009bde:	bf00      	nop
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bc80      	pop	{r7}
 8009be6:	4770      	bx	lr

08009be8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	4603      	mov	r3, r0
 8009bf0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009bf6:	79fb      	ldrb	r3, [r7, #7]
 8009bf8:	2b03      	cmp	r3, #3
 8009bfa:	d817      	bhi.n	8009c2c <USBD_Get_USB_Status+0x44>
 8009bfc:	a201      	add	r2, pc, #4	; (adr r2, 8009c04 <USBD_Get_USB_Status+0x1c>)
 8009bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c02:	bf00      	nop
 8009c04:	08009c15 	.word	0x08009c15
 8009c08:	08009c1b 	.word	0x08009c1b
 8009c0c:	08009c21 	.word	0x08009c21
 8009c10:	08009c27 	.word	0x08009c27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	73fb      	strb	r3, [r7, #15]
    break;
 8009c18:	e00b      	b.n	8009c32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c1a:	2302      	movs	r3, #2
 8009c1c:	73fb      	strb	r3, [r7, #15]
    break;
 8009c1e:	e008      	b.n	8009c32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c20:	2301      	movs	r3, #1
 8009c22:	73fb      	strb	r3, [r7, #15]
    break;
 8009c24:	e005      	b.n	8009c32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c26:	2302      	movs	r3, #2
 8009c28:	73fb      	strb	r3, [r7, #15]
    break;
 8009c2a:	e002      	b.n	8009c32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c2c:	2302      	movs	r3, #2
 8009c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c30:	bf00      	nop
  }
  return usb_status;
 8009c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3714      	adds	r7, #20
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bc80      	pop	{r7}
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop

08009c40 <__errno>:
 8009c40:	4b01      	ldr	r3, [pc, #4]	; (8009c48 <__errno+0x8>)
 8009c42:	6818      	ldr	r0, [r3, #0]
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop
 8009c48:	2000017c 	.word	0x2000017c

08009c4c <__libc_init_array>:
 8009c4c:	b570      	push	{r4, r5, r6, lr}
 8009c4e:	2600      	movs	r6, #0
 8009c50:	4d0c      	ldr	r5, [pc, #48]	; (8009c84 <__libc_init_array+0x38>)
 8009c52:	4c0d      	ldr	r4, [pc, #52]	; (8009c88 <__libc_init_array+0x3c>)
 8009c54:	1b64      	subs	r4, r4, r5
 8009c56:	10a4      	asrs	r4, r4, #2
 8009c58:	42a6      	cmp	r6, r4
 8009c5a:	d109      	bne.n	8009c70 <__libc_init_array+0x24>
 8009c5c:	f002 ff10 	bl	800ca80 <_init>
 8009c60:	2600      	movs	r6, #0
 8009c62:	4d0a      	ldr	r5, [pc, #40]	; (8009c8c <__libc_init_array+0x40>)
 8009c64:	4c0a      	ldr	r4, [pc, #40]	; (8009c90 <__libc_init_array+0x44>)
 8009c66:	1b64      	subs	r4, r4, r5
 8009c68:	10a4      	asrs	r4, r4, #2
 8009c6a:	42a6      	cmp	r6, r4
 8009c6c:	d105      	bne.n	8009c7a <__libc_init_array+0x2e>
 8009c6e:	bd70      	pop	{r4, r5, r6, pc}
 8009c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c74:	4798      	blx	r3
 8009c76:	3601      	adds	r6, #1
 8009c78:	e7ee      	b.n	8009c58 <__libc_init_array+0xc>
 8009c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c7e:	4798      	blx	r3
 8009c80:	3601      	adds	r6, #1
 8009c82:	e7f2      	b.n	8009c6a <__libc_init_array+0x1e>
 8009c84:	0800cef4 	.word	0x0800cef4
 8009c88:	0800cef4 	.word	0x0800cef4
 8009c8c:	0800cef4 	.word	0x0800cef4
 8009c90:	0800cef8 	.word	0x0800cef8

08009c94 <memset>:
 8009c94:	4603      	mov	r3, r0
 8009c96:	4402      	add	r2, r0
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d100      	bne.n	8009c9e <memset+0xa>
 8009c9c:	4770      	bx	lr
 8009c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8009ca2:	e7f9      	b.n	8009c98 <memset+0x4>

08009ca4 <__cvt>:
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009caa:	461f      	mov	r7, r3
 8009cac:	bfbb      	ittet	lt
 8009cae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009cb2:	461f      	movlt	r7, r3
 8009cb4:	2300      	movge	r3, #0
 8009cb6:	232d      	movlt	r3, #45	; 0x2d
 8009cb8:	b088      	sub	sp, #32
 8009cba:	4614      	mov	r4, r2
 8009cbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cbe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009cc0:	7013      	strb	r3, [r2, #0]
 8009cc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cc4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009cc8:	f023 0820 	bic.w	r8, r3, #32
 8009ccc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009cd0:	d005      	beq.n	8009cde <__cvt+0x3a>
 8009cd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009cd6:	d100      	bne.n	8009cda <__cvt+0x36>
 8009cd8:	3501      	adds	r5, #1
 8009cda:	2302      	movs	r3, #2
 8009cdc:	e000      	b.n	8009ce0 <__cvt+0x3c>
 8009cde:	2303      	movs	r3, #3
 8009ce0:	aa07      	add	r2, sp, #28
 8009ce2:	9204      	str	r2, [sp, #16]
 8009ce4:	aa06      	add	r2, sp, #24
 8009ce6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009cea:	e9cd 3500 	strd	r3, r5, [sp]
 8009cee:	4622      	mov	r2, r4
 8009cf0:	463b      	mov	r3, r7
 8009cf2:	f000 fcf9 	bl	800a6e8 <_dtoa_r>
 8009cf6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009cfa:	4606      	mov	r6, r0
 8009cfc:	d102      	bne.n	8009d04 <__cvt+0x60>
 8009cfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d00:	07db      	lsls	r3, r3, #31
 8009d02:	d522      	bpl.n	8009d4a <__cvt+0xa6>
 8009d04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d08:	eb06 0905 	add.w	r9, r6, r5
 8009d0c:	d110      	bne.n	8009d30 <__cvt+0x8c>
 8009d0e:	7833      	ldrb	r3, [r6, #0]
 8009d10:	2b30      	cmp	r3, #48	; 0x30
 8009d12:	d10a      	bne.n	8009d2a <__cvt+0x86>
 8009d14:	2200      	movs	r2, #0
 8009d16:	2300      	movs	r3, #0
 8009d18:	4620      	mov	r0, r4
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	f7f6 fe44 	bl	80009a8 <__aeabi_dcmpeq>
 8009d20:	b918      	cbnz	r0, 8009d2a <__cvt+0x86>
 8009d22:	f1c5 0501 	rsb	r5, r5, #1
 8009d26:	f8ca 5000 	str.w	r5, [sl]
 8009d2a:	f8da 3000 	ldr.w	r3, [sl]
 8009d2e:	4499      	add	r9, r3
 8009d30:	2200      	movs	r2, #0
 8009d32:	2300      	movs	r3, #0
 8009d34:	4620      	mov	r0, r4
 8009d36:	4639      	mov	r1, r7
 8009d38:	f7f6 fe36 	bl	80009a8 <__aeabi_dcmpeq>
 8009d3c:	b108      	cbz	r0, 8009d42 <__cvt+0x9e>
 8009d3e:	f8cd 901c 	str.w	r9, [sp, #28]
 8009d42:	2230      	movs	r2, #48	; 0x30
 8009d44:	9b07      	ldr	r3, [sp, #28]
 8009d46:	454b      	cmp	r3, r9
 8009d48:	d307      	bcc.n	8009d5a <__cvt+0xb6>
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	9b07      	ldr	r3, [sp, #28]
 8009d4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d50:	1b9b      	subs	r3, r3, r6
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	b008      	add	sp, #32
 8009d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d5a:	1c59      	adds	r1, r3, #1
 8009d5c:	9107      	str	r1, [sp, #28]
 8009d5e:	701a      	strb	r2, [r3, #0]
 8009d60:	e7f0      	b.n	8009d44 <__cvt+0xa0>

08009d62 <__exponent>:
 8009d62:	4603      	mov	r3, r0
 8009d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d66:	2900      	cmp	r1, #0
 8009d68:	f803 2b02 	strb.w	r2, [r3], #2
 8009d6c:	bfb6      	itet	lt
 8009d6e:	222d      	movlt	r2, #45	; 0x2d
 8009d70:	222b      	movge	r2, #43	; 0x2b
 8009d72:	4249      	neglt	r1, r1
 8009d74:	2909      	cmp	r1, #9
 8009d76:	7042      	strb	r2, [r0, #1]
 8009d78:	dd2b      	ble.n	8009dd2 <__exponent+0x70>
 8009d7a:	f10d 0407 	add.w	r4, sp, #7
 8009d7e:	46a4      	mov	ip, r4
 8009d80:	270a      	movs	r7, #10
 8009d82:	fb91 f6f7 	sdiv	r6, r1, r7
 8009d86:	460a      	mov	r2, r1
 8009d88:	46a6      	mov	lr, r4
 8009d8a:	fb07 1516 	mls	r5, r7, r6, r1
 8009d8e:	2a63      	cmp	r2, #99	; 0x63
 8009d90:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009d94:	4631      	mov	r1, r6
 8009d96:	f104 34ff 	add.w	r4, r4, #4294967295
 8009d9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009d9e:	dcf0      	bgt.n	8009d82 <__exponent+0x20>
 8009da0:	3130      	adds	r1, #48	; 0x30
 8009da2:	f1ae 0502 	sub.w	r5, lr, #2
 8009da6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009daa:	4629      	mov	r1, r5
 8009dac:	1c44      	adds	r4, r0, #1
 8009dae:	4561      	cmp	r1, ip
 8009db0:	d30a      	bcc.n	8009dc8 <__exponent+0x66>
 8009db2:	f10d 0209 	add.w	r2, sp, #9
 8009db6:	eba2 020e 	sub.w	r2, r2, lr
 8009dba:	4565      	cmp	r5, ip
 8009dbc:	bf88      	it	hi
 8009dbe:	2200      	movhi	r2, #0
 8009dc0:	4413      	add	r3, r2
 8009dc2:	1a18      	subs	r0, r3, r0
 8009dc4:	b003      	add	sp, #12
 8009dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dcc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009dd0:	e7ed      	b.n	8009dae <__exponent+0x4c>
 8009dd2:	2330      	movs	r3, #48	; 0x30
 8009dd4:	3130      	adds	r1, #48	; 0x30
 8009dd6:	7083      	strb	r3, [r0, #2]
 8009dd8:	70c1      	strb	r1, [r0, #3]
 8009dda:	1d03      	adds	r3, r0, #4
 8009ddc:	e7f1      	b.n	8009dc2 <__exponent+0x60>
	...

08009de0 <_printf_float>:
 8009de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de4:	b091      	sub	sp, #68	; 0x44
 8009de6:	460c      	mov	r4, r1
 8009de8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009dec:	4616      	mov	r6, r2
 8009dee:	461f      	mov	r7, r3
 8009df0:	4605      	mov	r5, r0
 8009df2:	f001 fa67 	bl	800b2c4 <_localeconv_r>
 8009df6:	6803      	ldr	r3, [r0, #0]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8009dfc:	f7f6 f9a8 	bl	8000150 <strlen>
 8009e00:	2300      	movs	r3, #0
 8009e02:	930e      	str	r3, [sp, #56]	; 0x38
 8009e04:	f8d8 3000 	ldr.w	r3, [r8]
 8009e08:	900a      	str	r0, [sp, #40]	; 0x28
 8009e0a:	3307      	adds	r3, #7
 8009e0c:	f023 0307 	bic.w	r3, r3, #7
 8009e10:	f103 0208 	add.w	r2, r3, #8
 8009e14:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009e18:	f8d4 b000 	ldr.w	fp, [r4]
 8009e1c:	f8c8 2000 	str.w	r2, [r8]
 8009e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e24:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e28:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009e2c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009e30:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e32:	f04f 32ff 	mov.w	r2, #4294967295
 8009e36:	4640      	mov	r0, r8
 8009e38:	4b9c      	ldr	r3, [pc, #624]	; (800a0ac <_printf_float+0x2cc>)
 8009e3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e3c:	f7f6 fde6 	bl	8000a0c <__aeabi_dcmpun>
 8009e40:	bb70      	cbnz	r0, 8009ea0 <_printf_float+0xc0>
 8009e42:	f04f 32ff 	mov.w	r2, #4294967295
 8009e46:	4640      	mov	r0, r8
 8009e48:	4b98      	ldr	r3, [pc, #608]	; (800a0ac <_printf_float+0x2cc>)
 8009e4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e4c:	f7f6 fdc0 	bl	80009d0 <__aeabi_dcmple>
 8009e50:	bb30      	cbnz	r0, 8009ea0 <_printf_float+0xc0>
 8009e52:	2200      	movs	r2, #0
 8009e54:	2300      	movs	r3, #0
 8009e56:	4640      	mov	r0, r8
 8009e58:	4651      	mov	r1, sl
 8009e5a:	f7f6 fdaf 	bl	80009bc <__aeabi_dcmplt>
 8009e5e:	b110      	cbz	r0, 8009e66 <_printf_float+0x86>
 8009e60:	232d      	movs	r3, #45	; 0x2d
 8009e62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e66:	4b92      	ldr	r3, [pc, #584]	; (800a0b0 <_printf_float+0x2d0>)
 8009e68:	4892      	ldr	r0, [pc, #584]	; (800a0b4 <_printf_float+0x2d4>)
 8009e6a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009e6e:	bf94      	ite	ls
 8009e70:	4698      	movls	r8, r3
 8009e72:	4680      	movhi	r8, r0
 8009e74:	2303      	movs	r3, #3
 8009e76:	f04f 0a00 	mov.w	sl, #0
 8009e7a:	6123      	str	r3, [r4, #16]
 8009e7c:	f02b 0304 	bic.w	r3, fp, #4
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	4633      	mov	r3, r6
 8009e84:	4621      	mov	r1, r4
 8009e86:	4628      	mov	r0, r5
 8009e88:	9700      	str	r7, [sp, #0]
 8009e8a:	aa0f      	add	r2, sp, #60	; 0x3c
 8009e8c:	f000 f9d4 	bl	800a238 <_printf_common>
 8009e90:	3001      	adds	r0, #1
 8009e92:	f040 8090 	bne.w	8009fb6 <_printf_float+0x1d6>
 8009e96:	f04f 30ff 	mov.w	r0, #4294967295
 8009e9a:	b011      	add	sp, #68	; 0x44
 8009e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea0:	4642      	mov	r2, r8
 8009ea2:	4653      	mov	r3, sl
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	4651      	mov	r1, sl
 8009ea8:	f7f6 fdb0 	bl	8000a0c <__aeabi_dcmpun>
 8009eac:	b148      	cbz	r0, 8009ec2 <_printf_float+0xe2>
 8009eae:	f1ba 0f00 	cmp.w	sl, #0
 8009eb2:	bfb8      	it	lt
 8009eb4:	232d      	movlt	r3, #45	; 0x2d
 8009eb6:	4880      	ldr	r0, [pc, #512]	; (800a0b8 <_printf_float+0x2d8>)
 8009eb8:	bfb8      	it	lt
 8009eba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009ebe:	4b7f      	ldr	r3, [pc, #508]	; (800a0bc <_printf_float+0x2dc>)
 8009ec0:	e7d3      	b.n	8009e6a <_printf_float+0x8a>
 8009ec2:	6863      	ldr	r3, [r4, #4]
 8009ec4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009ec8:	1c5a      	adds	r2, r3, #1
 8009eca:	d142      	bne.n	8009f52 <_printf_float+0x172>
 8009ecc:	2306      	movs	r3, #6
 8009ece:	6063      	str	r3, [r4, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	9206      	str	r2, [sp, #24]
 8009ed4:	aa0e      	add	r2, sp, #56	; 0x38
 8009ed6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009eda:	aa0d      	add	r2, sp, #52	; 0x34
 8009edc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009ee0:	9203      	str	r2, [sp, #12]
 8009ee2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009ee6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009eea:	6023      	str	r3, [r4, #0]
 8009eec:	6863      	ldr	r3, [r4, #4]
 8009eee:	4642      	mov	r2, r8
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	4653      	mov	r3, sl
 8009ef6:	910b      	str	r1, [sp, #44]	; 0x2c
 8009ef8:	f7ff fed4 	bl	8009ca4 <__cvt>
 8009efc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009efe:	4680      	mov	r8, r0
 8009f00:	2947      	cmp	r1, #71	; 0x47
 8009f02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009f04:	d108      	bne.n	8009f18 <_printf_float+0x138>
 8009f06:	1cc8      	adds	r0, r1, #3
 8009f08:	db02      	blt.n	8009f10 <_printf_float+0x130>
 8009f0a:	6863      	ldr	r3, [r4, #4]
 8009f0c:	4299      	cmp	r1, r3
 8009f0e:	dd40      	ble.n	8009f92 <_printf_float+0x1b2>
 8009f10:	f1a9 0902 	sub.w	r9, r9, #2
 8009f14:	fa5f f989 	uxtb.w	r9, r9
 8009f18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009f1c:	d81f      	bhi.n	8009f5e <_printf_float+0x17e>
 8009f1e:	464a      	mov	r2, r9
 8009f20:	3901      	subs	r1, #1
 8009f22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f26:	910d      	str	r1, [sp, #52]	; 0x34
 8009f28:	f7ff ff1b 	bl	8009d62 <__exponent>
 8009f2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f2e:	4682      	mov	sl, r0
 8009f30:	1813      	adds	r3, r2, r0
 8009f32:	2a01      	cmp	r2, #1
 8009f34:	6123      	str	r3, [r4, #16]
 8009f36:	dc02      	bgt.n	8009f3e <_printf_float+0x15e>
 8009f38:	6822      	ldr	r2, [r4, #0]
 8009f3a:	07d2      	lsls	r2, r2, #31
 8009f3c:	d501      	bpl.n	8009f42 <_printf_float+0x162>
 8009f3e:	3301      	adds	r3, #1
 8009f40:	6123      	str	r3, [r4, #16]
 8009f42:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d09b      	beq.n	8009e82 <_printf_float+0xa2>
 8009f4a:	232d      	movs	r3, #45	; 0x2d
 8009f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f50:	e797      	b.n	8009e82 <_printf_float+0xa2>
 8009f52:	2947      	cmp	r1, #71	; 0x47
 8009f54:	d1bc      	bne.n	8009ed0 <_printf_float+0xf0>
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1ba      	bne.n	8009ed0 <_printf_float+0xf0>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e7b7      	b.n	8009ece <_printf_float+0xee>
 8009f5e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009f62:	d118      	bne.n	8009f96 <_printf_float+0x1b6>
 8009f64:	2900      	cmp	r1, #0
 8009f66:	6863      	ldr	r3, [r4, #4]
 8009f68:	dd0b      	ble.n	8009f82 <_printf_float+0x1a2>
 8009f6a:	6121      	str	r1, [r4, #16]
 8009f6c:	b913      	cbnz	r3, 8009f74 <_printf_float+0x194>
 8009f6e:	6822      	ldr	r2, [r4, #0]
 8009f70:	07d0      	lsls	r0, r2, #31
 8009f72:	d502      	bpl.n	8009f7a <_printf_float+0x19a>
 8009f74:	3301      	adds	r3, #1
 8009f76:	440b      	add	r3, r1
 8009f78:	6123      	str	r3, [r4, #16]
 8009f7a:	f04f 0a00 	mov.w	sl, #0
 8009f7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009f80:	e7df      	b.n	8009f42 <_printf_float+0x162>
 8009f82:	b913      	cbnz	r3, 8009f8a <_printf_float+0x1aa>
 8009f84:	6822      	ldr	r2, [r4, #0]
 8009f86:	07d2      	lsls	r2, r2, #31
 8009f88:	d501      	bpl.n	8009f8e <_printf_float+0x1ae>
 8009f8a:	3302      	adds	r3, #2
 8009f8c:	e7f4      	b.n	8009f78 <_printf_float+0x198>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e7f2      	b.n	8009f78 <_printf_float+0x198>
 8009f92:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f98:	4299      	cmp	r1, r3
 8009f9a:	db05      	blt.n	8009fa8 <_printf_float+0x1c8>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	6121      	str	r1, [r4, #16]
 8009fa0:	07d8      	lsls	r0, r3, #31
 8009fa2:	d5ea      	bpl.n	8009f7a <_printf_float+0x19a>
 8009fa4:	1c4b      	adds	r3, r1, #1
 8009fa6:	e7e7      	b.n	8009f78 <_printf_float+0x198>
 8009fa8:	2900      	cmp	r1, #0
 8009faa:	bfcc      	ite	gt
 8009fac:	2201      	movgt	r2, #1
 8009fae:	f1c1 0202 	rsble	r2, r1, #2
 8009fb2:	4413      	add	r3, r2
 8009fb4:	e7e0      	b.n	8009f78 <_printf_float+0x198>
 8009fb6:	6823      	ldr	r3, [r4, #0]
 8009fb8:	055a      	lsls	r2, r3, #21
 8009fba:	d407      	bmi.n	8009fcc <_printf_float+0x1ec>
 8009fbc:	6923      	ldr	r3, [r4, #16]
 8009fbe:	4642      	mov	r2, r8
 8009fc0:	4631      	mov	r1, r6
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	47b8      	blx	r7
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d12b      	bne.n	800a022 <_printf_float+0x242>
 8009fca:	e764      	b.n	8009e96 <_printf_float+0xb6>
 8009fcc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009fd0:	f240 80dd 	bls.w	800a18e <_printf_float+0x3ae>
 8009fd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009fd8:	2200      	movs	r2, #0
 8009fda:	2300      	movs	r3, #0
 8009fdc:	f7f6 fce4 	bl	80009a8 <__aeabi_dcmpeq>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d033      	beq.n	800a04c <_printf_float+0x26c>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	4631      	mov	r1, r6
 8009fe8:	4628      	mov	r0, r5
 8009fea:	4a35      	ldr	r2, [pc, #212]	; (800a0c0 <_printf_float+0x2e0>)
 8009fec:	47b8      	blx	r7
 8009fee:	3001      	adds	r0, #1
 8009ff0:	f43f af51 	beq.w	8009e96 <_printf_float+0xb6>
 8009ff4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	db02      	blt.n	800a002 <_printf_float+0x222>
 8009ffc:	6823      	ldr	r3, [r4, #0]
 8009ffe:	07d8      	lsls	r0, r3, #31
 800a000:	d50f      	bpl.n	800a022 <_printf_float+0x242>
 800a002:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a006:	4631      	mov	r1, r6
 800a008:	4628      	mov	r0, r5
 800a00a:	47b8      	blx	r7
 800a00c:	3001      	adds	r0, #1
 800a00e:	f43f af42 	beq.w	8009e96 <_printf_float+0xb6>
 800a012:	f04f 0800 	mov.w	r8, #0
 800a016:	f104 091a 	add.w	r9, r4, #26
 800a01a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a01c:	3b01      	subs	r3, #1
 800a01e:	4543      	cmp	r3, r8
 800a020:	dc09      	bgt.n	800a036 <_printf_float+0x256>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	079b      	lsls	r3, r3, #30
 800a026:	f100 8102 	bmi.w	800a22e <_printf_float+0x44e>
 800a02a:	68e0      	ldr	r0, [r4, #12]
 800a02c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a02e:	4298      	cmp	r0, r3
 800a030:	bfb8      	it	lt
 800a032:	4618      	movlt	r0, r3
 800a034:	e731      	b.n	8009e9a <_printf_float+0xba>
 800a036:	2301      	movs	r3, #1
 800a038:	464a      	mov	r2, r9
 800a03a:	4631      	mov	r1, r6
 800a03c:	4628      	mov	r0, r5
 800a03e:	47b8      	blx	r7
 800a040:	3001      	adds	r0, #1
 800a042:	f43f af28 	beq.w	8009e96 <_printf_float+0xb6>
 800a046:	f108 0801 	add.w	r8, r8, #1
 800a04a:	e7e6      	b.n	800a01a <_printf_float+0x23a>
 800a04c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a04e:	2b00      	cmp	r3, #0
 800a050:	dc38      	bgt.n	800a0c4 <_printf_float+0x2e4>
 800a052:	2301      	movs	r3, #1
 800a054:	4631      	mov	r1, r6
 800a056:	4628      	mov	r0, r5
 800a058:	4a19      	ldr	r2, [pc, #100]	; (800a0c0 <_printf_float+0x2e0>)
 800a05a:	47b8      	blx	r7
 800a05c:	3001      	adds	r0, #1
 800a05e:	f43f af1a 	beq.w	8009e96 <_printf_float+0xb6>
 800a062:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a066:	4313      	orrs	r3, r2
 800a068:	d102      	bne.n	800a070 <_printf_float+0x290>
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	07d9      	lsls	r1, r3, #31
 800a06e:	d5d8      	bpl.n	800a022 <_printf_float+0x242>
 800a070:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a074:	4631      	mov	r1, r6
 800a076:	4628      	mov	r0, r5
 800a078:	47b8      	blx	r7
 800a07a:	3001      	adds	r0, #1
 800a07c:	f43f af0b 	beq.w	8009e96 <_printf_float+0xb6>
 800a080:	f04f 0900 	mov.w	r9, #0
 800a084:	f104 0a1a 	add.w	sl, r4, #26
 800a088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a08a:	425b      	negs	r3, r3
 800a08c:	454b      	cmp	r3, r9
 800a08e:	dc01      	bgt.n	800a094 <_printf_float+0x2b4>
 800a090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a092:	e794      	b.n	8009fbe <_printf_float+0x1de>
 800a094:	2301      	movs	r3, #1
 800a096:	4652      	mov	r2, sl
 800a098:	4631      	mov	r1, r6
 800a09a:	4628      	mov	r0, r5
 800a09c:	47b8      	blx	r7
 800a09e:	3001      	adds	r0, #1
 800a0a0:	f43f aef9 	beq.w	8009e96 <_printf_float+0xb6>
 800a0a4:	f109 0901 	add.w	r9, r9, #1
 800a0a8:	e7ee      	b.n	800a088 <_printf_float+0x2a8>
 800a0aa:	bf00      	nop
 800a0ac:	7fefffff 	.word	0x7fefffff
 800a0b0:	0800cb1c 	.word	0x0800cb1c
 800a0b4:	0800cb20 	.word	0x0800cb20
 800a0b8:	0800cb28 	.word	0x0800cb28
 800a0bc:	0800cb24 	.word	0x0800cb24
 800a0c0:	0800cb2c 	.word	0x0800cb2c
 800a0c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	bfa8      	it	ge
 800a0cc:	461a      	movge	r2, r3
 800a0ce:	2a00      	cmp	r2, #0
 800a0d0:	4691      	mov	r9, r2
 800a0d2:	dc37      	bgt.n	800a144 <_printf_float+0x364>
 800a0d4:	f04f 0b00 	mov.w	fp, #0
 800a0d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0dc:	f104 021a 	add.w	r2, r4, #26
 800a0e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a0e4:	ebaa 0309 	sub.w	r3, sl, r9
 800a0e8:	455b      	cmp	r3, fp
 800a0ea:	dc33      	bgt.n	800a154 <_printf_float+0x374>
 800a0ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	db3b      	blt.n	800a16c <_printf_float+0x38c>
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	07da      	lsls	r2, r3, #31
 800a0f8:	d438      	bmi.n	800a16c <_printf_float+0x38c>
 800a0fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a0fe:	eba3 020a 	sub.w	r2, r3, sl
 800a102:	eba3 0901 	sub.w	r9, r3, r1
 800a106:	4591      	cmp	r9, r2
 800a108:	bfa8      	it	ge
 800a10a:	4691      	movge	r9, r2
 800a10c:	f1b9 0f00 	cmp.w	r9, #0
 800a110:	dc34      	bgt.n	800a17c <_printf_float+0x39c>
 800a112:	f04f 0800 	mov.w	r8, #0
 800a116:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a11a:	f104 0a1a 	add.w	sl, r4, #26
 800a11e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a122:	1a9b      	subs	r3, r3, r2
 800a124:	eba3 0309 	sub.w	r3, r3, r9
 800a128:	4543      	cmp	r3, r8
 800a12a:	f77f af7a 	ble.w	800a022 <_printf_float+0x242>
 800a12e:	2301      	movs	r3, #1
 800a130:	4652      	mov	r2, sl
 800a132:	4631      	mov	r1, r6
 800a134:	4628      	mov	r0, r5
 800a136:	47b8      	blx	r7
 800a138:	3001      	adds	r0, #1
 800a13a:	f43f aeac 	beq.w	8009e96 <_printf_float+0xb6>
 800a13e:	f108 0801 	add.w	r8, r8, #1
 800a142:	e7ec      	b.n	800a11e <_printf_float+0x33e>
 800a144:	4613      	mov	r3, r2
 800a146:	4631      	mov	r1, r6
 800a148:	4642      	mov	r2, r8
 800a14a:	4628      	mov	r0, r5
 800a14c:	47b8      	blx	r7
 800a14e:	3001      	adds	r0, #1
 800a150:	d1c0      	bne.n	800a0d4 <_printf_float+0x2f4>
 800a152:	e6a0      	b.n	8009e96 <_printf_float+0xb6>
 800a154:	2301      	movs	r3, #1
 800a156:	4631      	mov	r1, r6
 800a158:	4628      	mov	r0, r5
 800a15a:	920b      	str	r2, [sp, #44]	; 0x2c
 800a15c:	47b8      	blx	r7
 800a15e:	3001      	adds	r0, #1
 800a160:	f43f ae99 	beq.w	8009e96 <_printf_float+0xb6>
 800a164:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a166:	f10b 0b01 	add.w	fp, fp, #1
 800a16a:	e7b9      	b.n	800a0e0 <_printf_float+0x300>
 800a16c:	4631      	mov	r1, r6
 800a16e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a172:	4628      	mov	r0, r5
 800a174:	47b8      	blx	r7
 800a176:	3001      	adds	r0, #1
 800a178:	d1bf      	bne.n	800a0fa <_printf_float+0x31a>
 800a17a:	e68c      	b.n	8009e96 <_printf_float+0xb6>
 800a17c:	464b      	mov	r3, r9
 800a17e:	4631      	mov	r1, r6
 800a180:	4628      	mov	r0, r5
 800a182:	eb08 020a 	add.w	r2, r8, sl
 800a186:	47b8      	blx	r7
 800a188:	3001      	adds	r0, #1
 800a18a:	d1c2      	bne.n	800a112 <_printf_float+0x332>
 800a18c:	e683      	b.n	8009e96 <_printf_float+0xb6>
 800a18e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a190:	2a01      	cmp	r2, #1
 800a192:	dc01      	bgt.n	800a198 <_printf_float+0x3b8>
 800a194:	07db      	lsls	r3, r3, #31
 800a196:	d537      	bpl.n	800a208 <_printf_float+0x428>
 800a198:	2301      	movs	r3, #1
 800a19a:	4642      	mov	r2, r8
 800a19c:	4631      	mov	r1, r6
 800a19e:	4628      	mov	r0, r5
 800a1a0:	47b8      	blx	r7
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	f43f ae77 	beq.w	8009e96 <_printf_float+0xb6>
 800a1a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a1ac:	4631      	mov	r1, r6
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	47b8      	blx	r7
 800a1b2:	3001      	adds	r0, #1
 800a1b4:	f43f ae6f 	beq.w	8009e96 <_printf_float+0xb6>
 800a1b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f7f6 fbf2 	bl	80009a8 <__aeabi_dcmpeq>
 800a1c4:	b9d8      	cbnz	r0, 800a1fe <_printf_float+0x41e>
 800a1c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1c8:	f108 0201 	add.w	r2, r8, #1
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	4631      	mov	r1, r6
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	47b8      	blx	r7
 800a1d4:	3001      	adds	r0, #1
 800a1d6:	d10e      	bne.n	800a1f6 <_printf_float+0x416>
 800a1d8:	e65d      	b.n	8009e96 <_printf_float+0xb6>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	464a      	mov	r2, r9
 800a1de:	4631      	mov	r1, r6
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	47b8      	blx	r7
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	f43f ae56 	beq.w	8009e96 <_printf_float+0xb6>
 800a1ea:	f108 0801 	add.w	r8, r8, #1
 800a1ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	4543      	cmp	r3, r8
 800a1f4:	dcf1      	bgt.n	800a1da <_printf_float+0x3fa>
 800a1f6:	4653      	mov	r3, sl
 800a1f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a1fc:	e6e0      	b.n	8009fc0 <_printf_float+0x1e0>
 800a1fe:	f04f 0800 	mov.w	r8, #0
 800a202:	f104 091a 	add.w	r9, r4, #26
 800a206:	e7f2      	b.n	800a1ee <_printf_float+0x40e>
 800a208:	2301      	movs	r3, #1
 800a20a:	4642      	mov	r2, r8
 800a20c:	e7df      	b.n	800a1ce <_printf_float+0x3ee>
 800a20e:	2301      	movs	r3, #1
 800a210:	464a      	mov	r2, r9
 800a212:	4631      	mov	r1, r6
 800a214:	4628      	mov	r0, r5
 800a216:	47b8      	blx	r7
 800a218:	3001      	adds	r0, #1
 800a21a:	f43f ae3c 	beq.w	8009e96 <_printf_float+0xb6>
 800a21e:	f108 0801 	add.w	r8, r8, #1
 800a222:	68e3      	ldr	r3, [r4, #12]
 800a224:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a226:	1a5b      	subs	r3, r3, r1
 800a228:	4543      	cmp	r3, r8
 800a22a:	dcf0      	bgt.n	800a20e <_printf_float+0x42e>
 800a22c:	e6fd      	b.n	800a02a <_printf_float+0x24a>
 800a22e:	f04f 0800 	mov.w	r8, #0
 800a232:	f104 0919 	add.w	r9, r4, #25
 800a236:	e7f4      	b.n	800a222 <_printf_float+0x442>

0800a238 <_printf_common>:
 800a238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a23c:	4616      	mov	r6, r2
 800a23e:	4699      	mov	r9, r3
 800a240:	688a      	ldr	r2, [r1, #8]
 800a242:	690b      	ldr	r3, [r1, #16]
 800a244:	4607      	mov	r7, r0
 800a246:	4293      	cmp	r3, r2
 800a248:	bfb8      	it	lt
 800a24a:	4613      	movlt	r3, r2
 800a24c:	6033      	str	r3, [r6, #0]
 800a24e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a252:	460c      	mov	r4, r1
 800a254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a258:	b10a      	cbz	r2, 800a25e <_printf_common+0x26>
 800a25a:	3301      	adds	r3, #1
 800a25c:	6033      	str	r3, [r6, #0]
 800a25e:	6823      	ldr	r3, [r4, #0]
 800a260:	0699      	lsls	r1, r3, #26
 800a262:	bf42      	ittt	mi
 800a264:	6833      	ldrmi	r3, [r6, #0]
 800a266:	3302      	addmi	r3, #2
 800a268:	6033      	strmi	r3, [r6, #0]
 800a26a:	6825      	ldr	r5, [r4, #0]
 800a26c:	f015 0506 	ands.w	r5, r5, #6
 800a270:	d106      	bne.n	800a280 <_printf_common+0x48>
 800a272:	f104 0a19 	add.w	sl, r4, #25
 800a276:	68e3      	ldr	r3, [r4, #12]
 800a278:	6832      	ldr	r2, [r6, #0]
 800a27a:	1a9b      	subs	r3, r3, r2
 800a27c:	42ab      	cmp	r3, r5
 800a27e:	dc28      	bgt.n	800a2d2 <_printf_common+0x9a>
 800a280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a284:	1e13      	subs	r3, r2, #0
 800a286:	6822      	ldr	r2, [r4, #0]
 800a288:	bf18      	it	ne
 800a28a:	2301      	movne	r3, #1
 800a28c:	0692      	lsls	r2, r2, #26
 800a28e:	d42d      	bmi.n	800a2ec <_printf_common+0xb4>
 800a290:	4649      	mov	r1, r9
 800a292:	4638      	mov	r0, r7
 800a294:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a298:	47c0      	blx	r8
 800a29a:	3001      	adds	r0, #1
 800a29c:	d020      	beq.n	800a2e0 <_printf_common+0xa8>
 800a29e:	6823      	ldr	r3, [r4, #0]
 800a2a0:	68e5      	ldr	r5, [r4, #12]
 800a2a2:	f003 0306 	and.w	r3, r3, #6
 800a2a6:	2b04      	cmp	r3, #4
 800a2a8:	bf18      	it	ne
 800a2aa:	2500      	movne	r5, #0
 800a2ac:	6832      	ldr	r2, [r6, #0]
 800a2ae:	f04f 0600 	mov.w	r6, #0
 800a2b2:	68a3      	ldr	r3, [r4, #8]
 800a2b4:	bf08      	it	eq
 800a2b6:	1aad      	subeq	r5, r5, r2
 800a2b8:	6922      	ldr	r2, [r4, #16]
 800a2ba:	bf08      	it	eq
 800a2bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	bfc4      	itt	gt
 800a2c4:	1a9b      	subgt	r3, r3, r2
 800a2c6:	18ed      	addgt	r5, r5, r3
 800a2c8:	341a      	adds	r4, #26
 800a2ca:	42b5      	cmp	r5, r6
 800a2cc:	d11a      	bne.n	800a304 <_printf_common+0xcc>
 800a2ce:	2000      	movs	r0, #0
 800a2d0:	e008      	b.n	800a2e4 <_printf_common+0xac>
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	4652      	mov	r2, sl
 800a2d6:	4649      	mov	r1, r9
 800a2d8:	4638      	mov	r0, r7
 800a2da:	47c0      	blx	r8
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d103      	bne.n	800a2e8 <_printf_common+0xb0>
 800a2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2e8:	3501      	adds	r5, #1
 800a2ea:	e7c4      	b.n	800a276 <_printf_common+0x3e>
 800a2ec:	2030      	movs	r0, #48	; 0x30
 800a2ee:	18e1      	adds	r1, r4, r3
 800a2f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2f4:	1c5a      	adds	r2, r3, #1
 800a2f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2fa:	4422      	add	r2, r4
 800a2fc:	3302      	adds	r3, #2
 800a2fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a302:	e7c5      	b.n	800a290 <_printf_common+0x58>
 800a304:	2301      	movs	r3, #1
 800a306:	4622      	mov	r2, r4
 800a308:	4649      	mov	r1, r9
 800a30a:	4638      	mov	r0, r7
 800a30c:	47c0      	blx	r8
 800a30e:	3001      	adds	r0, #1
 800a310:	d0e6      	beq.n	800a2e0 <_printf_common+0xa8>
 800a312:	3601      	adds	r6, #1
 800a314:	e7d9      	b.n	800a2ca <_printf_common+0x92>
	...

0800a318 <_printf_i>:
 800a318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a31c:	7e0f      	ldrb	r7, [r1, #24]
 800a31e:	4691      	mov	r9, r2
 800a320:	2f78      	cmp	r7, #120	; 0x78
 800a322:	4680      	mov	r8, r0
 800a324:	460c      	mov	r4, r1
 800a326:	469a      	mov	sl, r3
 800a328:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a32a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a32e:	d807      	bhi.n	800a340 <_printf_i+0x28>
 800a330:	2f62      	cmp	r7, #98	; 0x62
 800a332:	d80a      	bhi.n	800a34a <_printf_i+0x32>
 800a334:	2f00      	cmp	r7, #0
 800a336:	f000 80d9 	beq.w	800a4ec <_printf_i+0x1d4>
 800a33a:	2f58      	cmp	r7, #88	; 0x58
 800a33c:	f000 80a4 	beq.w	800a488 <_printf_i+0x170>
 800a340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a344:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a348:	e03a      	b.n	800a3c0 <_printf_i+0xa8>
 800a34a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a34e:	2b15      	cmp	r3, #21
 800a350:	d8f6      	bhi.n	800a340 <_printf_i+0x28>
 800a352:	a101      	add	r1, pc, #4	; (adr r1, 800a358 <_printf_i+0x40>)
 800a354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a358:	0800a3b1 	.word	0x0800a3b1
 800a35c:	0800a3c5 	.word	0x0800a3c5
 800a360:	0800a341 	.word	0x0800a341
 800a364:	0800a341 	.word	0x0800a341
 800a368:	0800a341 	.word	0x0800a341
 800a36c:	0800a341 	.word	0x0800a341
 800a370:	0800a3c5 	.word	0x0800a3c5
 800a374:	0800a341 	.word	0x0800a341
 800a378:	0800a341 	.word	0x0800a341
 800a37c:	0800a341 	.word	0x0800a341
 800a380:	0800a341 	.word	0x0800a341
 800a384:	0800a4d3 	.word	0x0800a4d3
 800a388:	0800a3f5 	.word	0x0800a3f5
 800a38c:	0800a4b5 	.word	0x0800a4b5
 800a390:	0800a341 	.word	0x0800a341
 800a394:	0800a341 	.word	0x0800a341
 800a398:	0800a4f5 	.word	0x0800a4f5
 800a39c:	0800a341 	.word	0x0800a341
 800a3a0:	0800a3f5 	.word	0x0800a3f5
 800a3a4:	0800a341 	.word	0x0800a341
 800a3a8:	0800a341 	.word	0x0800a341
 800a3ac:	0800a4bd 	.word	0x0800a4bd
 800a3b0:	682b      	ldr	r3, [r5, #0]
 800a3b2:	1d1a      	adds	r2, r3, #4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	602a      	str	r2, [r5, #0]
 800a3b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e0a4      	b.n	800a50e <_printf_i+0x1f6>
 800a3c4:	6820      	ldr	r0, [r4, #0]
 800a3c6:	6829      	ldr	r1, [r5, #0]
 800a3c8:	0606      	lsls	r6, r0, #24
 800a3ca:	f101 0304 	add.w	r3, r1, #4
 800a3ce:	d50a      	bpl.n	800a3e6 <_printf_i+0xce>
 800a3d0:	680e      	ldr	r6, [r1, #0]
 800a3d2:	602b      	str	r3, [r5, #0]
 800a3d4:	2e00      	cmp	r6, #0
 800a3d6:	da03      	bge.n	800a3e0 <_printf_i+0xc8>
 800a3d8:	232d      	movs	r3, #45	; 0x2d
 800a3da:	4276      	negs	r6, r6
 800a3dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3e0:	230a      	movs	r3, #10
 800a3e2:	485e      	ldr	r0, [pc, #376]	; (800a55c <_printf_i+0x244>)
 800a3e4:	e019      	b.n	800a41a <_printf_i+0x102>
 800a3e6:	680e      	ldr	r6, [r1, #0]
 800a3e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3ec:	602b      	str	r3, [r5, #0]
 800a3ee:	bf18      	it	ne
 800a3f0:	b236      	sxthne	r6, r6
 800a3f2:	e7ef      	b.n	800a3d4 <_printf_i+0xbc>
 800a3f4:	682b      	ldr	r3, [r5, #0]
 800a3f6:	6820      	ldr	r0, [r4, #0]
 800a3f8:	1d19      	adds	r1, r3, #4
 800a3fa:	6029      	str	r1, [r5, #0]
 800a3fc:	0601      	lsls	r1, r0, #24
 800a3fe:	d501      	bpl.n	800a404 <_printf_i+0xec>
 800a400:	681e      	ldr	r6, [r3, #0]
 800a402:	e002      	b.n	800a40a <_printf_i+0xf2>
 800a404:	0646      	lsls	r6, r0, #25
 800a406:	d5fb      	bpl.n	800a400 <_printf_i+0xe8>
 800a408:	881e      	ldrh	r6, [r3, #0]
 800a40a:	2f6f      	cmp	r7, #111	; 0x6f
 800a40c:	bf0c      	ite	eq
 800a40e:	2308      	moveq	r3, #8
 800a410:	230a      	movne	r3, #10
 800a412:	4852      	ldr	r0, [pc, #328]	; (800a55c <_printf_i+0x244>)
 800a414:	2100      	movs	r1, #0
 800a416:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a41a:	6865      	ldr	r5, [r4, #4]
 800a41c:	2d00      	cmp	r5, #0
 800a41e:	bfa8      	it	ge
 800a420:	6821      	ldrge	r1, [r4, #0]
 800a422:	60a5      	str	r5, [r4, #8]
 800a424:	bfa4      	itt	ge
 800a426:	f021 0104 	bicge.w	r1, r1, #4
 800a42a:	6021      	strge	r1, [r4, #0]
 800a42c:	b90e      	cbnz	r6, 800a432 <_printf_i+0x11a>
 800a42e:	2d00      	cmp	r5, #0
 800a430:	d04d      	beq.n	800a4ce <_printf_i+0x1b6>
 800a432:	4615      	mov	r5, r2
 800a434:	fbb6 f1f3 	udiv	r1, r6, r3
 800a438:	fb03 6711 	mls	r7, r3, r1, r6
 800a43c:	5dc7      	ldrb	r7, [r0, r7]
 800a43e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a442:	4637      	mov	r7, r6
 800a444:	42bb      	cmp	r3, r7
 800a446:	460e      	mov	r6, r1
 800a448:	d9f4      	bls.n	800a434 <_printf_i+0x11c>
 800a44a:	2b08      	cmp	r3, #8
 800a44c:	d10b      	bne.n	800a466 <_printf_i+0x14e>
 800a44e:	6823      	ldr	r3, [r4, #0]
 800a450:	07de      	lsls	r6, r3, #31
 800a452:	d508      	bpl.n	800a466 <_printf_i+0x14e>
 800a454:	6923      	ldr	r3, [r4, #16]
 800a456:	6861      	ldr	r1, [r4, #4]
 800a458:	4299      	cmp	r1, r3
 800a45a:	bfde      	ittt	le
 800a45c:	2330      	movle	r3, #48	; 0x30
 800a45e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a462:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a466:	1b52      	subs	r2, r2, r5
 800a468:	6122      	str	r2, [r4, #16]
 800a46a:	464b      	mov	r3, r9
 800a46c:	4621      	mov	r1, r4
 800a46e:	4640      	mov	r0, r8
 800a470:	f8cd a000 	str.w	sl, [sp]
 800a474:	aa03      	add	r2, sp, #12
 800a476:	f7ff fedf 	bl	800a238 <_printf_common>
 800a47a:	3001      	adds	r0, #1
 800a47c:	d14c      	bne.n	800a518 <_printf_i+0x200>
 800a47e:	f04f 30ff 	mov.w	r0, #4294967295
 800a482:	b004      	add	sp, #16
 800a484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a488:	4834      	ldr	r0, [pc, #208]	; (800a55c <_printf_i+0x244>)
 800a48a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a48e:	6829      	ldr	r1, [r5, #0]
 800a490:	6823      	ldr	r3, [r4, #0]
 800a492:	f851 6b04 	ldr.w	r6, [r1], #4
 800a496:	6029      	str	r1, [r5, #0]
 800a498:	061d      	lsls	r5, r3, #24
 800a49a:	d514      	bpl.n	800a4c6 <_printf_i+0x1ae>
 800a49c:	07df      	lsls	r7, r3, #31
 800a49e:	bf44      	itt	mi
 800a4a0:	f043 0320 	orrmi.w	r3, r3, #32
 800a4a4:	6023      	strmi	r3, [r4, #0]
 800a4a6:	b91e      	cbnz	r6, 800a4b0 <_printf_i+0x198>
 800a4a8:	6823      	ldr	r3, [r4, #0]
 800a4aa:	f023 0320 	bic.w	r3, r3, #32
 800a4ae:	6023      	str	r3, [r4, #0]
 800a4b0:	2310      	movs	r3, #16
 800a4b2:	e7af      	b.n	800a414 <_printf_i+0xfc>
 800a4b4:	6823      	ldr	r3, [r4, #0]
 800a4b6:	f043 0320 	orr.w	r3, r3, #32
 800a4ba:	6023      	str	r3, [r4, #0]
 800a4bc:	2378      	movs	r3, #120	; 0x78
 800a4be:	4828      	ldr	r0, [pc, #160]	; (800a560 <_printf_i+0x248>)
 800a4c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4c4:	e7e3      	b.n	800a48e <_printf_i+0x176>
 800a4c6:	0659      	lsls	r1, r3, #25
 800a4c8:	bf48      	it	mi
 800a4ca:	b2b6      	uxthmi	r6, r6
 800a4cc:	e7e6      	b.n	800a49c <_printf_i+0x184>
 800a4ce:	4615      	mov	r5, r2
 800a4d0:	e7bb      	b.n	800a44a <_printf_i+0x132>
 800a4d2:	682b      	ldr	r3, [r5, #0]
 800a4d4:	6826      	ldr	r6, [r4, #0]
 800a4d6:	1d18      	adds	r0, r3, #4
 800a4d8:	6961      	ldr	r1, [r4, #20]
 800a4da:	6028      	str	r0, [r5, #0]
 800a4dc:	0635      	lsls	r5, r6, #24
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	d501      	bpl.n	800a4e6 <_printf_i+0x1ce>
 800a4e2:	6019      	str	r1, [r3, #0]
 800a4e4:	e002      	b.n	800a4ec <_printf_i+0x1d4>
 800a4e6:	0670      	lsls	r0, r6, #25
 800a4e8:	d5fb      	bpl.n	800a4e2 <_printf_i+0x1ca>
 800a4ea:	8019      	strh	r1, [r3, #0]
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	4615      	mov	r5, r2
 800a4f0:	6123      	str	r3, [r4, #16]
 800a4f2:	e7ba      	b.n	800a46a <_printf_i+0x152>
 800a4f4:	682b      	ldr	r3, [r5, #0]
 800a4f6:	2100      	movs	r1, #0
 800a4f8:	1d1a      	adds	r2, r3, #4
 800a4fa:	602a      	str	r2, [r5, #0]
 800a4fc:	681d      	ldr	r5, [r3, #0]
 800a4fe:	6862      	ldr	r2, [r4, #4]
 800a500:	4628      	mov	r0, r5
 800a502:	f000 feeb 	bl	800b2dc <memchr>
 800a506:	b108      	cbz	r0, 800a50c <_printf_i+0x1f4>
 800a508:	1b40      	subs	r0, r0, r5
 800a50a:	6060      	str	r0, [r4, #4]
 800a50c:	6863      	ldr	r3, [r4, #4]
 800a50e:	6123      	str	r3, [r4, #16]
 800a510:	2300      	movs	r3, #0
 800a512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a516:	e7a8      	b.n	800a46a <_printf_i+0x152>
 800a518:	462a      	mov	r2, r5
 800a51a:	4649      	mov	r1, r9
 800a51c:	4640      	mov	r0, r8
 800a51e:	6923      	ldr	r3, [r4, #16]
 800a520:	47d0      	blx	sl
 800a522:	3001      	adds	r0, #1
 800a524:	d0ab      	beq.n	800a47e <_printf_i+0x166>
 800a526:	6823      	ldr	r3, [r4, #0]
 800a528:	079b      	lsls	r3, r3, #30
 800a52a:	d413      	bmi.n	800a554 <_printf_i+0x23c>
 800a52c:	68e0      	ldr	r0, [r4, #12]
 800a52e:	9b03      	ldr	r3, [sp, #12]
 800a530:	4298      	cmp	r0, r3
 800a532:	bfb8      	it	lt
 800a534:	4618      	movlt	r0, r3
 800a536:	e7a4      	b.n	800a482 <_printf_i+0x16a>
 800a538:	2301      	movs	r3, #1
 800a53a:	4632      	mov	r2, r6
 800a53c:	4649      	mov	r1, r9
 800a53e:	4640      	mov	r0, r8
 800a540:	47d0      	blx	sl
 800a542:	3001      	adds	r0, #1
 800a544:	d09b      	beq.n	800a47e <_printf_i+0x166>
 800a546:	3501      	adds	r5, #1
 800a548:	68e3      	ldr	r3, [r4, #12]
 800a54a:	9903      	ldr	r1, [sp, #12]
 800a54c:	1a5b      	subs	r3, r3, r1
 800a54e:	42ab      	cmp	r3, r5
 800a550:	dcf2      	bgt.n	800a538 <_printf_i+0x220>
 800a552:	e7eb      	b.n	800a52c <_printf_i+0x214>
 800a554:	2500      	movs	r5, #0
 800a556:	f104 0619 	add.w	r6, r4, #25
 800a55a:	e7f5      	b.n	800a548 <_printf_i+0x230>
 800a55c:	0800cb2e 	.word	0x0800cb2e
 800a560:	0800cb3f 	.word	0x0800cb3f

0800a564 <sniprintf>:
 800a564:	b40c      	push	{r2, r3}
 800a566:	b530      	push	{r4, r5, lr}
 800a568:	4b17      	ldr	r3, [pc, #92]	; (800a5c8 <sniprintf+0x64>)
 800a56a:	1e0c      	subs	r4, r1, #0
 800a56c:	681d      	ldr	r5, [r3, #0]
 800a56e:	b09d      	sub	sp, #116	; 0x74
 800a570:	da08      	bge.n	800a584 <sniprintf+0x20>
 800a572:	238b      	movs	r3, #139	; 0x8b
 800a574:	f04f 30ff 	mov.w	r0, #4294967295
 800a578:	602b      	str	r3, [r5, #0]
 800a57a:	b01d      	add	sp, #116	; 0x74
 800a57c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a580:	b002      	add	sp, #8
 800a582:	4770      	bx	lr
 800a584:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a588:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a58c:	bf0c      	ite	eq
 800a58e:	4623      	moveq	r3, r4
 800a590:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a594:	9304      	str	r3, [sp, #16]
 800a596:	9307      	str	r3, [sp, #28]
 800a598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a59c:	9002      	str	r0, [sp, #8]
 800a59e:	9006      	str	r0, [sp, #24]
 800a5a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	ab21      	add	r3, sp, #132	; 0x84
 800a5a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a5aa:	a902      	add	r1, sp, #8
 800a5ac:	9301      	str	r3, [sp, #4]
 800a5ae:	f001 fb7f 	bl	800bcb0 <_svfiprintf_r>
 800a5b2:	1c43      	adds	r3, r0, #1
 800a5b4:	bfbc      	itt	lt
 800a5b6:	238b      	movlt	r3, #139	; 0x8b
 800a5b8:	602b      	strlt	r3, [r5, #0]
 800a5ba:	2c00      	cmp	r4, #0
 800a5bc:	d0dd      	beq.n	800a57a <sniprintf+0x16>
 800a5be:	2200      	movs	r2, #0
 800a5c0:	9b02      	ldr	r3, [sp, #8]
 800a5c2:	701a      	strb	r2, [r3, #0]
 800a5c4:	e7d9      	b.n	800a57a <sniprintf+0x16>
 800a5c6:	bf00      	nop
 800a5c8:	2000017c 	.word	0x2000017c

0800a5cc <quorem>:
 800a5cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d0:	6903      	ldr	r3, [r0, #16]
 800a5d2:	690c      	ldr	r4, [r1, #16]
 800a5d4:	4607      	mov	r7, r0
 800a5d6:	42a3      	cmp	r3, r4
 800a5d8:	f2c0 8082 	blt.w	800a6e0 <quorem+0x114>
 800a5dc:	3c01      	subs	r4, #1
 800a5de:	f100 0514 	add.w	r5, r0, #20
 800a5e2:	f101 0814 	add.w	r8, r1, #20
 800a5e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5ea:	9301      	str	r3, [sp, #4]
 800a5ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a600:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a604:	d331      	bcc.n	800a66a <quorem+0x9e>
 800a606:	f04f 0e00 	mov.w	lr, #0
 800a60a:	4640      	mov	r0, r8
 800a60c:	46ac      	mov	ip, r5
 800a60e:	46f2      	mov	sl, lr
 800a610:	f850 2b04 	ldr.w	r2, [r0], #4
 800a614:	b293      	uxth	r3, r2
 800a616:	fb06 e303 	mla	r3, r6, r3, lr
 800a61a:	0c12      	lsrs	r2, r2, #16
 800a61c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a620:	b29b      	uxth	r3, r3
 800a622:	fb06 e202 	mla	r2, r6, r2, lr
 800a626:	ebaa 0303 	sub.w	r3, sl, r3
 800a62a:	f8dc a000 	ldr.w	sl, [ip]
 800a62e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a632:	fa1f fa8a 	uxth.w	sl, sl
 800a636:	4453      	add	r3, sl
 800a638:	f8dc a000 	ldr.w	sl, [ip]
 800a63c:	b292      	uxth	r2, r2
 800a63e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a642:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a646:	b29b      	uxth	r3, r3
 800a648:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a64c:	4581      	cmp	r9, r0
 800a64e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a652:	f84c 3b04 	str.w	r3, [ip], #4
 800a656:	d2db      	bcs.n	800a610 <quorem+0x44>
 800a658:	f855 300b 	ldr.w	r3, [r5, fp]
 800a65c:	b92b      	cbnz	r3, 800a66a <quorem+0x9e>
 800a65e:	9b01      	ldr	r3, [sp, #4]
 800a660:	3b04      	subs	r3, #4
 800a662:	429d      	cmp	r5, r3
 800a664:	461a      	mov	r2, r3
 800a666:	d32f      	bcc.n	800a6c8 <quorem+0xfc>
 800a668:	613c      	str	r4, [r7, #16]
 800a66a:	4638      	mov	r0, r7
 800a66c:	f001 f8d0 	bl	800b810 <__mcmp>
 800a670:	2800      	cmp	r0, #0
 800a672:	db25      	blt.n	800a6c0 <quorem+0xf4>
 800a674:	4628      	mov	r0, r5
 800a676:	f04f 0c00 	mov.w	ip, #0
 800a67a:	3601      	adds	r6, #1
 800a67c:	f858 1b04 	ldr.w	r1, [r8], #4
 800a680:	f8d0 e000 	ldr.w	lr, [r0]
 800a684:	b28b      	uxth	r3, r1
 800a686:	ebac 0303 	sub.w	r3, ip, r3
 800a68a:	fa1f f28e 	uxth.w	r2, lr
 800a68e:	4413      	add	r3, r2
 800a690:	0c0a      	lsrs	r2, r1, #16
 800a692:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a696:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6a0:	45c1      	cmp	r9, r8
 800a6a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a6a6:	f840 3b04 	str.w	r3, [r0], #4
 800a6aa:	d2e7      	bcs.n	800a67c <quorem+0xb0>
 800a6ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6b4:	b922      	cbnz	r2, 800a6c0 <quorem+0xf4>
 800a6b6:	3b04      	subs	r3, #4
 800a6b8:	429d      	cmp	r5, r3
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	d30a      	bcc.n	800a6d4 <quorem+0x108>
 800a6be:	613c      	str	r4, [r7, #16]
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	b003      	add	sp, #12
 800a6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c8:	6812      	ldr	r2, [r2, #0]
 800a6ca:	3b04      	subs	r3, #4
 800a6cc:	2a00      	cmp	r2, #0
 800a6ce:	d1cb      	bne.n	800a668 <quorem+0x9c>
 800a6d0:	3c01      	subs	r4, #1
 800a6d2:	e7c6      	b.n	800a662 <quorem+0x96>
 800a6d4:	6812      	ldr	r2, [r2, #0]
 800a6d6:	3b04      	subs	r3, #4
 800a6d8:	2a00      	cmp	r2, #0
 800a6da:	d1f0      	bne.n	800a6be <quorem+0xf2>
 800a6dc:	3c01      	subs	r4, #1
 800a6de:	e7eb      	b.n	800a6b8 <quorem+0xec>
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	e7ee      	b.n	800a6c2 <quorem+0xf6>
 800a6e4:	0000      	movs	r0, r0
	...

0800a6e8 <_dtoa_r>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	4616      	mov	r6, r2
 800a6ee:	461f      	mov	r7, r3
 800a6f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a6f2:	b099      	sub	sp, #100	; 0x64
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a6fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a6fe:	b974      	cbnz	r4, 800a71e <_dtoa_r+0x36>
 800a700:	2010      	movs	r0, #16
 800a702:	f000 fde3 	bl	800b2cc <malloc>
 800a706:	4602      	mov	r2, r0
 800a708:	6268      	str	r0, [r5, #36]	; 0x24
 800a70a:	b920      	cbnz	r0, 800a716 <_dtoa_r+0x2e>
 800a70c:	21ea      	movs	r1, #234	; 0xea
 800a70e:	4ba8      	ldr	r3, [pc, #672]	; (800a9b0 <_dtoa_r+0x2c8>)
 800a710:	48a8      	ldr	r0, [pc, #672]	; (800a9b4 <_dtoa_r+0x2cc>)
 800a712:	f001 fbdd 	bl	800bed0 <__assert_func>
 800a716:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a71a:	6004      	str	r4, [r0, #0]
 800a71c:	60c4      	str	r4, [r0, #12]
 800a71e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a720:	6819      	ldr	r1, [r3, #0]
 800a722:	b151      	cbz	r1, 800a73a <_dtoa_r+0x52>
 800a724:	685a      	ldr	r2, [r3, #4]
 800a726:	2301      	movs	r3, #1
 800a728:	4093      	lsls	r3, r2
 800a72a:	604a      	str	r2, [r1, #4]
 800a72c:	608b      	str	r3, [r1, #8]
 800a72e:	4628      	mov	r0, r5
 800a730:	f000 fe30 	bl	800b394 <_Bfree>
 800a734:	2200      	movs	r2, #0
 800a736:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	1e3b      	subs	r3, r7, #0
 800a73c:	bfaf      	iteee	ge
 800a73e:	2300      	movge	r3, #0
 800a740:	2201      	movlt	r2, #1
 800a742:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a746:	9305      	strlt	r3, [sp, #20]
 800a748:	bfa8      	it	ge
 800a74a:	f8c8 3000 	strge.w	r3, [r8]
 800a74e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a752:	4b99      	ldr	r3, [pc, #612]	; (800a9b8 <_dtoa_r+0x2d0>)
 800a754:	bfb8      	it	lt
 800a756:	f8c8 2000 	strlt.w	r2, [r8]
 800a75a:	ea33 0309 	bics.w	r3, r3, r9
 800a75e:	d119      	bne.n	800a794 <_dtoa_r+0xac>
 800a760:	f242 730f 	movw	r3, #9999	; 0x270f
 800a764:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a766:	6013      	str	r3, [r2, #0]
 800a768:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a76c:	4333      	orrs	r3, r6
 800a76e:	f000 857f 	beq.w	800b270 <_dtoa_r+0xb88>
 800a772:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a774:	b953      	cbnz	r3, 800a78c <_dtoa_r+0xa4>
 800a776:	4b91      	ldr	r3, [pc, #580]	; (800a9bc <_dtoa_r+0x2d4>)
 800a778:	e022      	b.n	800a7c0 <_dtoa_r+0xd8>
 800a77a:	4b91      	ldr	r3, [pc, #580]	; (800a9c0 <_dtoa_r+0x2d8>)
 800a77c:	9303      	str	r3, [sp, #12]
 800a77e:	3308      	adds	r3, #8
 800a780:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a782:	6013      	str	r3, [r2, #0]
 800a784:	9803      	ldr	r0, [sp, #12]
 800a786:	b019      	add	sp, #100	; 0x64
 800a788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78c:	4b8b      	ldr	r3, [pc, #556]	; (800a9bc <_dtoa_r+0x2d4>)
 800a78e:	9303      	str	r3, [sp, #12]
 800a790:	3303      	adds	r3, #3
 800a792:	e7f5      	b.n	800a780 <_dtoa_r+0x98>
 800a794:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a798:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a79c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	f7f6 f900 	bl	80009a8 <__aeabi_dcmpeq>
 800a7a8:	4680      	mov	r8, r0
 800a7aa:	b158      	cbz	r0, 800a7c4 <_dtoa_r+0xdc>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a7b0:	6013      	str	r3, [r2, #0]
 800a7b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 8558 	beq.w	800b26a <_dtoa_r+0xb82>
 800a7ba:	4882      	ldr	r0, [pc, #520]	; (800a9c4 <_dtoa_r+0x2dc>)
 800a7bc:	6018      	str	r0, [r3, #0]
 800a7be:	1e43      	subs	r3, r0, #1
 800a7c0:	9303      	str	r3, [sp, #12]
 800a7c2:	e7df      	b.n	800a784 <_dtoa_r+0x9c>
 800a7c4:	ab16      	add	r3, sp, #88	; 0x58
 800a7c6:	9301      	str	r3, [sp, #4]
 800a7c8:	ab17      	add	r3, sp, #92	; 0x5c
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a7d2:	f001 f8c5 	bl	800b960 <__d2b>
 800a7d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a7da:	4683      	mov	fp, r0
 800a7dc:	2c00      	cmp	r4, #0
 800a7de:	d07f      	beq.n	800a8e0 <_dtoa_r+0x1f8>
 800a7e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a7ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a7f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a7f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	4b72      	ldr	r3, [pc, #456]	; (800a9c8 <_dtoa_r+0x2e0>)
 800a7fe:	f7f5 fcb3 	bl	8000168 <__aeabi_dsub>
 800a802:	a365      	add	r3, pc, #404	; (adr r3, 800a998 <_dtoa_r+0x2b0>)
 800a804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a808:	f7f5 fe66 	bl	80004d8 <__aeabi_dmul>
 800a80c:	a364      	add	r3, pc, #400	; (adr r3, 800a9a0 <_dtoa_r+0x2b8>)
 800a80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a812:	f7f5 fcab 	bl	800016c <__adddf3>
 800a816:	4606      	mov	r6, r0
 800a818:	4620      	mov	r0, r4
 800a81a:	460f      	mov	r7, r1
 800a81c:	f7f5 fdf2 	bl	8000404 <__aeabi_i2d>
 800a820:	a361      	add	r3, pc, #388	; (adr r3, 800a9a8 <_dtoa_r+0x2c0>)
 800a822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a826:	f7f5 fe57 	bl	80004d8 <__aeabi_dmul>
 800a82a:	4602      	mov	r2, r0
 800a82c:	460b      	mov	r3, r1
 800a82e:	4630      	mov	r0, r6
 800a830:	4639      	mov	r1, r7
 800a832:	f7f5 fc9b 	bl	800016c <__adddf3>
 800a836:	4606      	mov	r6, r0
 800a838:	460f      	mov	r7, r1
 800a83a:	f7f6 f8fd 	bl	8000a38 <__aeabi_d2iz>
 800a83e:	2200      	movs	r2, #0
 800a840:	4682      	mov	sl, r0
 800a842:	2300      	movs	r3, #0
 800a844:	4630      	mov	r0, r6
 800a846:	4639      	mov	r1, r7
 800a848:	f7f6 f8b8 	bl	80009bc <__aeabi_dcmplt>
 800a84c:	b148      	cbz	r0, 800a862 <_dtoa_r+0x17a>
 800a84e:	4650      	mov	r0, sl
 800a850:	f7f5 fdd8 	bl	8000404 <__aeabi_i2d>
 800a854:	4632      	mov	r2, r6
 800a856:	463b      	mov	r3, r7
 800a858:	f7f6 f8a6 	bl	80009a8 <__aeabi_dcmpeq>
 800a85c:	b908      	cbnz	r0, 800a862 <_dtoa_r+0x17a>
 800a85e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a862:	f1ba 0f16 	cmp.w	sl, #22
 800a866:	d858      	bhi.n	800a91a <_dtoa_r+0x232>
 800a868:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a86c:	4b57      	ldr	r3, [pc, #348]	; (800a9cc <_dtoa_r+0x2e4>)
 800a86e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	f7f6 f8a1 	bl	80009bc <__aeabi_dcmplt>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d04f      	beq.n	800a91e <_dtoa_r+0x236>
 800a87e:	2300      	movs	r3, #0
 800a880:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a884:	930f      	str	r3, [sp, #60]	; 0x3c
 800a886:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a888:	1b1c      	subs	r4, r3, r4
 800a88a:	1e63      	subs	r3, r4, #1
 800a88c:	9309      	str	r3, [sp, #36]	; 0x24
 800a88e:	bf49      	itett	mi
 800a890:	f1c4 0301 	rsbmi	r3, r4, #1
 800a894:	2300      	movpl	r3, #0
 800a896:	9306      	strmi	r3, [sp, #24]
 800a898:	2300      	movmi	r3, #0
 800a89a:	bf54      	ite	pl
 800a89c:	9306      	strpl	r3, [sp, #24]
 800a89e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a8a0:	f1ba 0f00 	cmp.w	sl, #0
 800a8a4:	db3d      	blt.n	800a922 <_dtoa_r+0x23a>
 800a8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a8ac:	4453      	add	r3, sl
 800a8ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a8b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8b6:	2b09      	cmp	r3, #9
 800a8b8:	f200 808c 	bhi.w	800a9d4 <_dtoa_r+0x2ec>
 800a8bc:	2b05      	cmp	r3, #5
 800a8be:	bfc4      	itt	gt
 800a8c0:	3b04      	subgt	r3, #4
 800a8c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a8c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8c6:	bfc8      	it	gt
 800a8c8:	2400      	movgt	r4, #0
 800a8ca:	f1a3 0302 	sub.w	r3, r3, #2
 800a8ce:	bfd8      	it	le
 800a8d0:	2401      	movle	r4, #1
 800a8d2:	2b03      	cmp	r3, #3
 800a8d4:	f200 808a 	bhi.w	800a9ec <_dtoa_r+0x304>
 800a8d8:	e8df f003 	tbb	[pc, r3]
 800a8dc:	5b4d4f2d 	.word	0x5b4d4f2d
 800a8e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a8e4:	441c      	add	r4, r3
 800a8e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a8ea:	2b20      	cmp	r3, #32
 800a8ec:	bfc3      	ittte	gt
 800a8ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a8f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800a8f6:	fa09 f303 	lslgt.w	r3, r9, r3
 800a8fa:	f1c3 0320 	rsble	r3, r3, #32
 800a8fe:	bfc6      	itte	gt
 800a900:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a904:	4318      	orrgt	r0, r3
 800a906:	fa06 f003 	lslle.w	r0, r6, r3
 800a90a:	f7f5 fd6b 	bl	80003e4 <__aeabi_ui2d>
 800a90e:	2301      	movs	r3, #1
 800a910:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a914:	3c01      	subs	r4, #1
 800a916:	9313      	str	r3, [sp, #76]	; 0x4c
 800a918:	e76f      	b.n	800a7fa <_dtoa_r+0x112>
 800a91a:	2301      	movs	r3, #1
 800a91c:	e7b2      	b.n	800a884 <_dtoa_r+0x19c>
 800a91e:	900f      	str	r0, [sp, #60]	; 0x3c
 800a920:	e7b1      	b.n	800a886 <_dtoa_r+0x19e>
 800a922:	9b06      	ldr	r3, [sp, #24]
 800a924:	eba3 030a 	sub.w	r3, r3, sl
 800a928:	9306      	str	r3, [sp, #24]
 800a92a:	f1ca 0300 	rsb	r3, sl, #0
 800a92e:	930a      	str	r3, [sp, #40]	; 0x28
 800a930:	2300      	movs	r3, #0
 800a932:	930e      	str	r3, [sp, #56]	; 0x38
 800a934:	e7be      	b.n	800a8b4 <_dtoa_r+0x1cc>
 800a936:	2300      	movs	r3, #0
 800a938:	930b      	str	r3, [sp, #44]	; 0x2c
 800a93a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	dc58      	bgt.n	800a9f2 <_dtoa_r+0x30a>
 800a940:	f04f 0901 	mov.w	r9, #1
 800a944:	464b      	mov	r3, r9
 800a946:	f8cd 9020 	str.w	r9, [sp, #32]
 800a94a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800a94e:	2200      	movs	r2, #0
 800a950:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a952:	6042      	str	r2, [r0, #4]
 800a954:	2204      	movs	r2, #4
 800a956:	f102 0614 	add.w	r6, r2, #20
 800a95a:	429e      	cmp	r6, r3
 800a95c:	6841      	ldr	r1, [r0, #4]
 800a95e:	d94e      	bls.n	800a9fe <_dtoa_r+0x316>
 800a960:	4628      	mov	r0, r5
 800a962:	f000 fcd7 	bl	800b314 <_Balloc>
 800a966:	9003      	str	r0, [sp, #12]
 800a968:	2800      	cmp	r0, #0
 800a96a:	d14c      	bne.n	800aa06 <_dtoa_r+0x31e>
 800a96c:	4602      	mov	r2, r0
 800a96e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a972:	4b17      	ldr	r3, [pc, #92]	; (800a9d0 <_dtoa_r+0x2e8>)
 800a974:	e6cc      	b.n	800a710 <_dtoa_r+0x28>
 800a976:	2301      	movs	r3, #1
 800a978:	e7de      	b.n	800a938 <_dtoa_r+0x250>
 800a97a:	2300      	movs	r3, #0
 800a97c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a97e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a980:	eb0a 0903 	add.w	r9, sl, r3
 800a984:	f109 0301 	add.w	r3, r9, #1
 800a988:	2b01      	cmp	r3, #1
 800a98a:	9308      	str	r3, [sp, #32]
 800a98c:	bfb8      	it	lt
 800a98e:	2301      	movlt	r3, #1
 800a990:	e7dd      	b.n	800a94e <_dtoa_r+0x266>
 800a992:	2301      	movs	r3, #1
 800a994:	e7f2      	b.n	800a97c <_dtoa_r+0x294>
 800a996:	bf00      	nop
 800a998:	636f4361 	.word	0x636f4361
 800a99c:	3fd287a7 	.word	0x3fd287a7
 800a9a0:	8b60c8b3 	.word	0x8b60c8b3
 800a9a4:	3fc68a28 	.word	0x3fc68a28
 800a9a8:	509f79fb 	.word	0x509f79fb
 800a9ac:	3fd34413 	.word	0x3fd34413
 800a9b0:	0800cb5d 	.word	0x0800cb5d
 800a9b4:	0800cb74 	.word	0x0800cb74
 800a9b8:	7ff00000 	.word	0x7ff00000
 800a9bc:	0800cb59 	.word	0x0800cb59
 800a9c0:	0800cb50 	.word	0x0800cb50
 800a9c4:	0800cb2d 	.word	0x0800cb2d
 800a9c8:	3ff80000 	.word	0x3ff80000
 800a9cc:	0800cc68 	.word	0x0800cc68
 800a9d0:	0800cbcf 	.word	0x0800cbcf
 800a9d4:	2401      	movs	r4, #1
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	940b      	str	r4, [sp, #44]	; 0x2c
 800a9da:	9322      	str	r3, [sp, #136]	; 0x88
 800a9dc:	f04f 39ff 	mov.w	r9, #4294967295
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	2312      	movs	r3, #18
 800a9e4:	f8cd 9020 	str.w	r9, [sp, #32]
 800a9e8:	9223      	str	r2, [sp, #140]	; 0x8c
 800a9ea:	e7b0      	b.n	800a94e <_dtoa_r+0x266>
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9f0:	e7f4      	b.n	800a9dc <_dtoa_r+0x2f4>
 800a9f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800a9f6:	464b      	mov	r3, r9
 800a9f8:	f8cd 9020 	str.w	r9, [sp, #32]
 800a9fc:	e7a7      	b.n	800a94e <_dtoa_r+0x266>
 800a9fe:	3101      	adds	r1, #1
 800aa00:	6041      	str	r1, [r0, #4]
 800aa02:	0052      	lsls	r2, r2, #1
 800aa04:	e7a7      	b.n	800a956 <_dtoa_r+0x26e>
 800aa06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa08:	9a03      	ldr	r2, [sp, #12]
 800aa0a:	601a      	str	r2, [r3, #0]
 800aa0c:	9b08      	ldr	r3, [sp, #32]
 800aa0e:	2b0e      	cmp	r3, #14
 800aa10:	f200 80a8 	bhi.w	800ab64 <_dtoa_r+0x47c>
 800aa14:	2c00      	cmp	r4, #0
 800aa16:	f000 80a5 	beq.w	800ab64 <_dtoa_r+0x47c>
 800aa1a:	f1ba 0f00 	cmp.w	sl, #0
 800aa1e:	dd34      	ble.n	800aa8a <_dtoa_r+0x3a2>
 800aa20:	4a9a      	ldr	r2, [pc, #616]	; (800ac8c <_dtoa_r+0x5a4>)
 800aa22:	f00a 030f 	and.w	r3, sl, #15
 800aa26:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa2a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aa2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aa36:	ea4f 142a 	mov.w	r4, sl, asr #4
 800aa3a:	d016      	beq.n	800aa6a <_dtoa_r+0x382>
 800aa3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa40:	4b93      	ldr	r3, [pc, #588]	; (800ac90 <_dtoa_r+0x5a8>)
 800aa42:	2703      	movs	r7, #3
 800aa44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa48:	f7f5 fe70 	bl	800072c <__aeabi_ddiv>
 800aa4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa50:	f004 040f 	and.w	r4, r4, #15
 800aa54:	4e8e      	ldr	r6, [pc, #568]	; (800ac90 <_dtoa_r+0x5a8>)
 800aa56:	b954      	cbnz	r4, 800aa6e <_dtoa_r+0x386>
 800aa58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa60:	f7f5 fe64 	bl	800072c <__aeabi_ddiv>
 800aa64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa68:	e029      	b.n	800aabe <_dtoa_r+0x3d6>
 800aa6a:	2702      	movs	r7, #2
 800aa6c:	e7f2      	b.n	800aa54 <_dtoa_r+0x36c>
 800aa6e:	07e1      	lsls	r1, r4, #31
 800aa70:	d508      	bpl.n	800aa84 <_dtoa_r+0x39c>
 800aa72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aa76:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa7a:	f7f5 fd2d 	bl	80004d8 <__aeabi_dmul>
 800aa7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aa82:	3701      	adds	r7, #1
 800aa84:	1064      	asrs	r4, r4, #1
 800aa86:	3608      	adds	r6, #8
 800aa88:	e7e5      	b.n	800aa56 <_dtoa_r+0x36e>
 800aa8a:	f000 80a5 	beq.w	800abd8 <_dtoa_r+0x4f0>
 800aa8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa92:	f1ca 0400 	rsb	r4, sl, #0
 800aa96:	4b7d      	ldr	r3, [pc, #500]	; (800ac8c <_dtoa_r+0x5a4>)
 800aa98:	f004 020f 	and.w	r2, r4, #15
 800aa9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa4:	f7f5 fd18 	bl	80004d8 <__aeabi_dmul>
 800aaa8:	2702      	movs	r7, #2
 800aaaa:	2300      	movs	r3, #0
 800aaac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aab0:	4e77      	ldr	r6, [pc, #476]	; (800ac90 <_dtoa_r+0x5a8>)
 800aab2:	1124      	asrs	r4, r4, #4
 800aab4:	2c00      	cmp	r4, #0
 800aab6:	f040 8084 	bne.w	800abc2 <_dtoa_r+0x4da>
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1d2      	bne.n	800aa64 <_dtoa_r+0x37c>
 800aabe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f000 808b 	beq.w	800abdc <_dtoa_r+0x4f4>
 800aac6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aaca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aace:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aad2:	2200      	movs	r2, #0
 800aad4:	4b6f      	ldr	r3, [pc, #444]	; (800ac94 <_dtoa_r+0x5ac>)
 800aad6:	f7f5 ff71 	bl	80009bc <__aeabi_dcmplt>
 800aada:	2800      	cmp	r0, #0
 800aadc:	d07e      	beq.n	800abdc <_dtoa_r+0x4f4>
 800aade:	9b08      	ldr	r3, [sp, #32]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d07b      	beq.n	800abdc <_dtoa_r+0x4f4>
 800aae4:	f1b9 0f00 	cmp.w	r9, #0
 800aae8:	dd38      	ble.n	800ab5c <_dtoa_r+0x474>
 800aaea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aaee:	2200      	movs	r2, #0
 800aaf0:	4b69      	ldr	r3, [pc, #420]	; (800ac98 <_dtoa_r+0x5b0>)
 800aaf2:	f7f5 fcf1 	bl	80004d8 <__aeabi_dmul>
 800aaf6:	464c      	mov	r4, r9
 800aaf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aafc:	f10a 38ff 	add.w	r8, sl, #4294967295
 800ab00:	3701      	adds	r7, #1
 800ab02:	4638      	mov	r0, r7
 800ab04:	f7f5 fc7e 	bl	8000404 <__aeabi_i2d>
 800ab08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab0c:	f7f5 fce4 	bl	80004d8 <__aeabi_dmul>
 800ab10:	2200      	movs	r2, #0
 800ab12:	4b62      	ldr	r3, [pc, #392]	; (800ac9c <_dtoa_r+0x5b4>)
 800ab14:	f7f5 fb2a 	bl	800016c <__adddf3>
 800ab18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ab1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ab20:	9611      	str	r6, [sp, #68]	; 0x44
 800ab22:	2c00      	cmp	r4, #0
 800ab24:	d15d      	bne.n	800abe2 <_dtoa_r+0x4fa>
 800ab26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	4b5c      	ldr	r3, [pc, #368]	; (800aca0 <_dtoa_r+0x5b8>)
 800ab2e:	f7f5 fb1b 	bl	8000168 <__aeabi_dsub>
 800ab32:	4602      	mov	r2, r0
 800ab34:	460b      	mov	r3, r1
 800ab36:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab3a:	4633      	mov	r3, r6
 800ab3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab3e:	f7f5 ff5b 	bl	80009f8 <__aeabi_dcmpgt>
 800ab42:	2800      	cmp	r0, #0
 800ab44:	f040 829c 	bne.w	800b080 <_dtoa_r+0x998>
 800ab48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab4e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ab52:	f7f5 ff33 	bl	80009bc <__aeabi_dcmplt>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	f040 8290 	bne.w	800b07c <_dtoa_r+0x994>
 800ab5c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ab60:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ab64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f2c0 8152 	blt.w	800ae10 <_dtoa_r+0x728>
 800ab6c:	f1ba 0f0e 	cmp.w	sl, #14
 800ab70:	f300 814e 	bgt.w	800ae10 <_dtoa_r+0x728>
 800ab74:	4b45      	ldr	r3, [pc, #276]	; (800ac8c <_dtoa_r+0x5a4>)
 800ab76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ab7e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ab82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f280 80db 	bge.w	800ad40 <_dtoa_r+0x658>
 800ab8a:	9b08      	ldr	r3, [sp, #32]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f300 80d7 	bgt.w	800ad40 <_dtoa_r+0x658>
 800ab92:	f040 8272 	bne.w	800b07a <_dtoa_r+0x992>
 800ab96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	4b40      	ldr	r3, [pc, #256]	; (800aca0 <_dtoa_r+0x5b8>)
 800ab9e:	f7f5 fc9b 	bl	80004d8 <__aeabi_dmul>
 800aba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aba6:	f7f5 ff1d 	bl	80009e4 <__aeabi_dcmpge>
 800abaa:	9c08      	ldr	r4, [sp, #32]
 800abac:	4626      	mov	r6, r4
 800abae:	2800      	cmp	r0, #0
 800abb0:	f040 8248 	bne.w	800b044 <_dtoa_r+0x95c>
 800abb4:	2331      	movs	r3, #49	; 0x31
 800abb6:	9f03      	ldr	r7, [sp, #12]
 800abb8:	f10a 0a01 	add.w	sl, sl, #1
 800abbc:	f807 3b01 	strb.w	r3, [r7], #1
 800abc0:	e244      	b.n	800b04c <_dtoa_r+0x964>
 800abc2:	07e2      	lsls	r2, r4, #31
 800abc4:	d505      	bpl.n	800abd2 <_dtoa_r+0x4ea>
 800abc6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800abca:	f7f5 fc85 	bl	80004d8 <__aeabi_dmul>
 800abce:	2301      	movs	r3, #1
 800abd0:	3701      	adds	r7, #1
 800abd2:	1064      	asrs	r4, r4, #1
 800abd4:	3608      	adds	r6, #8
 800abd6:	e76d      	b.n	800aab4 <_dtoa_r+0x3cc>
 800abd8:	2702      	movs	r7, #2
 800abda:	e770      	b.n	800aabe <_dtoa_r+0x3d6>
 800abdc:	46d0      	mov	r8, sl
 800abde:	9c08      	ldr	r4, [sp, #32]
 800abe0:	e78f      	b.n	800ab02 <_dtoa_r+0x41a>
 800abe2:	9903      	ldr	r1, [sp, #12]
 800abe4:	4b29      	ldr	r3, [pc, #164]	; (800ac8c <_dtoa_r+0x5a4>)
 800abe6:	4421      	add	r1, r4
 800abe8:	9112      	str	r1, [sp, #72]	; 0x48
 800abea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800abf0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800abf4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800abf8:	2900      	cmp	r1, #0
 800abfa:	d055      	beq.n	800aca8 <_dtoa_r+0x5c0>
 800abfc:	2000      	movs	r0, #0
 800abfe:	4929      	ldr	r1, [pc, #164]	; (800aca4 <_dtoa_r+0x5bc>)
 800ac00:	f7f5 fd94 	bl	800072c <__aeabi_ddiv>
 800ac04:	463b      	mov	r3, r7
 800ac06:	4632      	mov	r2, r6
 800ac08:	f7f5 faae 	bl	8000168 <__aeabi_dsub>
 800ac0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ac10:	9f03      	ldr	r7, [sp, #12]
 800ac12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac16:	f7f5 ff0f 	bl	8000a38 <__aeabi_d2iz>
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	f7f5 fbf2 	bl	8000404 <__aeabi_i2d>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac28:	f7f5 fa9e 	bl	8000168 <__aeabi_dsub>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	3430      	adds	r4, #48	; 0x30
 800ac32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac3a:	f807 4b01 	strb.w	r4, [r7], #1
 800ac3e:	f7f5 febd 	bl	80009bc <__aeabi_dcmplt>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d174      	bne.n	800ad30 <_dtoa_r+0x648>
 800ac46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	4911      	ldr	r1, [pc, #68]	; (800ac94 <_dtoa_r+0x5ac>)
 800ac4e:	f7f5 fa8b 	bl	8000168 <__aeabi_dsub>
 800ac52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac56:	f7f5 feb1 	bl	80009bc <__aeabi_dcmplt>
 800ac5a:	2800      	cmp	r0, #0
 800ac5c:	f040 80b7 	bne.w	800adce <_dtoa_r+0x6e6>
 800ac60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac62:	429f      	cmp	r7, r3
 800ac64:	f43f af7a 	beq.w	800ab5c <_dtoa_r+0x474>
 800ac68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	4b0a      	ldr	r3, [pc, #40]	; (800ac98 <_dtoa_r+0x5b0>)
 800ac70:	f7f5 fc32 	bl	80004d8 <__aeabi_dmul>
 800ac74:	2200      	movs	r2, #0
 800ac76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ac7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac7e:	4b06      	ldr	r3, [pc, #24]	; (800ac98 <_dtoa_r+0x5b0>)
 800ac80:	f7f5 fc2a 	bl	80004d8 <__aeabi_dmul>
 800ac84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac88:	e7c3      	b.n	800ac12 <_dtoa_r+0x52a>
 800ac8a:	bf00      	nop
 800ac8c:	0800cc68 	.word	0x0800cc68
 800ac90:	0800cc40 	.word	0x0800cc40
 800ac94:	3ff00000 	.word	0x3ff00000
 800ac98:	40240000 	.word	0x40240000
 800ac9c:	401c0000 	.word	0x401c0000
 800aca0:	40140000 	.word	0x40140000
 800aca4:	3fe00000 	.word	0x3fe00000
 800aca8:	4630      	mov	r0, r6
 800acaa:	4639      	mov	r1, r7
 800acac:	f7f5 fc14 	bl	80004d8 <__aeabi_dmul>
 800acb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acb2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800acb6:	9c03      	ldr	r4, [sp, #12]
 800acb8:	9314      	str	r3, [sp, #80]	; 0x50
 800acba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acbe:	f7f5 febb 	bl	8000a38 <__aeabi_d2iz>
 800acc2:	9015      	str	r0, [sp, #84]	; 0x54
 800acc4:	f7f5 fb9e 	bl	8000404 <__aeabi_i2d>
 800acc8:	4602      	mov	r2, r0
 800acca:	460b      	mov	r3, r1
 800accc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acd0:	f7f5 fa4a 	bl	8000168 <__aeabi_dsub>
 800acd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800acd6:	4606      	mov	r6, r0
 800acd8:	3330      	adds	r3, #48	; 0x30
 800acda:	f804 3b01 	strb.w	r3, [r4], #1
 800acde:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ace0:	460f      	mov	r7, r1
 800ace2:	429c      	cmp	r4, r3
 800ace4:	f04f 0200 	mov.w	r2, #0
 800ace8:	d124      	bne.n	800ad34 <_dtoa_r+0x64c>
 800acea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800acee:	4bb0      	ldr	r3, [pc, #704]	; (800afb0 <_dtoa_r+0x8c8>)
 800acf0:	f7f5 fa3c 	bl	800016c <__adddf3>
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	4630      	mov	r0, r6
 800acfa:	4639      	mov	r1, r7
 800acfc:	f7f5 fe7c 	bl	80009f8 <__aeabi_dcmpgt>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d163      	bne.n	800adcc <_dtoa_r+0x6e4>
 800ad04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ad08:	2000      	movs	r0, #0
 800ad0a:	49a9      	ldr	r1, [pc, #676]	; (800afb0 <_dtoa_r+0x8c8>)
 800ad0c:	f7f5 fa2c 	bl	8000168 <__aeabi_dsub>
 800ad10:	4602      	mov	r2, r0
 800ad12:	460b      	mov	r3, r1
 800ad14:	4630      	mov	r0, r6
 800ad16:	4639      	mov	r1, r7
 800ad18:	f7f5 fe50 	bl	80009bc <__aeabi_dcmplt>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	f43f af1d 	beq.w	800ab5c <_dtoa_r+0x474>
 800ad22:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ad24:	1e7b      	subs	r3, r7, #1
 800ad26:	9314      	str	r3, [sp, #80]	; 0x50
 800ad28:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ad2c:	2b30      	cmp	r3, #48	; 0x30
 800ad2e:	d0f8      	beq.n	800ad22 <_dtoa_r+0x63a>
 800ad30:	46c2      	mov	sl, r8
 800ad32:	e03b      	b.n	800adac <_dtoa_r+0x6c4>
 800ad34:	4b9f      	ldr	r3, [pc, #636]	; (800afb4 <_dtoa_r+0x8cc>)
 800ad36:	f7f5 fbcf 	bl	80004d8 <__aeabi_dmul>
 800ad3a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad3e:	e7bc      	b.n	800acba <_dtoa_r+0x5d2>
 800ad40:	9f03      	ldr	r7, [sp, #12]
 800ad42:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ad46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad4a:	4640      	mov	r0, r8
 800ad4c:	4649      	mov	r1, r9
 800ad4e:	f7f5 fced 	bl	800072c <__aeabi_ddiv>
 800ad52:	f7f5 fe71 	bl	8000a38 <__aeabi_d2iz>
 800ad56:	4604      	mov	r4, r0
 800ad58:	f7f5 fb54 	bl	8000404 <__aeabi_i2d>
 800ad5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad60:	f7f5 fbba 	bl	80004d8 <__aeabi_dmul>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	4640      	mov	r0, r8
 800ad6a:	4649      	mov	r1, r9
 800ad6c:	f7f5 f9fc 	bl	8000168 <__aeabi_dsub>
 800ad70:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ad74:	f807 6b01 	strb.w	r6, [r7], #1
 800ad78:	9e03      	ldr	r6, [sp, #12]
 800ad7a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ad7e:	1bbe      	subs	r6, r7, r6
 800ad80:	45b4      	cmp	ip, r6
 800ad82:	4602      	mov	r2, r0
 800ad84:	460b      	mov	r3, r1
 800ad86:	d136      	bne.n	800adf6 <_dtoa_r+0x70e>
 800ad88:	f7f5 f9f0 	bl	800016c <__adddf3>
 800ad8c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad90:	4680      	mov	r8, r0
 800ad92:	4689      	mov	r9, r1
 800ad94:	f7f5 fe30 	bl	80009f8 <__aeabi_dcmpgt>
 800ad98:	bb58      	cbnz	r0, 800adf2 <_dtoa_r+0x70a>
 800ad9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad9e:	4640      	mov	r0, r8
 800ada0:	4649      	mov	r1, r9
 800ada2:	f7f5 fe01 	bl	80009a8 <__aeabi_dcmpeq>
 800ada6:	b108      	cbz	r0, 800adac <_dtoa_r+0x6c4>
 800ada8:	07e1      	lsls	r1, r4, #31
 800adaa:	d422      	bmi.n	800adf2 <_dtoa_r+0x70a>
 800adac:	4628      	mov	r0, r5
 800adae:	4659      	mov	r1, fp
 800adb0:	f000 faf0 	bl	800b394 <_Bfree>
 800adb4:	2300      	movs	r3, #0
 800adb6:	703b      	strb	r3, [r7, #0]
 800adb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800adba:	f10a 0001 	add.w	r0, sl, #1
 800adbe:	6018      	str	r0, [r3, #0]
 800adc0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f43f acde 	beq.w	800a784 <_dtoa_r+0x9c>
 800adc8:	601f      	str	r7, [r3, #0]
 800adca:	e4db      	b.n	800a784 <_dtoa_r+0x9c>
 800adcc:	4627      	mov	r7, r4
 800adce:	463b      	mov	r3, r7
 800add0:	461f      	mov	r7, r3
 800add2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800add6:	2a39      	cmp	r2, #57	; 0x39
 800add8:	d107      	bne.n	800adea <_dtoa_r+0x702>
 800adda:	9a03      	ldr	r2, [sp, #12]
 800addc:	429a      	cmp	r2, r3
 800adde:	d1f7      	bne.n	800add0 <_dtoa_r+0x6e8>
 800ade0:	2230      	movs	r2, #48	; 0x30
 800ade2:	9903      	ldr	r1, [sp, #12]
 800ade4:	f108 0801 	add.w	r8, r8, #1
 800ade8:	700a      	strb	r2, [r1, #0]
 800adea:	781a      	ldrb	r2, [r3, #0]
 800adec:	3201      	adds	r2, #1
 800adee:	701a      	strb	r2, [r3, #0]
 800adf0:	e79e      	b.n	800ad30 <_dtoa_r+0x648>
 800adf2:	46d0      	mov	r8, sl
 800adf4:	e7eb      	b.n	800adce <_dtoa_r+0x6e6>
 800adf6:	2200      	movs	r2, #0
 800adf8:	4b6e      	ldr	r3, [pc, #440]	; (800afb4 <_dtoa_r+0x8cc>)
 800adfa:	f7f5 fb6d 	bl	80004d8 <__aeabi_dmul>
 800adfe:	2200      	movs	r2, #0
 800ae00:	2300      	movs	r3, #0
 800ae02:	4680      	mov	r8, r0
 800ae04:	4689      	mov	r9, r1
 800ae06:	f7f5 fdcf 	bl	80009a8 <__aeabi_dcmpeq>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d09b      	beq.n	800ad46 <_dtoa_r+0x65e>
 800ae0e:	e7cd      	b.n	800adac <_dtoa_r+0x6c4>
 800ae10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae12:	2a00      	cmp	r2, #0
 800ae14:	f000 80d0 	beq.w	800afb8 <_dtoa_r+0x8d0>
 800ae18:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ae1a:	2a01      	cmp	r2, #1
 800ae1c:	f300 80ae 	bgt.w	800af7c <_dtoa_r+0x894>
 800ae20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae22:	2a00      	cmp	r2, #0
 800ae24:	f000 80a6 	beq.w	800af74 <_dtoa_r+0x88c>
 800ae28:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ae2e:	9f06      	ldr	r7, [sp, #24]
 800ae30:	9a06      	ldr	r2, [sp, #24]
 800ae32:	2101      	movs	r1, #1
 800ae34:	441a      	add	r2, r3
 800ae36:	9206      	str	r2, [sp, #24]
 800ae38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	441a      	add	r2, r3
 800ae3e:	9209      	str	r2, [sp, #36]	; 0x24
 800ae40:	f000 fb5e 	bl	800b500 <__i2b>
 800ae44:	4606      	mov	r6, r0
 800ae46:	2f00      	cmp	r7, #0
 800ae48:	dd0c      	ble.n	800ae64 <_dtoa_r+0x77c>
 800ae4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	dd09      	ble.n	800ae64 <_dtoa_r+0x77c>
 800ae50:	42bb      	cmp	r3, r7
 800ae52:	bfa8      	it	ge
 800ae54:	463b      	movge	r3, r7
 800ae56:	9a06      	ldr	r2, [sp, #24]
 800ae58:	1aff      	subs	r7, r7, r3
 800ae5a:	1ad2      	subs	r2, r2, r3
 800ae5c:	9206      	str	r2, [sp, #24]
 800ae5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	9309      	str	r3, [sp, #36]	; 0x24
 800ae64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae66:	b1f3      	cbz	r3, 800aea6 <_dtoa_r+0x7be>
 800ae68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f000 80a8 	beq.w	800afc0 <_dtoa_r+0x8d8>
 800ae70:	2c00      	cmp	r4, #0
 800ae72:	dd10      	ble.n	800ae96 <_dtoa_r+0x7ae>
 800ae74:	4631      	mov	r1, r6
 800ae76:	4622      	mov	r2, r4
 800ae78:	4628      	mov	r0, r5
 800ae7a:	f000 fbff 	bl	800b67c <__pow5mult>
 800ae7e:	465a      	mov	r2, fp
 800ae80:	4601      	mov	r1, r0
 800ae82:	4606      	mov	r6, r0
 800ae84:	4628      	mov	r0, r5
 800ae86:	f000 fb51 	bl	800b52c <__multiply>
 800ae8a:	4680      	mov	r8, r0
 800ae8c:	4659      	mov	r1, fp
 800ae8e:	4628      	mov	r0, r5
 800ae90:	f000 fa80 	bl	800b394 <_Bfree>
 800ae94:	46c3      	mov	fp, r8
 800ae96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae98:	1b1a      	subs	r2, r3, r4
 800ae9a:	d004      	beq.n	800aea6 <_dtoa_r+0x7be>
 800ae9c:	4659      	mov	r1, fp
 800ae9e:	4628      	mov	r0, r5
 800aea0:	f000 fbec 	bl	800b67c <__pow5mult>
 800aea4:	4683      	mov	fp, r0
 800aea6:	2101      	movs	r1, #1
 800aea8:	4628      	mov	r0, r5
 800aeaa:	f000 fb29 	bl	800b500 <__i2b>
 800aeae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f340 8086 	ble.w	800afc4 <_dtoa_r+0x8dc>
 800aeb8:	461a      	mov	r2, r3
 800aeba:	4601      	mov	r1, r0
 800aebc:	4628      	mov	r0, r5
 800aebe:	f000 fbdd 	bl	800b67c <__pow5mult>
 800aec2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aec4:	4604      	mov	r4, r0
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	dd7f      	ble.n	800afca <_dtoa_r+0x8e2>
 800aeca:	f04f 0800 	mov.w	r8, #0
 800aece:	6923      	ldr	r3, [r4, #16]
 800aed0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aed4:	6918      	ldr	r0, [r3, #16]
 800aed6:	f000 fac5 	bl	800b464 <__hi0bits>
 800aeda:	f1c0 0020 	rsb	r0, r0, #32
 800aede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee0:	4418      	add	r0, r3
 800aee2:	f010 001f 	ands.w	r0, r0, #31
 800aee6:	f000 8092 	beq.w	800b00e <_dtoa_r+0x926>
 800aeea:	f1c0 0320 	rsb	r3, r0, #32
 800aeee:	2b04      	cmp	r3, #4
 800aef0:	f340 808a 	ble.w	800b008 <_dtoa_r+0x920>
 800aef4:	f1c0 001c 	rsb	r0, r0, #28
 800aef8:	9b06      	ldr	r3, [sp, #24]
 800aefa:	4407      	add	r7, r0
 800aefc:	4403      	add	r3, r0
 800aefe:	9306      	str	r3, [sp, #24]
 800af00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af02:	4403      	add	r3, r0
 800af04:	9309      	str	r3, [sp, #36]	; 0x24
 800af06:	9b06      	ldr	r3, [sp, #24]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	dd05      	ble.n	800af18 <_dtoa_r+0x830>
 800af0c:	4659      	mov	r1, fp
 800af0e:	461a      	mov	r2, r3
 800af10:	4628      	mov	r0, r5
 800af12:	f000 fc0d 	bl	800b730 <__lshift>
 800af16:	4683      	mov	fp, r0
 800af18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	dd05      	ble.n	800af2a <_dtoa_r+0x842>
 800af1e:	4621      	mov	r1, r4
 800af20:	461a      	mov	r2, r3
 800af22:	4628      	mov	r0, r5
 800af24:	f000 fc04 	bl	800b730 <__lshift>
 800af28:	4604      	mov	r4, r0
 800af2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d070      	beq.n	800b012 <_dtoa_r+0x92a>
 800af30:	4621      	mov	r1, r4
 800af32:	4658      	mov	r0, fp
 800af34:	f000 fc6c 	bl	800b810 <__mcmp>
 800af38:	2800      	cmp	r0, #0
 800af3a:	da6a      	bge.n	800b012 <_dtoa_r+0x92a>
 800af3c:	2300      	movs	r3, #0
 800af3e:	4659      	mov	r1, fp
 800af40:	220a      	movs	r2, #10
 800af42:	4628      	mov	r0, r5
 800af44:	f000 fa48 	bl	800b3d8 <__multadd>
 800af48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af4a:	4683      	mov	fp, r0
 800af4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 8194 	beq.w	800b27e <_dtoa_r+0xb96>
 800af56:	4631      	mov	r1, r6
 800af58:	2300      	movs	r3, #0
 800af5a:	220a      	movs	r2, #10
 800af5c:	4628      	mov	r0, r5
 800af5e:	f000 fa3b 	bl	800b3d8 <__multadd>
 800af62:	f1b9 0f00 	cmp.w	r9, #0
 800af66:	4606      	mov	r6, r0
 800af68:	f300 8093 	bgt.w	800b092 <_dtoa_r+0x9aa>
 800af6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800af6e:	2b02      	cmp	r3, #2
 800af70:	dc57      	bgt.n	800b022 <_dtoa_r+0x93a>
 800af72:	e08e      	b.n	800b092 <_dtoa_r+0x9aa>
 800af74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800af76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af7a:	e757      	b.n	800ae2c <_dtoa_r+0x744>
 800af7c:	9b08      	ldr	r3, [sp, #32]
 800af7e:	1e5c      	subs	r4, r3, #1
 800af80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af82:	42a3      	cmp	r3, r4
 800af84:	bfb7      	itett	lt
 800af86:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800af88:	1b1c      	subge	r4, r3, r4
 800af8a:	1ae2      	sublt	r2, r4, r3
 800af8c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800af8e:	bfbe      	ittt	lt
 800af90:	940a      	strlt	r4, [sp, #40]	; 0x28
 800af92:	189b      	addlt	r3, r3, r2
 800af94:	930e      	strlt	r3, [sp, #56]	; 0x38
 800af96:	9b08      	ldr	r3, [sp, #32]
 800af98:	bfb8      	it	lt
 800af9a:	2400      	movlt	r4, #0
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	bfbb      	ittet	lt
 800afa0:	9b06      	ldrlt	r3, [sp, #24]
 800afa2:	9a08      	ldrlt	r2, [sp, #32]
 800afa4:	9f06      	ldrge	r7, [sp, #24]
 800afa6:	1a9f      	sublt	r7, r3, r2
 800afa8:	bfac      	ite	ge
 800afaa:	9b08      	ldrge	r3, [sp, #32]
 800afac:	2300      	movlt	r3, #0
 800afae:	e73f      	b.n	800ae30 <_dtoa_r+0x748>
 800afb0:	3fe00000 	.word	0x3fe00000
 800afb4:	40240000 	.word	0x40240000
 800afb8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800afba:	9f06      	ldr	r7, [sp, #24]
 800afbc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800afbe:	e742      	b.n	800ae46 <_dtoa_r+0x75e>
 800afc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afc2:	e76b      	b.n	800ae9c <_dtoa_r+0x7b4>
 800afc4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800afc6:	2b01      	cmp	r3, #1
 800afc8:	dc19      	bgt.n	800affe <_dtoa_r+0x916>
 800afca:	9b04      	ldr	r3, [sp, #16]
 800afcc:	b9bb      	cbnz	r3, 800affe <_dtoa_r+0x916>
 800afce:	9b05      	ldr	r3, [sp, #20]
 800afd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afd4:	b99b      	cbnz	r3, 800affe <_dtoa_r+0x916>
 800afd6:	9b05      	ldr	r3, [sp, #20]
 800afd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afdc:	0d1b      	lsrs	r3, r3, #20
 800afde:	051b      	lsls	r3, r3, #20
 800afe0:	b183      	cbz	r3, 800b004 <_dtoa_r+0x91c>
 800afe2:	f04f 0801 	mov.w	r8, #1
 800afe6:	9b06      	ldr	r3, [sp, #24]
 800afe8:	3301      	adds	r3, #1
 800afea:	9306      	str	r3, [sp, #24]
 800afec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afee:	3301      	adds	r3, #1
 800aff0:	9309      	str	r3, [sp, #36]	; 0x24
 800aff2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f47f af6a 	bne.w	800aece <_dtoa_r+0x7e6>
 800affa:	2001      	movs	r0, #1
 800affc:	e76f      	b.n	800aede <_dtoa_r+0x7f6>
 800affe:	f04f 0800 	mov.w	r8, #0
 800b002:	e7f6      	b.n	800aff2 <_dtoa_r+0x90a>
 800b004:	4698      	mov	r8, r3
 800b006:	e7f4      	b.n	800aff2 <_dtoa_r+0x90a>
 800b008:	f43f af7d 	beq.w	800af06 <_dtoa_r+0x81e>
 800b00c:	4618      	mov	r0, r3
 800b00e:	301c      	adds	r0, #28
 800b010:	e772      	b.n	800aef8 <_dtoa_r+0x810>
 800b012:	9b08      	ldr	r3, [sp, #32]
 800b014:	2b00      	cmp	r3, #0
 800b016:	dc36      	bgt.n	800b086 <_dtoa_r+0x99e>
 800b018:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	dd33      	ble.n	800b086 <_dtoa_r+0x99e>
 800b01e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b022:	f1b9 0f00 	cmp.w	r9, #0
 800b026:	d10d      	bne.n	800b044 <_dtoa_r+0x95c>
 800b028:	4621      	mov	r1, r4
 800b02a:	464b      	mov	r3, r9
 800b02c:	2205      	movs	r2, #5
 800b02e:	4628      	mov	r0, r5
 800b030:	f000 f9d2 	bl	800b3d8 <__multadd>
 800b034:	4601      	mov	r1, r0
 800b036:	4604      	mov	r4, r0
 800b038:	4658      	mov	r0, fp
 800b03a:	f000 fbe9 	bl	800b810 <__mcmp>
 800b03e:	2800      	cmp	r0, #0
 800b040:	f73f adb8 	bgt.w	800abb4 <_dtoa_r+0x4cc>
 800b044:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b046:	9f03      	ldr	r7, [sp, #12]
 800b048:	ea6f 0a03 	mvn.w	sl, r3
 800b04c:	f04f 0800 	mov.w	r8, #0
 800b050:	4621      	mov	r1, r4
 800b052:	4628      	mov	r0, r5
 800b054:	f000 f99e 	bl	800b394 <_Bfree>
 800b058:	2e00      	cmp	r6, #0
 800b05a:	f43f aea7 	beq.w	800adac <_dtoa_r+0x6c4>
 800b05e:	f1b8 0f00 	cmp.w	r8, #0
 800b062:	d005      	beq.n	800b070 <_dtoa_r+0x988>
 800b064:	45b0      	cmp	r8, r6
 800b066:	d003      	beq.n	800b070 <_dtoa_r+0x988>
 800b068:	4641      	mov	r1, r8
 800b06a:	4628      	mov	r0, r5
 800b06c:	f000 f992 	bl	800b394 <_Bfree>
 800b070:	4631      	mov	r1, r6
 800b072:	4628      	mov	r0, r5
 800b074:	f000 f98e 	bl	800b394 <_Bfree>
 800b078:	e698      	b.n	800adac <_dtoa_r+0x6c4>
 800b07a:	2400      	movs	r4, #0
 800b07c:	4626      	mov	r6, r4
 800b07e:	e7e1      	b.n	800b044 <_dtoa_r+0x95c>
 800b080:	46c2      	mov	sl, r8
 800b082:	4626      	mov	r6, r4
 800b084:	e596      	b.n	800abb4 <_dtoa_r+0x4cc>
 800b086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b088:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f000 80fd 	beq.w	800b28c <_dtoa_r+0xba4>
 800b092:	2f00      	cmp	r7, #0
 800b094:	dd05      	ble.n	800b0a2 <_dtoa_r+0x9ba>
 800b096:	4631      	mov	r1, r6
 800b098:	463a      	mov	r2, r7
 800b09a:	4628      	mov	r0, r5
 800b09c:	f000 fb48 	bl	800b730 <__lshift>
 800b0a0:	4606      	mov	r6, r0
 800b0a2:	f1b8 0f00 	cmp.w	r8, #0
 800b0a6:	d05c      	beq.n	800b162 <_dtoa_r+0xa7a>
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	6871      	ldr	r1, [r6, #4]
 800b0ac:	f000 f932 	bl	800b314 <_Balloc>
 800b0b0:	4607      	mov	r7, r0
 800b0b2:	b928      	cbnz	r0, 800b0c0 <_dtoa_r+0x9d8>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b0ba:	4b7f      	ldr	r3, [pc, #508]	; (800b2b8 <_dtoa_r+0xbd0>)
 800b0bc:	f7ff bb28 	b.w	800a710 <_dtoa_r+0x28>
 800b0c0:	6932      	ldr	r2, [r6, #16]
 800b0c2:	f106 010c 	add.w	r1, r6, #12
 800b0c6:	3202      	adds	r2, #2
 800b0c8:	0092      	lsls	r2, r2, #2
 800b0ca:	300c      	adds	r0, #12
 800b0cc:	f000 f914 	bl	800b2f8 <memcpy>
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	4639      	mov	r1, r7
 800b0d4:	4628      	mov	r0, r5
 800b0d6:	f000 fb2b 	bl	800b730 <__lshift>
 800b0da:	46b0      	mov	r8, r6
 800b0dc:	4606      	mov	r6, r0
 800b0de:	9b03      	ldr	r3, [sp, #12]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	9308      	str	r3, [sp, #32]
 800b0e4:	9b03      	ldr	r3, [sp, #12]
 800b0e6:	444b      	add	r3, r9
 800b0e8:	930a      	str	r3, [sp, #40]	; 0x28
 800b0ea:	9b04      	ldr	r3, [sp, #16]
 800b0ec:	f003 0301 	and.w	r3, r3, #1
 800b0f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0f2:	9b08      	ldr	r3, [sp, #32]
 800b0f4:	4621      	mov	r1, r4
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	4658      	mov	r0, fp
 800b0fa:	9304      	str	r3, [sp, #16]
 800b0fc:	f7ff fa66 	bl	800a5cc <quorem>
 800b100:	4603      	mov	r3, r0
 800b102:	4641      	mov	r1, r8
 800b104:	3330      	adds	r3, #48	; 0x30
 800b106:	9006      	str	r0, [sp, #24]
 800b108:	4658      	mov	r0, fp
 800b10a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b10c:	f000 fb80 	bl	800b810 <__mcmp>
 800b110:	4632      	mov	r2, r6
 800b112:	4681      	mov	r9, r0
 800b114:	4621      	mov	r1, r4
 800b116:	4628      	mov	r0, r5
 800b118:	f000 fb96 	bl	800b848 <__mdiff>
 800b11c:	68c2      	ldr	r2, [r0, #12]
 800b11e:	4607      	mov	r7, r0
 800b120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b122:	bb02      	cbnz	r2, 800b166 <_dtoa_r+0xa7e>
 800b124:	4601      	mov	r1, r0
 800b126:	4658      	mov	r0, fp
 800b128:	f000 fb72 	bl	800b810 <__mcmp>
 800b12c:	4602      	mov	r2, r0
 800b12e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b130:	4639      	mov	r1, r7
 800b132:	4628      	mov	r0, r5
 800b134:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b138:	f000 f92c 	bl	800b394 <_Bfree>
 800b13c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b13e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b140:	9f08      	ldr	r7, [sp, #32]
 800b142:	ea43 0102 	orr.w	r1, r3, r2
 800b146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b148:	430b      	orrs	r3, r1
 800b14a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b14c:	d10d      	bne.n	800b16a <_dtoa_r+0xa82>
 800b14e:	2b39      	cmp	r3, #57	; 0x39
 800b150:	d029      	beq.n	800b1a6 <_dtoa_r+0xabe>
 800b152:	f1b9 0f00 	cmp.w	r9, #0
 800b156:	dd01      	ble.n	800b15c <_dtoa_r+0xa74>
 800b158:	9b06      	ldr	r3, [sp, #24]
 800b15a:	3331      	adds	r3, #49	; 0x31
 800b15c:	9a04      	ldr	r2, [sp, #16]
 800b15e:	7013      	strb	r3, [r2, #0]
 800b160:	e776      	b.n	800b050 <_dtoa_r+0x968>
 800b162:	4630      	mov	r0, r6
 800b164:	e7b9      	b.n	800b0da <_dtoa_r+0x9f2>
 800b166:	2201      	movs	r2, #1
 800b168:	e7e2      	b.n	800b130 <_dtoa_r+0xa48>
 800b16a:	f1b9 0f00 	cmp.w	r9, #0
 800b16e:	db06      	blt.n	800b17e <_dtoa_r+0xa96>
 800b170:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b172:	ea41 0909 	orr.w	r9, r1, r9
 800b176:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b178:	ea59 0101 	orrs.w	r1, r9, r1
 800b17c:	d120      	bne.n	800b1c0 <_dtoa_r+0xad8>
 800b17e:	2a00      	cmp	r2, #0
 800b180:	ddec      	ble.n	800b15c <_dtoa_r+0xa74>
 800b182:	4659      	mov	r1, fp
 800b184:	2201      	movs	r2, #1
 800b186:	4628      	mov	r0, r5
 800b188:	9308      	str	r3, [sp, #32]
 800b18a:	f000 fad1 	bl	800b730 <__lshift>
 800b18e:	4621      	mov	r1, r4
 800b190:	4683      	mov	fp, r0
 800b192:	f000 fb3d 	bl	800b810 <__mcmp>
 800b196:	2800      	cmp	r0, #0
 800b198:	9b08      	ldr	r3, [sp, #32]
 800b19a:	dc02      	bgt.n	800b1a2 <_dtoa_r+0xaba>
 800b19c:	d1de      	bne.n	800b15c <_dtoa_r+0xa74>
 800b19e:	07da      	lsls	r2, r3, #31
 800b1a0:	d5dc      	bpl.n	800b15c <_dtoa_r+0xa74>
 800b1a2:	2b39      	cmp	r3, #57	; 0x39
 800b1a4:	d1d8      	bne.n	800b158 <_dtoa_r+0xa70>
 800b1a6:	2339      	movs	r3, #57	; 0x39
 800b1a8:	9a04      	ldr	r2, [sp, #16]
 800b1aa:	7013      	strb	r3, [r2, #0]
 800b1ac:	463b      	mov	r3, r7
 800b1ae:	461f      	mov	r7, r3
 800b1b0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	2a39      	cmp	r2, #57	; 0x39
 800b1b8:	d050      	beq.n	800b25c <_dtoa_r+0xb74>
 800b1ba:	3201      	adds	r2, #1
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	e747      	b.n	800b050 <_dtoa_r+0x968>
 800b1c0:	2a00      	cmp	r2, #0
 800b1c2:	dd03      	ble.n	800b1cc <_dtoa_r+0xae4>
 800b1c4:	2b39      	cmp	r3, #57	; 0x39
 800b1c6:	d0ee      	beq.n	800b1a6 <_dtoa_r+0xabe>
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	e7c7      	b.n	800b15c <_dtoa_r+0xa74>
 800b1cc:	9a08      	ldr	r2, [sp, #32]
 800b1ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b1d0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b1d4:	428a      	cmp	r2, r1
 800b1d6:	d02a      	beq.n	800b22e <_dtoa_r+0xb46>
 800b1d8:	4659      	mov	r1, fp
 800b1da:	2300      	movs	r3, #0
 800b1dc:	220a      	movs	r2, #10
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f000 f8fa 	bl	800b3d8 <__multadd>
 800b1e4:	45b0      	cmp	r8, r6
 800b1e6:	4683      	mov	fp, r0
 800b1e8:	f04f 0300 	mov.w	r3, #0
 800b1ec:	f04f 020a 	mov.w	r2, #10
 800b1f0:	4641      	mov	r1, r8
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	d107      	bne.n	800b206 <_dtoa_r+0xb1e>
 800b1f6:	f000 f8ef 	bl	800b3d8 <__multadd>
 800b1fa:	4680      	mov	r8, r0
 800b1fc:	4606      	mov	r6, r0
 800b1fe:	9b08      	ldr	r3, [sp, #32]
 800b200:	3301      	adds	r3, #1
 800b202:	9308      	str	r3, [sp, #32]
 800b204:	e775      	b.n	800b0f2 <_dtoa_r+0xa0a>
 800b206:	f000 f8e7 	bl	800b3d8 <__multadd>
 800b20a:	4631      	mov	r1, r6
 800b20c:	4680      	mov	r8, r0
 800b20e:	2300      	movs	r3, #0
 800b210:	220a      	movs	r2, #10
 800b212:	4628      	mov	r0, r5
 800b214:	f000 f8e0 	bl	800b3d8 <__multadd>
 800b218:	4606      	mov	r6, r0
 800b21a:	e7f0      	b.n	800b1fe <_dtoa_r+0xb16>
 800b21c:	f1b9 0f00 	cmp.w	r9, #0
 800b220:	bfcc      	ite	gt
 800b222:	464f      	movgt	r7, r9
 800b224:	2701      	movle	r7, #1
 800b226:	f04f 0800 	mov.w	r8, #0
 800b22a:	9a03      	ldr	r2, [sp, #12]
 800b22c:	4417      	add	r7, r2
 800b22e:	4659      	mov	r1, fp
 800b230:	2201      	movs	r2, #1
 800b232:	4628      	mov	r0, r5
 800b234:	9308      	str	r3, [sp, #32]
 800b236:	f000 fa7b 	bl	800b730 <__lshift>
 800b23a:	4621      	mov	r1, r4
 800b23c:	4683      	mov	fp, r0
 800b23e:	f000 fae7 	bl	800b810 <__mcmp>
 800b242:	2800      	cmp	r0, #0
 800b244:	dcb2      	bgt.n	800b1ac <_dtoa_r+0xac4>
 800b246:	d102      	bne.n	800b24e <_dtoa_r+0xb66>
 800b248:	9b08      	ldr	r3, [sp, #32]
 800b24a:	07db      	lsls	r3, r3, #31
 800b24c:	d4ae      	bmi.n	800b1ac <_dtoa_r+0xac4>
 800b24e:	463b      	mov	r3, r7
 800b250:	461f      	mov	r7, r3
 800b252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b256:	2a30      	cmp	r2, #48	; 0x30
 800b258:	d0fa      	beq.n	800b250 <_dtoa_r+0xb68>
 800b25a:	e6f9      	b.n	800b050 <_dtoa_r+0x968>
 800b25c:	9a03      	ldr	r2, [sp, #12]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d1a5      	bne.n	800b1ae <_dtoa_r+0xac6>
 800b262:	2331      	movs	r3, #49	; 0x31
 800b264:	f10a 0a01 	add.w	sl, sl, #1
 800b268:	e779      	b.n	800b15e <_dtoa_r+0xa76>
 800b26a:	4b14      	ldr	r3, [pc, #80]	; (800b2bc <_dtoa_r+0xbd4>)
 800b26c:	f7ff baa8 	b.w	800a7c0 <_dtoa_r+0xd8>
 800b270:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b272:	2b00      	cmp	r3, #0
 800b274:	f47f aa81 	bne.w	800a77a <_dtoa_r+0x92>
 800b278:	4b11      	ldr	r3, [pc, #68]	; (800b2c0 <_dtoa_r+0xbd8>)
 800b27a:	f7ff baa1 	b.w	800a7c0 <_dtoa_r+0xd8>
 800b27e:	f1b9 0f00 	cmp.w	r9, #0
 800b282:	dc03      	bgt.n	800b28c <_dtoa_r+0xba4>
 800b284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b286:	2b02      	cmp	r3, #2
 800b288:	f73f aecb 	bgt.w	800b022 <_dtoa_r+0x93a>
 800b28c:	9f03      	ldr	r7, [sp, #12]
 800b28e:	4621      	mov	r1, r4
 800b290:	4658      	mov	r0, fp
 800b292:	f7ff f99b 	bl	800a5cc <quorem>
 800b296:	9a03      	ldr	r2, [sp, #12]
 800b298:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b29c:	f807 3b01 	strb.w	r3, [r7], #1
 800b2a0:	1aba      	subs	r2, r7, r2
 800b2a2:	4591      	cmp	r9, r2
 800b2a4:	ddba      	ble.n	800b21c <_dtoa_r+0xb34>
 800b2a6:	4659      	mov	r1, fp
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	220a      	movs	r2, #10
 800b2ac:	4628      	mov	r0, r5
 800b2ae:	f000 f893 	bl	800b3d8 <__multadd>
 800b2b2:	4683      	mov	fp, r0
 800b2b4:	e7eb      	b.n	800b28e <_dtoa_r+0xba6>
 800b2b6:	bf00      	nop
 800b2b8:	0800cbcf 	.word	0x0800cbcf
 800b2bc:	0800cb2c 	.word	0x0800cb2c
 800b2c0:	0800cb50 	.word	0x0800cb50

0800b2c4 <_localeconv_r>:
 800b2c4:	4800      	ldr	r0, [pc, #0]	; (800b2c8 <_localeconv_r+0x4>)
 800b2c6:	4770      	bx	lr
 800b2c8:	200002d0 	.word	0x200002d0

0800b2cc <malloc>:
 800b2cc:	4b02      	ldr	r3, [pc, #8]	; (800b2d8 <malloc+0xc>)
 800b2ce:	4601      	mov	r1, r0
 800b2d0:	6818      	ldr	r0, [r3, #0]
 800b2d2:	f000 bc1d 	b.w	800bb10 <_malloc_r>
 800b2d6:	bf00      	nop
 800b2d8:	2000017c 	.word	0x2000017c

0800b2dc <memchr>:
 800b2dc:	4603      	mov	r3, r0
 800b2de:	b510      	push	{r4, lr}
 800b2e0:	b2c9      	uxtb	r1, r1
 800b2e2:	4402      	add	r2, r0
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	d101      	bne.n	800b2ee <memchr+0x12>
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	e003      	b.n	800b2f6 <memchr+0x1a>
 800b2ee:	7804      	ldrb	r4, [r0, #0]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	428c      	cmp	r4, r1
 800b2f4:	d1f6      	bne.n	800b2e4 <memchr+0x8>
 800b2f6:	bd10      	pop	{r4, pc}

0800b2f8 <memcpy>:
 800b2f8:	440a      	add	r2, r1
 800b2fa:	4291      	cmp	r1, r2
 800b2fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b300:	d100      	bne.n	800b304 <memcpy+0xc>
 800b302:	4770      	bx	lr
 800b304:	b510      	push	{r4, lr}
 800b306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b30a:	4291      	cmp	r1, r2
 800b30c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b310:	d1f9      	bne.n	800b306 <memcpy+0xe>
 800b312:	bd10      	pop	{r4, pc}

0800b314 <_Balloc>:
 800b314:	b570      	push	{r4, r5, r6, lr}
 800b316:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b318:	4604      	mov	r4, r0
 800b31a:	460d      	mov	r5, r1
 800b31c:	b976      	cbnz	r6, 800b33c <_Balloc+0x28>
 800b31e:	2010      	movs	r0, #16
 800b320:	f7ff ffd4 	bl	800b2cc <malloc>
 800b324:	4602      	mov	r2, r0
 800b326:	6260      	str	r0, [r4, #36]	; 0x24
 800b328:	b920      	cbnz	r0, 800b334 <_Balloc+0x20>
 800b32a:	2166      	movs	r1, #102	; 0x66
 800b32c:	4b17      	ldr	r3, [pc, #92]	; (800b38c <_Balloc+0x78>)
 800b32e:	4818      	ldr	r0, [pc, #96]	; (800b390 <_Balloc+0x7c>)
 800b330:	f000 fdce 	bl	800bed0 <__assert_func>
 800b334:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b338:	6006      	str	r6, [r0, #0]
 800b33a:	60c6      	str	r6, [r0, #12]
 800b33c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b33e:	68f3      	ldr	r3, [r6, #12]
 800b340:	b183      	cbz	r3, 800b364 <_Balloc+0x50>
 800b342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b34a:	b9b8      	cbnz	r0, 800b37c <_Balloc+0x68>
 800b34c:	2101      	movs	r1, #1
 800b34e:	fa01 f605 	lsl.w	r6, r1, r5
 800b352:	1d72      	adds	r2, r6, #5
 800b354:	4620      	mov	r0, r4
 800b356:	0092      	lsls	r2, r2, #2
 800b358:	f000 fb5e 	bl	800ba18 <_calloc_r>
 800b35c:	b160      	cbz	r0, 800b378 <_Balloc+0x64>
 800b35e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b362:	e00e      	b.n	800b382 <_Balloc+0x6e>
 800b364:	2221      	movs	r2, #33	; 0x21
 800b366:	2104      	movs	r1, #4
 800b368:	4620      	mov	r0, r4
 800b36a:	f000 fb55 	bl	800ba18 <_calloc_r>
 800b36e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b370:	60f0      	str	r0, [r6, #12]
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d1e4      	bne.n	800b342 <_Balloc+0x2e>
 800b378:	2000      	movs	r0, #0
 800b37a:	bd70      	pop	{r4, r5, r6, pc}
 800b37c:	6802      	ldr	r2, [r0, #0]
 800b37e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b382:	2300      	movs	r3, #0
 800b384:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b388:	e7f7      	b.n	800b37a <_Balloc+0x66>
 800b38a:	bf00      	nop
 800b38c:	0800cb5d 	.word	0x0800cb5d
 800b390:	0800cbe0 	.word	0x0800cbe0

0800b394 <_Bfree>:
 800b394:	b570      	push	{r4, r5, r6, lr}
 800b396:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b398:	4605      	mov	r5, r0
 800b39a:	460c      	mov	r4, r1
 800b39c:	b976      	cbnz	r6, 800b3bc <_Bfree+0x28>
 800b39e:	2010      	movs	r0, #16
 800b3a0:	f7ff ff94 	bl	800b2cc <malloc>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	6268      	str	r0, [r5, #36]	; 0x24
 800b3a8:	b920      	cbnz	r0, 800b3b4 <_Bfree+0x20>
 800b3aa:	218a      	movs	r1, #138	; 0x8a
 800b3ac:	4b08      	ldr	r3, [pc, #32]	; (800b3d0 <_Bfree+0x3c>)
 800b3ae:	4809      	ldr	r0, [pc, #36]	; (800b3d4 <_Bfree+0x40>)
 800b3b0:	f000 fd8e 	bl	800bed0 <__assert_func>
 800b3b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3b8:	6006      	str	r6, [r0, #0]
 800b3ba:	60c6      	str	r6, [r0, #12]
 800b3bc:	b13c      	cbz	r4, 800b3ce <_Bfree+0x3a>
 800b3be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b3c0:	6862      	ldr	r2, [r4, #4]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3c8:	6021      	str	r1, [r4, #0]
 800b3ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3ce:	bd70      	pop	{r4, r5, r6, pc}
 800b3d0:	0800cb5d 	.word	0x0800cb5d
 800b3d4:	0800cbe0 	.word	0x0800cbe0

0800b3d8 <__multadd>:
 800b3d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3dc:	4607      	mov	r7, r0
 800b3de:	460c      	mov	r4, r1
 800b3e0:	461e      	mov	r6, r3
 800b3e2:	2000      	movs	r0, #0
 800b3e4:	690d      	ldr	r5, [r1, #16]
 800b3e6:	f101 0c14 	add.w	ip, r1, #20
 800b3ea:	f8dc 3000 	ldr.w	r3, [ip]
 800b3ee:	3001      	adds	r0, #1
 800b3f0:	b299      	uxth	r1, r3
 800b3f2:	fb02 6101 	mla	r1, r2, r1, r6
 800b3f6:	0c1e      	lsrs	r6, r3, #16
 800b3f8:	0c0b      	lsrs	r3, r1, #16
 800b3fa:	fb02 3306 	mla	r3, r2, r6, r3
 800b3fe:	b289      	uxth	r1, r1
 800b400:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b404:	4285      	cmp	r5, r0
 800b406:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b40a:	f84c 1b04 	str.w	r1, [ip], #4
 800b40e:	dcec      	bgt.n	800b3ea <__multadd+0x12>
 800b410:	b30e      	cbz	r6, 800b456 <__multadd+0x7e>
 800b412:	68a3      	ldr	r3, [r4, #8]
 800b414:	42ab      	cmp	r3, r5
 800b416:	dc19      	bgt.n	800b44c <__multadd+0x74>
 800b418:	6861      	ldr	r1, [r4, #4]
 800b41a:	4638      	mov	r0, r7
 800b41c:	3101      	adds	r1, #1
 800b41e:	f7ff ff79 	bl	800b314 <_Balloc>
 800b422:	4680      	mov	r8, r0
 800b424:	b928      	cbnz	r0, 800b432 <__multadd+0x5a>
 800b426:	4602      	mov	r2, r0
 800b428:	21b5      	movs	r1, #181	; 0xb5
 800b42a:	4b0c      	ldr	r3, [pc, #48]	; (800b45c <__multadd+0x84>)
 800b42c:	480c      	ldr	r0, [pc, #48]	; (800b460 <__multadd+0x88>)
 800b42e:	f000 fd4f 	bl	800bed0 <__assert_func>
 800b432:	6922      	ldr	r2, [r4, #16]
 800b434:	f104 010c 	add.w	r1, r4, #12
 800b438:	3202      	adds	r2, #2
 800b43a:	0092      	lsls	r2, r2, #2
 800b43c:	300c      	adds	r0, #12
 800b43e:	f7ff ff5b 	bl	800b2f8 <memcpy>
 800b442:	4621      	mov	r1, r4
 800b444:	4638      	mov	r0, r7
 800b446:	f7ff ffa5 	bl	800b394 <_Bfree>
 800b44a:	4644      	mov	r4, r8
 800b44c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b450:	3501      	adds	r5, #1
 800b452:	615e      	str	r6, [r3, #20]
 800b454:	6125      	str	r5, [r4, #16]
 800b456:	4620      	mov	r0, r4
 800b458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b45c:	0800cbcf 	.word	0x0800cbcf
 800b460:	0800cbe0 	.word	0x0800cbe0

0800b464 <__hi0bits>:
 800b464:	0c02      	lsrs	r2, r0, #16
 800b466:	0412      	lsls	r2, r2, #16
 800b468:	4603      	mov	r3, r0
 800b46a:	b9ca      	cbnz	r2, 800b4a0 <__hi0bits+0x3c>
 800b46c:	0403      	lsls	r3, r0, #16
 800b46e:	2010      	movs	r0, #16
 800b470:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b474:	bf04      	itt	eq
 800b476:	021b      	lsleq	r3, r3, #8
 800b478:	3008      	addeq	r0, #8
 800b47a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b47e:	bf04      	itt	eq
 800b480:	011b      	lsleq	r3, r3, #4
 800b482:	3004      	addeq	r0, #4
 800b484:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b488:	bf04      	itt	eq
 800b48a:	009b      	lsleq	r3, r3, #2
 800b48c:	3002      	addeq	r0, #2
 800b48e:	2b00      	cmp	r3, #0
 800b490:	db05      	blt.n	800b49e <__hi0bits+0x3a>
 800b492:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b496:	f100 0001 	add.w	r0, r0, #1
 800b49a:	bf08      	it	eq
 800b49c:	2020      	moveq	r0, #32
 800b49e:	4770      	bx	lr
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	e7e5      	b.n	800b470 <__hi0bits+0xc>

0800b4a4 <__lo0bits>:
 800b4a4:	6803      	ldr	r3, [r0, #0]
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	f013 0007 	ands.w	r0, r3, #7
 800b4ac:	d00b      	beq.n	800b4c6 <__lo0bits+0x22>
 800b4ae:	07d9      	lsls	r1, r3, #31
 800b4b0:	d421      	bmi.n	800b4f6 <__lo0bits+0x52>
 800b4b2:	0798      	lsls	r0, r3, #30
 800b4b4:	bf49      	itett	mi
 800b4b6:	085b      	lsrmi	r3, r3, #1
 800b4b8:	089b      	lsrpl	r3, r3, #2
 800b4ba:	2001      	movmi	r0, #1
 800b4bc:	6013      	strmi	r3, [r2, #0]
 800b4be:	bf5c      	itt	pl
 800b4c0:	2002      	movpl	r0, #2
 800b4c2:	6013      	strpl	r3, [r2, #0]
 800b4c4:	4770      	bx	lr
 800b4c6:	b299      	uxth	r1, r3
 800b4c8:	b909      	cbnz	r1, 800b4ce <__lo0bits+0x2a>
 800b4ca:	2010      	movs	r0, #16
 800b4cc:	0c1b      	lsrs	r3, r3, #16
 800b4ce:	b2d9      	uxtb	r1, r3
 800b4d0:	b909      	cbnz	r1, 800b4d6 <__lo0bits+0x32>
 800b4d2:	3008      	adds	r0, #8
 800b4d4:	0a1b      	lsrs	r3, r3, #8
 800b4d6:	0719      	lsls	r1, r3, #28
 800b4d8:	bf04      	itt	eq
 800b4da:	091b      	lsreq	r3, r3, #4
 800b4dc:	3004      	addeq	r0, #4
 800b4de:	0799      	lsls	r1, r3, #30
 800b4e0:	bf04      	itt	eq
 800b4e2:	089b      	lsreq	r3, r3, #2
 800b4e4:	3002      	addeq	r0, #2
 800b4e6:	07d9      	lsls	r1, r3, #31
 800b4e8:	d403      	bmi.n	800b4f2 <__lo0bits+0x4e>
 800b4ea:	085b      	lsrs	r3, r3, #1
 800b4ec:	f100 0001 	add.w	r0, r0, #1
 800b4f0:	d003      	beq.n	800b4fa <__lo0bits+0x56>
 800b4f2:	6013      	str	r3, [r2, #0]
 800b4f4:	4770      	bx	lr
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	4770      	bx	lr
 800b4fa:	2020      	movs	r0, #32
 800b4fc:	4770      	bx	lr
	...

0800b500 <__i2b>:
 800b500:	b510      	push	{r4, lr}
 800b502:	460c      	mov	r4, r1
 800b504:	2101      	movs	r1, #1
 800b506:	f7ff ff05 	bl	800b314 <_Balloc>
 800b50a:	4602      	mov	r2, r0
 800b50c:	b928      	cbnz	r0, 800b51a <__i2b+0x1a>
 800b50e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b512:	4b04      	ldr	r3, [pc, #16]	; (800b524 <__i2b+0x24>)
 800b514:	4804      	ldr	r0, [pc, #16]	; (800b528 <__i2b+0x28>)
 800b516:	f000 fcdb 	bl	800bed0 <__assert_func>
 800b51a:	2301      	movs	r3, #1
 800b51c:	6144      	str	r4, [r0, #20]
 800b51e:	6103      	str	r3, [r0, #16]
 800b520:	bd10      	pop	{r4, pc}
 800b522:	bf00      	nop
 800b524:	0800cbcf 	.word	0x0800cbcf
 800b528:	0800cbe0 	.word	0x0800cbe0

0800b52c <__multiply>:
 800b52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b530:	4691      	mov	r9, r2
 800b532:	690a      	ldr	r2, [r1, #16]
 800b534:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b538:	460c      	mov	r4, r1
 800b53a:	429a      	cmp	r2, r3
 800b53c:	bfbe      	ittt	lt
 800b53e:	460b      	movlt	r3, r1
 800b540:	464c      	movlt	r4, r9
 800b542:	4699      	movlt	r9, r3
 800b544:	6927      	ldr	r7, [r4, #16]
 800b546:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b54a:	68a3      	ldr	r3, [r4, #8]
 800b54c:	6861      	ldr	r1, [r4, #4]
 800b54e:	eb07 060a 	add.w	r6, r7, sl
 800b552:	42b3      	cmp	r3, r6
 800b554:	b085      	sub	sp, #20
 800b556:	bfb8      	it	lt
 800b558:	3101      	addlt	r1, #1
 800b55a:	f7ff fedb 	bl	800b314 <_Balloc>
 800b55e:	b930      	cbnz	r0, 800b56e <__multiply+0x42>
 800b560:	4602      	mov	r2, r0
 800b562:	f240 115d 	movw	r1, #349	; 0x15d
 800b566:	4b43      	ldr	r3, [pc, #268]	; (800b674 <__multiply+0x148>)
 800b568:	4843      	ldr	r0, [pc, #268]	; (800b678 <__multiply+0x14c>)
 800b56a:	f000 fcb1 	bl	800bed0 <__assert_func>
 800b56e:	f100 0514 	add.w	r5, r0, #20
 800b572:	462b      	mov	r3, r5
 800b574:	2200      	movs	r2, #0
 800b576:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b57a:	4543      	cmp	r3, r8
 800b57c:	d321      	bcc.n	800b5c2 <__multiply+0x96>
 800b57e:	f104 0314 	add.w	r3, r4, #20
 800b582:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b586:	f109 0314 	add.w	r3, r9, #20
 800b58a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b58e:	9202      	str	r2, [sp, #8]
 800b590:	1b3a      	subs	r2, r7, r4
 800b592:	3a15      	subs	r2, #21
 800b594:	f022 0203 	bic.w	r2, r2, #3
 800b598:	3204      	adds	r2, #4
 800b59a:	f104 0115 	add.w	r1, r4, #21
 800b59e:	428f      	cmp	r7, r1
 800b5a0:	bf38      	it	cc
 800b5a2:	2204      	movcc	r2, #4
 800b5a4:	9201      	str	r2, [sp, #4]
 800b5a6:	9a02      	ldr	r2, [sp, #8]
 800b5a8:	9303      	str	r3, [sp, #12]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d80c      	bhi.n	800b5c8 <__multiply+0x9c>
 800b5ae:	2e00      	cmp	r6, #0
 800b5b0:	dd03      	ble.n	800b5ba <__multiply+0x8e>
 800b5b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d059      	beq.n	800b66e <__multiply+0x142>
 800b5ba:	6106      	str	r6, [r0, #16]
 800b5bc:	b005      	add	sp, #20
 800b5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c2:	f843 2b04 	str.w	r2, [r3], #4
 800b5c6:	e7d8      	b.n	800b57a <__multiply+0x4e>
 800b5c8:	f8b3 a000 	ldrh.w	sl, [r3]
 800b5cc:	f1ba 0f00 	cmp.w	sl, #0
 800b5d0:	d023      	beq.n	800b61a <__multiply+0xee>
 800b5d2:	46a9      	mov	r9, r5
 800b5d4:	f04f 0c00 	mov.w	ip, #0
 800b5d8:	f104 0e14 	add.w	lr, r4, #20
 800b5dc:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b5e0:	f8d9 1000 	ldr.w	r1, [r9]
 800b5e4:	fa1f fb82 	uxth.w	fp, r2
 800b5e8:	b289      	uxth	r1, r1
 800b5ea:	fb0a 110b 	mla	r1, sl, fp, r1
 800b5ee:	4461      	add	r1, ip
 800b5f0:	f8d9 c000 	ldr.w	ip, [r9]
 800b5f4:	0c12      	lsrs	r2, r2, #16
 800b5f6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b5fa:	fb0a c202 	mla	r2, sl, r2, ip
 800b5fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b602:	b289      	uxth	r1, r1
 800b604:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b608:	4577      	cmp	r7, lr
 800b60a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b60e:	f849 1b04 	str.w	r1, [r9], #4
 800b612:	d8e3      	bhi.n	800b5dc <__multiply+0xb0>
 800b614:	9a01      	ldr	r2, [sp, #4]
 800b616:	f845 c002 	str.w	ip, [r5, r2]
 800b61a:	9a03      	ldr	r2, [sp, #12]
 800b61c:	3304      	adds	r3, #4
 800b61e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b622:	f1b9 0f00 	cmp.w	r9, #0
 800b626:	d020      	beq.n	800b66a <__multiply+0x13e>
 800b628:	46ae      	mov	lr, r5
 800b62a:	f04f 0a00 	mov.w	sl, #0
 800b62e:	6829      	ldr	r1, [r5, #0]
 800b630:	f104 0c14 	add.w	ip, r4, #20
 800b634:	f8bc b000 	ldrh.w	fp, [ip]
 800b638:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b63c:	b289      	uxth	r1, r1
 800b63e:	fb09 220b 	mla	r2, r9, fp, r2
 800b642:	4492      	add	sl, r2
 800b644:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b648:	f84e 1b04 	str.w	r1, [lr], #4
 800b64c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b650:	f8be 1000 	ldrh.w	r1, [lr]
 800b654:	0c12      	lsrs	r2, r2, #16
 800b656:	fb09 1102 	mla	r1, r9, r2, r1
 800b65a:	4567      	cmp	r7, ip
 800b65c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b660:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b664:	d8e6      	bhi.n	800b634 <__multiply+0x108>
 800b666:	9a01      	ldr	r2, [sp, #4]
 800b668:	50a9      	str	r1, [r5, r2]
 800b66a:	3504      	adds	r5, #4
 800b66c:	e79b      	b.n	800b5a6 <__multiply+0x7a>
 800b66e:	3e01      	subs	r6, #1
 800b670:	e79d      	b.n	800b5ae <__multiply+0x82>
 800b672:	bf00      	nop
 800b674:	0800cbcf 	.word	0x0800cbcf
 800b678:	0800cbe0 	.word	0x0800cbe0

0800b67c <__pow5mult>:
 800b67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b680:	4615      	mov	r5, r2
 800b682:	f012 0203 	ands.w	r2, r2, #3
 800b686:	4606      	mov	r6, r0
 800b688:	460f      	mov	r7, r1
 800b68a:	d007      	beq.n	800b69c <__pow5mult+0x20>
 800b68c:	4c25      	ldr	r4, [pc, #148]	; (800b724 <__pow5mult+0xa8>)
 800b68e:	3a01      	subs	r2, #1
 800b690:	2300      	movs	r3, #0
 800b692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b696:	f7ff fe9f 	bl	800b3d8 <__multadd>
 800b69a:	4607      	mov	r7, r0
 800b69c:	10ad      	asrs	r5, r5, #2
 800b69e:	d03d      	beq.n	800b71c <__pow5mult+0xa0>
 800b6a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b6a2:	b97c      	cbnz	r4, 800b6c4 <__pow5mult+0x48>
 800b6a4:	2010      	movs	r0, #16
 800b6a6:	f7ff fe11 	bl	800b2cc <malloc>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	6270      	str	r0, [r6, #36]	; 0x24
 800b6ae:	b928      	cbnz	r0, 800b6bc <__pow5mult+0x40>
 800b6b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b6b4:	4b1c      	ldr	r3, [pc, #112]	; (800b728 <__pow5mult+0xac>)
 800b6b6:	481d      	ldr	r0, [pc, #116]	; (800b72c <__pow5mult+0xb0>)
 800b6b8:	f000 fc0a 	bl	800bed0 <__assert_func>
 800b6bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6c0:	6004      	str	r4, [r0, #0]
 800b6c2:	60c4      	str	r4, [r0, #12]
 800b6c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b6c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6cc:	b94c      	cbnz	r4, 800b6e2 <__pow5mult+0x66>
 800b6ce:	f240 2171 	movw	r1, #625	; 0x271
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	f7ff ff14 	bl	800b500 <__i2b>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	4604      	mov	r4, r0
 800b6dc:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6e0:	6003      	str	r3, [r0, #0]
 800b6e2:	f04f 0900 	mov.w	r9, #0
 800b6e6:	07eb      	lsls	r3, r5, #31
 800b6e8:	d50a      	bpl.n	800b700 <__pow5mult+0x84>
 800b6ea:	4639      	mov	r1, r7
 800b6ec:	4622      	mov	r2, r4
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	f7ff ff1c 	bl	800b52c <__multiply>
 800b6f4:	4680      	mov	r8, r0
 800b6f6:	4639      	mov	r1, r7
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	f7ff fe4b 	bl	800b394 <_Bfree>
 800b6fe:	4647      	mov	r7, r8
 800b700:	106d      	asrs	r5, r5, #1
 800b702:	d00b      	beq.n	800b71c <__pow5mult+0xa0>
 800b704:	6820      	ldr	r0, [r4, #0]
 800b706:	b938      	cbnz	r0, 800b718 <__pow5mult+0x9c>
 800b708:	4622      	mov	r2, r4
 800b70a:	4621      	mov	r1, r4
 800b70c:	4630      	mov	r0, r6
 800b70e:	f7ff ff0d 	bl	800b52c <__multiply>
 800b712:	6020      	str	r0, [r4, #0]
 800b714:	f8c0 9000 	str.w	r9, [r0]
 800b718:	4604      	mov	r4, r0
 800b71a:	e7e4      	b.n	800b6e6 <__pow5mult+0x6a>
 800b71c:	4638      	mov	r0, r7
 800b71e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b722:	bf00      	nop
 800b724:	0800cd30 	.word	0x0800cd30
 800b728:	0800cb5d 	.word	0x0800cb5d
 800b72c:	0800cbe0 	.word	0x0800cbe0

0800b730 <__lshift>:
 800b730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b734:	460c      	mov	r4, r1
 800b736:	4607      	mov	r7, r0
 800b738:	4691      	mov	r9, r2
 800b73a:	6923      	ldr	r3, [r4, #16]
 800b73c:	6849      	ldr	r1, [r1, #4]
 800b73e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b742:	68a3      	ldr	r3, [r4, #8]
 800b744:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b748:	f108 0601 	add.w	r6, r8, #1
 800b74c:	42b3      	cmp	r3, r6
 800b74e:	db0b      	blt.n	800b768 <__lshift+0x38>
 800b750:	4638      	mov	r0, r7
 800b752:	f7ff fddf 	bl	800b314 <_Balloc>
 800b756:	4605      	mov	r5, r0
 800b758:	b948      	cbnz	r0, 800b76e <__lshift+0x3e>
 800b75a:	4602      	mov	r2, r0
 800b75c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b760:	4b29      	ldr	r3, [pc, #164]	; (800b808 <__lshift+0xd8>)
 800b762:	482a      	ldr	r0, [pc, #168]	; (800b80c <__lshift+0xdc>)
 800b764:	f000 fbb4 	bl	800bed0 <__assert_func>
 800b768:	3101      	adds	r1, #1
 800b76a:	005b      	lsls	r3, r3, #1
 800b76c:	e7ee      	b.n	800b74c <__lshift+0x1c>
 800b76e:	2300      	movs	r3, #0
 800b770:	f100 0114 	add.w	r1, r0, #20
 800b774:	f100 0210 	add.w	r2, r0, #16
 800b778:	4618      	mov	r0, r3
 800b77a:	4553      	cmp	r3, sl
 800b77c:	db37      	blt.n	800b7ee <__lshift+0xbe>
 800b77e:	6920      	ldr	r0, [r4, #16]
 800b780:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b784:	f104 0314 	add.w	r3, r4, #20
 800b788:	f019 091f 	ands.w	r9, r9, #31
 800b78c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b790:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b794:	d02f      	beq.n	800b7f6 <__lshift+0xc6>
 800b796:	468a      	mov	sl, r1
 800b798:	f04f 0c00 	mov.w	ip, #0
 800b79c:	f1c9 0e20 	rsb	lr, r9, #32
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	fa02 f209 	lsl.w	r2, r2, r9
 800b7a6:	ea42 020c 	orr.w	r2, r2, ip
 800b7aa:	f84a 2b04 	str.w	r2, [sl], #4
 800b7ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7b2:	4298      	cmp	r0, r3
 800b7b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b7b8:	d8f2      	bhi.n	800b7a0 <__lshift+0x70>
 800b7ba:	1b03      	subs	r3, r0, r4
 800b7bc:	3b15      	subs	r3, #21
 800b7be:	f023 0303 	bic.w	r3, r3, #3
 800b7c2:	3304      	adds	r3, #4
 800b7c4:	f104 0215 	add.w	r2, r4, #21
 800b7c8:	4290      	cmp	r0, r2
 800b7ca:	bf38      	it	cc
 800b7cc:	2304      	movcc	r3, #4
 800b7ce:	f841 c003 	str.w	ip, [r1, r3]
 800b7d2:	f1bc 0f00 	cmp.w	ip, #0
 800b7d6:	d001      	beq.n	800b7dc <__lshift+0xac>
 800b7d8:	f108 0602 	add.w	r6, r8, #2
 800b7dc:	3e01      	subs	r6, #1
 800b7de:	4638      	mov	r0, r7
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	612e      	str	r6, [r5, #16]
 800b7e4:	f7ff fdd6 	bl	800b394 <_Bfree>
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	e7c1      	b.n	800b77a <__lshift+0x4a>
 800b7f6:	3904      	subs	r1, #4
 800b7f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7fc:	4298      	cmp	r0, r3
 800b7fe:	f841 2f04 	str.w	r2, [r1, #4]!
 800b802:	d8f9      	bhi.n	800b7f8 <__lshift+0xc8>
 800b804:	e7ea      	b.n	800b7dc <__lshift+0xac>
 800b806:	bf00      	nop
 800b808:	0800cbcf 	.word	0x0800cbcf
 800b80c:	0800cbe0 	.word	0x0800cbe0

0800b810 <__mcmp>:
 800b810:	4603      	mov	r3, r0
 800b812:	690a      	ldr	r2, [r1, #16]
 800b814:	6900      	ldr	r0, [r0, #16]
 800b816:	b530      	push	{r4, r5, lr}
 800b818:	1a80      	subs	r0, r0, r2
 800b81a:	d10d      	bne.n	800b838 <__mcmp+0x28>
 800b81c:	3314      	adds	r3, #20
 800b81e:	3114      	adds	r1, #20
 800b820:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b824:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b828:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b82c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b830:	4295      	cmp	r5, r2
 800b832:	d002      	beq.n	800b83a <__mcmp+0x2a>
 800b834:	d304      	bcc.n	800b840 <__mcmp+0x30>
 800b836:	2001      	movs	r0, #1
 800b838:	bd30      	pop	{r4, r5, pc}
 800b83a:	42a3      	cmp	r3, r4
 800b83c:	d3f4      	bcc.n	800b828 <__mcmp+0x18>
 800b83e:	e7fb      	b.n	800b838 <__mcmp+0x28>
 800b840:	f04f 30ff 	mov.w	r0, #4294967295
 800b844:	e7f8      	b.n	800b838 <__mcmp+0x28>
	...

0800b848 <__mdiff>:
 800b848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	460d      	mov	r5, r1
 800b84e:	4607      	mov	r7, r0
 800b850:	4611      	mov	r1, r2
 800b852:	4628      	mov	r0, r5
 800b854:	4614      	mov	r4, r2
 800b856:	f7ff ffdb 	bl	800b810 <__mcmp>
 800b85a:	1e06      	subs	r6, r0, #0
 800b85c:	d111      	bne.n	800b882 <__mdiff+0x3a>
 800b85e:	4631      	mov	r1, r6
 800b860:	4638      	mov	r0, r7
 800b862:	f7ff fd57 	bl	800b314 <_Balloc>
 800b866:	4602      	mov	r2, r0
 800b868:	b928      	cbnz	r0, 800b876 <__mdiff+0x2e>
 800b86a:	f240 2132 	movw	r1, #562	; 0x232
 800b86e:	4b3a      	ldr	r3, [pc, #232]	; (800b958 <__mdiff+0x110>)
 800b870:	483a      	ldr	r0, [pc, #232]	; (800b95c <__mdiff+0x114>)
 800b872:	f000 fb2d 	bl	800bed0 <__assert_func>
 800b876:	2301      	movs	r3, #1
 800b878:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b87c:	4610      	mov	r0, r2
 800b87e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b882:	bfa4      	itt	ge
 800b884:	4623      	movge	r3, r4
 800b886:	462c      	movge	r4, r5
 800b888:	4638      	mov	r0, r7
 800b88a:	6861      	ldr	r1, [r4, #4]
 800b88c:	bfa6      	itte	ge
 800b88e:	461d      	movge	r5, r3
 800b890:	2600      	movge	r6, #0
 800b892:	2601      	movlt	r6, #1
 800b894:	f7ff fd3e 	bl	800b314 <_Balloc>
 800b898:	4602      	mov	r2, r0
 800b89a:	b918      	cbnz	r0, 800b8a4 <__mdiff+0x5c>
 800b89c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b8a0:	4b2d      	ldr	r3, [pc, #180]	; (800b958 <__mdiff+0x110>)
 800b8a2:	e7e5      	b.n	800b870 <__mdiff+0x28>
 800b8a4:	f102 0814 	add.w	r8, r2, #20
 800b8a8:	46c2      	mov	sl, r8
 800b8aa:	f04f 0c00 	mov.w	ip, #0
 800b8ae:	6927      	ldr	r7, [r4, #16]
 800b8b0:	60c6      	str	r6, [r0, #12]
 800b8b2:	692e      	ldr	r6, [r5, #16]
 800b8b4:	f104 0014 	add.w	r0, r4, #20
 800b8b8:	f105 0914 	add.w	r9, r5, #20
 800b8bc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b8c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b8c4:	3410      	adds	r4, #16
 800b8c6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b8ca:	f859 3b04 	ldr.w	r3, [r9], #4
 800b8ce:	fa1f f18b 	uxth.w	r1, fp
 800b8d2:	448c      	add	ip, r1
 800b8d4:	b299      	uxth	r1, r3
 800b8d6:	0c1b      	lsrs	r3, r3, #16
 800b8d8:	ebac 0101 	sub.w	r1, ip, r1
 800b8dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b8e0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b8e4:	b289      	uxth	r1, r1
 800b8e6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b8ea:	454e      	cmp	r6, r9
 800b8ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b8f0:	f84a 3b04 	str.w	r3, [sl], #4
 800b8f4:	d8e7      	bhi.n	800b8c6 <__mdiff+0x7e>
 800b8f6:	1b73      	subs	r3, r6, r5
 800b8f8:	3b15      	subs	r3, #21
 800b8fa:	f023 0303 	bic.w	r3, r3, #3
 800b8fe:	3515      	adds	r5, #21
 800b900:	3304      	adds	r3, #4
 800b902:	42ae      	cmp	r6, r5
 800b904:	bf38      	it	cc
 800b906:	2304      	movcc	r3, #4
 800b908:	4418      	add	r0, r3
 800b90a:	4443      	add	r3, r8
 800b90c:	461e      	mov	r6, r3
 800b90e:	4605      	mov	r5, r0
 800b910:	4575      	cmp	r5, lr
 800b912:	d30e      	bcc.n	800b932 <__mdiff+0xea>
 800b914:	f10e 0103 	add.w	r1, lr, #3
 800b918:	1a09      	subs	r1, r1, r0
 800b91a:	f021 0103 	bic.w	r1, r1, #3
 800b91e:	3803      	subs	r0, #3
 800b920:	4586      	cmp	lr, r0
 800b922:	bf38      	it	cc
 800b924:	2100      	movcc	r1, #0
 800b926:	4419      	add	r1, r3
 800b928:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b92c:	b18b      	cbz	r3, 800b952 <__mdiff+0x10a>
 800b92e:	6117      	str	r7, [r2, #16]
 800b930:	e7a4      	b.n	800b87c <__mdiff+0x34>
 800b932:	f855 8b04 	ldr.w	r8, [r5], #4
 800b936:	fa1f f188 	uxth.w	r1, r8
 800b93a:	4461      	add	r1, ip
 800b93c:	140c      	asrs	r4, r1, #16
 800b93e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b942:	b289      	uxth	r1, r1
 800b944:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b948:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b94c:	f846 1b04 	str.w	r1, [r6], #4
 800b950:	e7de      	b.n	800b910 <__mdiff+0xc8>
 800b952:	3f01      	subs	r7, #1
 800b954:	e7e8      	b.n	800b928 <__mdiff+0xe0>
 800b956:	bf00      	nop
 800b958:	0800cbcf 	.word	0x0800cbcf
 800b95c:	0800cbe0 	.word	0x0800cbe0

0800b960 <__d2b>:
 800b960:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b964:	2101      	movs	r1, #1
 800b966:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b96a:	4690      	mov	r8, r2
 800b96c:	461d      	mov	r5, r3
 800b96e:	f7ff fcd1 	bl	800b314 <_Balloc>
 800b972:	4604      	mov	r4, r0
 800b974:	b930      	cbnz	r0, 800b984 <__d2b+0x24>
 800b976:	4602      	mov	r2, r0
 800b978:	f240 310a 	movw	r1, #778	; 0x30a
 800b97c:	4b24      	ldr	r3, [pc, #144]	; (800ba10 <__d2b+0xb0>)
 800b97e:	4825      	ldr	r0, [pc, #148]	; (800ba14 <__d2b+0xb4>)
 800b980:	f000 faa6 	bl	800bed0 <__assert_func>
 800b984:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b988:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b98c:	bb2d      	cbnz	r5, 800b9da <__d2b+0x7a>
 800b98e:	9301      	str	r3, [sp, #4]
 800b990:	f1b8 0300 	subs.w	r3, r8, #0
 800b994:	d026      	beq.n	800b9e4 <__d2b+0x84>
 800b996:	4668      	mov	r0, sp
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	f7ff fd83 	bl	800b4a4 <__lo0bits>
 800b99e:	9900      	ldr	r1, [sp, #0]
 800b9a0:	b1f0      	cbz	r0, 800b9e0 <__d2b+0x80>
 800b9a2:	9a01      	ldr	r2, [sp, #4]
 800b9a4:	f1c0 0320 	rsb	r3, r0, #32
 800b9a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ac:	430b      	orrs	r3, r1
 800b9ae:	40c2      	lsrs	r2, r0
 800b9b0:	6163      	str	r3, [r4, #20]
 800b9b2:	9201      	str	r2, [sp, #4]
 800b9b4:	9b01      	ldr	r3, [sp, #4]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	bf14      	ite	ne
 800b9ba:	2102      	movne	r1, #2
 800b9bc:	2101      	moveq	r1, #1
 800b9be:	61a3      	str	r3, [r4, #24]
 800b9c0:	6121      	str	r1, [r4, #16]
 800b9c2:	b1c5      	cbz	r5, 800b9f6 <__d2b+0x96>
 800b9c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b9c8:	4405      	add	r5, r0
 800b9ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b9ce:	603d      	str	r5, [r7, #0]
 800b9d0:	6030      	str	r0, [r6, #0]
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	b002      	add	sp, #8
 800b9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b9de:	e7d6      	b.n	800b98e <__d2b+0x2e>
 800b9e0:	6161      	str	r1, [r4, #20]
 800b9e2:	e7e7      	b.n	800b9b4 <__d2b+0x54>
 800b9e4:	a801      	add	r0, sp, #4
 800b9e6:	f7ff fd5d 	bl	800b4a4 <__lo0bits>
 800b9ea:	2101      	movs	r1, #1
 800b9ec:	9b01      	ldr	r3, [sp, #4]
 800b9ee:	6121      	str	r1, [r4, #16]
 800b9f0:	6163      	str	r3, [r4, #20]
 800b9f2:	3020      	adds	r0, #32
 800b9f4:	e7e5      	b.n	800b9c2 <__d2b+0x62>
 800b9f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b9fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b9fe:	6038      	str	r0, [r7, #0]
 800ba00:	6918      	ldr	r0, [r3, #16]
 800ba02:	f7ff fd2f 	bl	800b464 <__hi0bits>
 800ba06:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800ba0a:	6031      	str	r1, [r6, #0]
 800ba0c:	e7e1      	b.n	800b9d2 <__d2b+0x72>
 800ba0e:	bf00      	nop
 800ba10:	0800cbcf 	.word	0x0800cbcf
 800ba14:	0800cbe0 	.word	0x0800cbe0

0800ba18 <_calloc_r>:
 800ba18:	b570      	push	{r4, r5, r6, lr}
 800ba1a:	fba1 5402 	umull	r5, r4, r1, r2
 800ba1e:	b934      	cbnz	r4, 800ba2e <_calloc_r+0x16>
 800ba20:	4629      	mov	r1, r5
 800ba22:	f000 f875 	bl	800bb10 <_malloc_r>
 800ba26:	4606      	mov	r6, r0
 800ba28:	b928      	cbnz	r0, 800ba36 <_calloc_r+0x1e>
 800ba2a:	4630      	mov	r0, r6
 800ba2c:	bd70      	pop	{r4, r5, r6, pc}
 800ba2e:	220c      	movs	r2, #12
 800ba30:	2600      	movs	r6, #0
 800ba32:	6002      	str	r2, [r0, #0]
 800ba34:	e7f9      	b.n	800ba2a <_calloc_r+0x12>
 800ba36:	462a      	mov	r2, r5
 800ba38:	4621      	mov	r1, r4
 800ba3a:	f7fe f92b 	bl	8009c94 <memset>
 800ba3e:	e7f4      	b.n	800ba2a <_calloc_r+0x12>

0800ba40 <_free_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4605      	mov	r5, r0
 800ba44:	2900      	cmp	r1, #0
 800ba46:	d040      	beq.n	800baca <_free_r+0x8a>
 800ba48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba4c:	1f0c      	subs	r4, r1, #4
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	bfb8      	it	lt
 800ba52:	18e4      	addlt	r4, r4, r3
 800ba54:	f000 fa98 	bl	800bf88 <__malloc_lock>
 800ba58:	4a1c      	ldr	r2, [pc, #112]	; (800bacc <_free_r+0x8c>)
 800ba5a:	6813      	ldr	r3, [r2, #0]
 800ba5c:	b933      	cbnz	r3, 800ba6c <_free_r+0x2c>
 800ba5e:	6063      	str	r3, [r4, #4]
 800ba60:	6014      	str	r4, [r2, #0]
 800ba62:	4628      	mov	r0, r5
 800ba64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba68:	f000 ba94 	b.w	800bf94 <__malloc_unlock>
 800ba6c:	42a3      	cmp	r3, r4
 800ba6e:	d908      	bls.n	800ba82 <_free_r+0x42>
 800ba70:	6820      	ldr	r0, [r4, #0]
 800ba72:	1821      	adds	r1, r4, r0
 800ba74:	428b      	cmp	r3, r1
 800ba76:	bf01      	itttt	eq
 800ba78:	6819      	ldreq	r1, [r3, #0]
 800ba7a:	685b      	ldreq	r3, [r3, #4]
 800ba7c:	1809      	addeq	r1, r1, r0
 800ba7e:	6021      	streq	r1, [r4, #0]
 800ba80:	e7ed      	b.n	800ba5e <_free_r+0x1e>
 800ba82:	461a      	mov	r2, r3
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	b10b      	cbz	r3, 800ba8c <_free_r+0x4c>
 800ba88:	42a3      	cmp	r3, r4
 800ba8a:	d9fa      	bls.n	800ba82 <_free_r+0x42>
 800ba8c:	6811      	ldr	r1, [r2, #0]
 800ba8e:	1850      	adds	r0, r2, r1
 800ba90:	42a0      	cmp	r0, r4
 800ba92:	d10b      	bne.n	800baac <_free_r+0x6c>
 800ba94:	6820      	ldr	r0, [r4, #0]
 800ba96:	4401      	add	r1, r0
 800ba98:	1850      	adds	r0, r2, r1
 800ba9a:	4283      	cmp	r3, r0
 800ba9c:	6011      	str	r1, [r2, #0]
 800ba9e:	d1e0      	bne.n	800ba62 <_free_r+0x22>
 800baa0:	6818      	ldr	r0, [r3, #0]
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	4401      	add	r1, r0
 800baa6:	6011      	str	r1, [r2, #0]
 800baa8:	6053      	str	r3, [r2, #4]
 800baaa:	e7da      	b.n	800ba62 <_free_r+0x22>
 800baac:	d902      	bls.n	800bab4 <_free_r+0x74>
 800baae:	230c      	movs	r3, #12
 800bab0:	602b      	str	r3, [r5, #0]
 800bab2:	e7d6      	b.n	800ba62 <_free_r+0x22>
 800bab4:	6820      	ldr	r0, [r4, #0]
 800bab6:	1821      	adds	r1, r4, r0
 800bab8:	428b      	cmp	r3, r1
 800baba:	bf01      	itttt	eq
 800babc:	6819      	ldreq	r1, [r3, #0]
 800babe:	685b      	ldreq	r3, [r3, #4]
 800bac0:	1809      	addeq	r1, r1, r0
 800bac2:	6021      	streq	r1, [r4, #0]
 800bac4:	6063      	str	r3, [r4, #4]
 800bac6:	6054      	str	r4, [r2, #4]
 800bac8:	e7cb      	b.n	800ba62 <_free_r+0x22>
 800baca:	bd38      	pop	{r3, r4, r5, pc}
 800bacc:	200015c8 	.word	0x200015c8

0800bad0 <sbrk_aligned>:
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	4e0e      	ldr	r6, [pc, #56]	; (800bb0c <sbrk_aligned+0x3c>)
 800bad4:	460c      	mov	r4, r1
 800bad6:	6831      	ldr	r1, [r6, #0]
 800bad8:	4605      	mov	r5, r0
 800bada:	b911      	cbnz	r1, 800bae2 <sbrk_aligned+0x12>
 800badc:	f000 f9e8 	bl	800beb0 <_sbrk_r>
 800bae0:	6030      	str	r0, [r6, #0]
 800bae2:	4621      	mov	r1, r4
 800bae4:	4628      	mov	r0, r5
 800bae6:	f000 f9e3 	bl	800beb0 <_sbrk_r>
 800baea:	1c43      	adds	r3, r0, #1
 800baec:	d00a      	beq.n	800bb04 <sbrk_aligned+0x34>
 800baee:	1cc4      	adds	r4, r0, #3
 800baf0:	f024 0403 	bic.w	r4, r4, #3
 800baf4:	42a0      	cmp	r0, r4
 800baf6:	d007      	beq.n	800bb08 <sbrk_aligned+0x38>
 800baf8:	1a21      	subs	r1, r4, r0
 800bafa:	4628      	mov	r0, r5
 800bafc:	f000 f9d8 	bl	800beb0 <_sbrk_r>
 800bb00:	3001      	adds	r0, #1
 800bb02:	d101      	bne.n	800bb08 <sbrk_aligned+0x38>
 800bb04:	f04f 34ff 	mov.w	r4, #4294967295
 800bb08:	4620      	mov	r0, r4
 800bb0a:	bd70      	pop	{r4, r5, r6, pc}
 800bb0c:	200015cc 	.word	0x200015cc

0800bb10 <_malloc_r>:
 800bb10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb14:	1ccd      	adds	r5, r1, #3
 800bb16:	f025 0503 	bic.w	r5, r5, #3
 800bb1a:	3508      	adds	r5, #8
 800bb1c:	2d0c      	cmp	r5, #12
 800bb1e:	bf38      	it	cc
 800bb20:	250c      	movcc	r5, #12
 800bb22:	2d00      	cmp	r5, #0
 800bb24:	4607      	mov	r7, r0
 800bb26:	db01      	blt.n	800bb2c <_malloc_r+0x1c>
 800bb28:	42a9      	cmp	r1, r5
 800bb2a:	d905      	bls.n	800bb38 <_malloc_r+0x28>
 800bb2c:	230c      	movs	r3, #12
 800bb2e:	2600      	movs	r6, #0
 800bb30:	603b      	str	r3, [r7, #0]
 800bb32:	4630      	mov	r0, r6
 800bb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb38:	4e2e      	ldr	r6, [pc, #184]	; (800bbf4 <_malloc_r+0xe4>)
 800bb3a:	f000 fa25 	bl	800bf88 <__malloc_lock>
 800bb3e:	6833      	ldr	r3, [r6, #0]
 800bb40:	461c      	mov	r4, r3
 800bb42:	bb34      	cbnz	r4, 800bb92 <_malloc_r+0x82>
 800bb44:	4629      	mov	r1, r5
 800bb46:	4638      	mov	r0, r7
 800bb48:	f7ff ffc2 	bl	800bad0 <sbrk_aligned>
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	4604      	mov	r4, r0
 800bb50:	d14d      	bne.n	800bbee <_malloc_r+0xde>
 800bb52:	6834      	ldr	r4, [r6, #0]
 800bb54:	4626      	mov	r6, r4
 800bb56:	2e00      	cmp	r6, #0
 800bb58:	d140      	bne.n	800bbdc <_malloc_r+0xcc>
 800bb5a:	6823      	ldr	r3, [r4, #0]
 800bb5c:	4631      	mov	r1, r6
 800bb5e:	4638      	mov	r0, r7
 800bb60:	eb04 0803 	add.w	r8, r4, r3
 800bb64:	f000 f9a4 	bl	800beb0 <_sbrk_r>
 800bb68:	4580      	cmp	r8, r0
 800bb6a:	d13a      	bne.n	800bbe2 <_malloc_r+0xd2>
 800bb6c:	6821      	ldr	r1, [r4, #0]
 800bb6e:	3503      	adds	r5, #3
 800bb70:	1a6d      	subs	r5, r5, r1
 800bb72:	f025 0503 	bic.w	r5, r5, #3
 800bb76:	3508      	adds	r5, #8
 800bb78:	2d0c      	cmp	r5, #12
 800bb7a:	bf38      	it	cc
 800bb7c:	250c      	movcc	r5, #12
 800bb7e:	4638      	mov	r0, r7
 800bb80:	4629      	mov	r1, r5
 800bb82:	f7ff ffa5 	bl	800bad0 <sbrk_aligned>
 800bb86:	3001      	adds	r0, #1
 800bb88:	d02b      	beq.n	800bbe2 <_malloc_r+0xd2>
 800bb8a:	6823      	ldr	r3, [r4, #0]
 800bb8c:	442b      	add	r3, r5
 800bb8e:	6023      	str	r3, [r4, #0]
 800bb90:	e00e      	b.n	800bbb0 <_malloc_r+0xa0>
 800bb92:	6822      	ldr	r2, [r4, #0]
 800bb94:	1b52      	subs	r2, r2, r5
 800bb96:	d41e      	bmi.n	800bbd6 <_malloc_r+0xc6>
 800bb98:	2a0b      	cmp	r2, #11
 800bb9a:	d916      	bls.n	800bbca <_malloc_r+0xba>
 800bb9c:	1961      	adds	r1, r4, r5
 800bb9e:	42a3      	cmp	r3, r4
 800bba0:	6025      	str	r5, [r4, #0]
 800bba2:	bf18      	it	ne
 800bba4:	6059      	strne	r1, [r3, #4]
 800bba6:	6863      	ldr	r3, [r4, #4]
 800bba8:	bf08      	it	eq
 800bbaa:	6031      	streq	r1, [r6, #0]
 800bbac:	5162      	str	r2, [r4, r5]
 800bbae:	604b      	str	r3, [r1, #4]
 800bbb0:	4638      	mov	r0, r7
 800bbb2:	f104 060b 	add.w	r6, r4, #11
 800bbb6:	f000 f9ed 	bl	800bf94 <__malloc_unlock>
 800bbba:	f026 0607 	bic.w	r6, r6, #7
 800bbbe:	1d23      	adds	r3, r4, #4
 800bbc0:	1af2      	subs	r2, r6, r3
 800bbc2:	d0b6      	beq.n	800bb32 <_malloc_r+0x22>
 800bbc4:	1b9b      	subs	r3, r3, r6
 800bbc6:	50a3      	str	r3, [r4, r2]
 800bbc8:	e7b3      	b.n	800bb32 <_malloc_r+0x22>
 800bbca:	6862      	ldr	r2, [r4, #4]
 800bbcc:	42a3      	cmp	r3, r4
 800bbce:	bf0c      	ite	eq
 800bbd0:	6032      	streq	r2, [r6, #0]
 800bbd2:	605a      	strne	r2, [r3, #4]
 800bbd4:	e7ec      	b.n	800bbb0 <_malloc_r+0xa0>
 800bbd6:	4623      	mov	r3, r4
 800bbd8:	6864      	ldr	r4, [r4, #4]
 800bbda:	e7b2      	b.n	800bb42 <_malloc_r+0x32>
 800bbdc:	4634      	mov	r4, r6
 800bbde:	6876      	ldr	r6, [r6, #4]
 800bbe0:	e7b9      	b.n	800bb56 <_malloc_r+0x46>
 800bbe2:	230c      	movs	r3, #12
 800bbe4:	4638      	mov	r0, r7
 800bbe6:	603b      	str	r3, [r7, #0]
 800bbe8:	f000 f9d4 	bl	800bf94 <__malloc_unlock>
 800bbec:	e7a1      	b.n	800bb32 <_malloc_r+0x22>
 800bbee:	6025      	str	r5, [r4, #0]
 800bbf0:	e7de      	b.n	800bbb0 <_malloc_r+0xa0>
 800bbf2:	bf00      	nop
 800bbf4:	200015c8 	.word	0x200015c8

0800bbf8 <__ssputs_r>:
 800bbf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbfc:	688e      	ldr	r6, [r1, #8]
 800bbfe:	4682      	mov	sl, r0
 800bc00:	429e      	cmp	r6, r3
 800bc02:	460c      	mov	r4, r1
 800bc04:	4690      	mov	r8, r2
 800bc06:	461f      	mov	r7, r3
 800bc08:	d838      	bhi.n	800bc7c <__ssputs_r+0x84>
 800bc0a:	898a      	ldrh	r2, [r1, #12]
 800bc0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc10:	d032      	beq.n	800bc78 <__ssputs_r+0x80>
 800bc12:	6825      	ldr	r5, [r4, #0]
 800bc14:	6909      	ldr	r1, [r1, #16]
 800bc16:	3301      	adds	r3, #1
 800bc18:	eba5 0901 	sub.w	r9, r5, r1
 800bc1c:	6965      	ldr	r5, [r4, #20]
 800bc1e:	444b      	add	r3, r9
 800bc20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc28:	106d      	asrs	r5, r5, #1
 800bc2a:	429d      	cmp	r5, r3
 800bc2c:	bf38      	it	cc
 800bc2e:	461d      	movcc	r5, r3
 800bc30:	0553      	lsls	r3, r2, #21
 800bc32:	d531      	bpl.n	800bc98 <__ssputs_r+0xa0>
 800bc34:	4629      	mov	r1, r5
 800bc36:	f7ff ff6b 	bl	800bb10 <_malloc_r>
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	b950      	cbnz	r0, 800bc54 <__ssputs_r+0x5c>
 800bc3e:	230c      	movs	r3, #12
 800bc40:	f04f 30ff 	mov.w	r0, #4294967295
 800bc44:	f8ca 3000 	str.w	r3, [sl]
 800bc48:	89a3      	ldrh	r3, [r4, #12]
 800bc4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc4e:	81a3      	strh	r3, [r4, #12]
 800bc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc54:	464a      	mov	r2, r9
 800bc56:	6921      	ldr	r1, [r4, #16]
 800bc58:	f7ff fb4e 	bl	800b2f8 <memcpy>
 800bc5c:	89a3      	ldrh	r3, [r4, #12]
 800bc5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc66:	81a3      	strh	r3, [r4, #12]
 800bc68:	6126      	str	r6, [r4, #16]
 800bc6a:	444e      	add	r6, r9
 800bc6c:	6026      	str	r6, [r4, #0]
 800bc6e:	463e      	mov	r6, r7
 800bc70:	6165      	str	r5, [r4, #20]
 800bc72:	eba5 0509 	sub.w	r5, r5, r9
 800bc76:	60a5      	str	r5, [r4, #8]
 800bc78:	42be      	cmp	r6, r7
 800bc7a:	d900      	bls.n	800bc7e <__ssputs_r+0x86>
 800bc7c:	463e      	mov	r6, r7
 800bc7e:	4632      	mov	r2, r6
 800bc80:	4641      	mov	r1, r8
 800bc82:	6820      	ldr	r0, [r4, #0]
 800bc84:	f000 f966 	bl	800bf54 <memmove>
 800bc88:	68a3      	ldr	r3, [r4, #8]
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	1b9b      	subs	r3, r3, r6
 800bc8e:	60a3      	str	r3, [r4, #8]
 800bc90:	6823      	ldr	r3, [r4, #0]
 800bc92:	4433      	add	r3, r6
 800bc94:	6023      	str	r3, [r4, #0]
 800bc96:	e7db      	b.n	800bc50 <__ssputs_r+0x58>
 800bc98:	462a      	mov	r2, r5
 800bc9a:	f000 f981 	bl	800bfa0 <_realloc_r>
 800bc9e:	4606      	mov	r6, r0
 800bca0:	2800      	cmp	r0, #0
 800bca2:	d1e1      	bne.n	800bc68 <__ssputs_r+0x70>
 800bca4:	4650      	mov	r0, sl
 800bca6:	6921      	ldr	r1, [r4, #16]
 800bca8:	f7ff feca 	bl	800ba40 <_free_r>
 800bcac:	e7c7      	b.n	800bc3e <__ssputs_r+0x46>
	...

0800bcb0 <_svfiprintf_r>:
 800bcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb4:	4698      	mov	r8, r3
 800bcb6:	898b      	ldrh	r3, [r1, #12]
 800bcb8:	4607      	mov	r7, r0
 800bcba:	061b      	lsls	r3, r3, #24
 800bcbc:	460d      	mov	r5, r1
 800bcbe:	4614      	mov	r4, r2
 800bcc0:	b09d      	sub	sp, #116	; 0x74
 800bcc2:	d50e      	bpl.n	800bce2 <_svfiprintf_r+0x32>
 800bcc4:	690b      	ldr	r3, [r1, #16]
 800bcc6:	b963      	cbnz	r3, 800bce2 <_svfiprintf_r+0x32>
 800bcc8:	2140      	movs	r1, #64	; 0x40
 800bcca:	f7ff ff21 	bl	800bb10 <_malloc_r>
 800bcce:	6028      	str	r0, [r5, #0]
 800bcd0:	6128      	str	r0, [r5, #16]
 800bcd2:	b920      	cbnz	r0, 800bcde <_svfiprintf_r+0x2e>
 800bcd4:	230c      	movs	r3, #12
 800bcd6:	603b      	str	r3, [r7, #0]
 800bcd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcdc:	e0d1      	b.n	800be82 <_svfiprintf_r+0x1d2>
 800bcde:	2340      	movs	r3, #64	; 0x40
 800bce0:	616b      	str	r3, [r5, #20]
 800bce2:	2300      	movs	r3, #0
 800bce4:	9309      	str	r3, [sp, #36]	; 0x24
 800bce6:	2320      	movs	r3, #32
 800bce8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcec:	2330      	movs	r3, #48	; 0x30
 800bcee:	f04f 0901 	mov.w	r9, #1
 800bcf2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcf6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800be9c <_svfiprintf_r+0x1ec>
 800bcfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcfe:	4623      	mov	r3, r4
 800bd00:	469a      	mov	sl, r3
 800bd02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd06:	b10a      	cbz	r2, 800bd0c <_svfiprintf_r+0x5c>
 800bd08:	2a25      	cmp	r2, #37	; 0x25
 800bd0a:	d1f9      	bne.n	800bd00 <_svfiprintf_r+0x50>
 800bd0c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd10:	d00b      	beq.n	800bd2a <_svfiprintf_r+0x7a>
 800bd12:	465b      	mov	r3, fp
 800bd14:	4622      	mov	r2, r4
 800bd16:	4629      	mov	r1, r5
 800bd18:	4638      	mov	r0, r7
 800bd1a:	f7ff ff6d 	bl	800bbf8 <__ssputs_r>
 800bd1e:	3001      	adds	r0, #1
 800bd20:	f000 80aa 	beq.w	800be78 <_svfiprintf_r+0x1c8>
 800bd24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd26:	445a      	add	r2, fp
 800bd28:	9209      	str	r2, [sp, #36]	; 0x24
 800bd2a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	f000 80a2 	beq.w	800be78 <_svfiprintf_r+0x1c8>
 800bd34:	2300      	movs	r3, #0
 800bd36:	f04f 32ff 	mov.w	r2, #4294967295
 800bd3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd3e:	f10a 0a01 	add.w	sl, sl, #1
 800bd42:	9304      	str	r3, [sp, #16]
 800bd44:	9307      	str	r3, [sp, #28]
 800bd46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd4a:	931a      	str	r3, [sp, #104]	; 0x68
 800bd4c:	4654      	mov	r4, sl
 800bd4e:	2205      	movs	r2, #5
 800bd50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd54:	4851      	ldr	r0, [pc, #324]	; (800be9c <_svfiprintf_r+0x1ec>)
 800bd56:	f7ff fac1 	bl	800b2dc <memchr>
 800bd5a:	9a04      	ldr	r2, [sp, #16]
 800bd5c:	b9d8      	cbnz	r0, 800bd96 <_svfiprintf_r+0xe6>
 800bd5e:	06d0      	lsls	r0, r2, #27
 800bd60:	bf44      	itt	mi
 800bd62:	2320      	movmi	r3, #32
 800bd64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd68:	0711      	lsls	r1, r2, #28
 800bd6a:	bf44      	itt	mi
 800bd6c:	232b      	movmi	r3, #43	; 0x2b
 800bd6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd72:	f89a 3000 	ldrb.w	r3, [sl]
 800bd76:	2b2a      	cmp	r3, #42	; 0x2a
 800bd78:	d015      	beq.n	800bda6 <_svfiprintf_r+0xf6>
 800bd7a:	4654      	mov	r4, sl
 800bd7c:	2000      	movs	r0, #0
 800bd7e:	f04f 0c0a 	mov.w	ip, #10
 800bd82:	9a07      	ldr	r2, [sp, #28]
 800bd84:	4621      	mov	r1, r4
 800bd86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd8a:	3b30      	subs	r3, #48	; 0x30
 800bd8c:	2b09      	cmp	r3, #9
 800bd8e:	d94e      	bls.n	800be2e <_svfiprintf_r+0x17e>
 800bd90:	b1b0      	cbz	r0, 800bdc0 <_svfiprintf_r+0x110>
 800bd92:	9207      	str	r2, [sp, #28]
 800bd94:	e014      	b.n	800bdc0 <_svfiprintf_r+0x110>
 800bd96:	eba0 0308 	sub.w	r3, r0, r8
 800bd9a:	fa09 f303 	lsl.w	r3, r9, r3
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	46a2      	mov	sl, r4
 800bda2:	9304      	str	r3, [sp, #16]
 800bda4:	e7d2      	b.n	800bd4c <_svfiprintf_r+0x9c>
 800bda6:	9b03      	ldr	r3, [sp, #12]
 800bda8:	1d19      	adds	r1, r3, #4
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	9103      	str	r1, [sp, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	bfbb      	ittet	lt
 800bdb2:	425b      	neglt	r3, r3
 800bdb4:	f042 0202 	orrlt.w	r2, r2, #2
 800bdb8:	9307      	strge	r3, [sp, #28]
 800bdba:	9307      	strlt	r3, [sp, #28]
 800bdbc:	bfb8      	it	lt
 800bdbe:	9204      	strlt	r2, [sp, #16]
 800bdc0:	7823      	ldrb	r3, [r4, #0]
 800bdc2:	2b2e      	cmp	r3, #46	; 0x2e
 800bdc4:	d10c      	bne.n	800bde0 <_svfiprintf_r+0x130>
 800bdc6:	7863      	ldrb	r3, [r4, #1]
 800bdc8:	2b2a      	cmp	r3, #42	; 0x2a
 800bdca:	d135      	bne.n	800be38 <_svfiprintf_r+0x188>
 800bdcc:	9b03      	ldr	r3, [sp, #12]
 800bdce:	3402      	adds	r4, #2
 800bdd0:	1d1a      	adds	r2, r3, #4
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	9203      	str	r2, [sp, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	bfb8      	it	lt
 800bdda:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdde:	9305      	str	r3, [sp, #20]
 800bde0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800bea0 <_svfiprintf_r+0x1f0>
 800bde4:	2203      	movs	r2, #3
 800bde6:	4650      	mov	r0, sl
 800bde8:	7821      	ldrb	r1, [r4, #0]
 800bdea:	f7ff fa77 	bl	800b2dc <memchr>
 800bdee:	b140      	cbz	r0, 800be02 <_svfiprintf_r+0x152>
 800bdf0:	2340      	movs	r3, #64	; 0x40
 800bdf2:	eba0 000a 	sub.w	r0, r0, sl
 800bdf6:	fa03 f000 	lsl.w	r0, r3, r0
 800bdfa:	9b04      	ldr	r3, [sp, #16]
 800bdfc:	3401      	adds	r4, #1
 800bdfe:	4303      	orrs	r3, r0
 800be00:	9304      	str	r3, [sp, #16]
 800be02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be06:	2206      	movs	r2, #6
 800be08:	4826      	ldr	r0, [pc, #152]	; (800bea4 <_svfiprintf_r+0x1f4>)
 800be0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be0e:	f7ff fa65 	bl	800b2dc <memchr>
 800be12:	2800      	cmp	r0, #0
 800be14:	d038      	beq.n	800be88 <_svfiprintf_r+0x1d8>
 800be16:	4b24      	ldr	r3, [pc, #144]	; (800bea8 <_svfiprintf_r+0x1f8>)
 800be18:	bb1b      	cbnz	r3, 800be62 <_svfiprintf_r+0x1b2>
 800be1a:	9b03      	ldr	r3, [sp, #12]
 800be1c:	3307      	adds	r3, #7
 800be1e:	f023 0307 	bic.w	r3, r3, #7
 800be22:	3308      	adds	r3, #8
 800be24:	9303      	str	r3, [sp, #12]
 800be26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be28:	4433      	add	r3, r6
 800be2a:	9309      	str	r3, [sp, #36]	; 0x24
 800be2c:	e767      	b.n	800bcfe <_svfiprintf_r+0x4e>
 800be2e:	460c      	mov	r4, r1
 800be30:	2001      	movs	r0, #1
 800be32:	fb0c 3202 	mla	r2, ip, r2, r3
 800be36:	e7a5      	b.n	800bd84 <_svfiprintf_r+0xd4>
 800be38:	2300      	movs	r3, #0
 800be3a:	f04f 0c0a 	mov.w	ip, #10
 800be3e:	4619      	mov	r1, r3
 800be40:	3401      	adds	r4, #1
 800be42:	9305      	str	r3, [sp, #20]
 800be44:	4620      	mov	r0, r4
 800be46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be4a:	3a30      	subs	r2, #48	; 0x30
 800be4c:	2a09      	cmp	r2, #9
 800be4e:	d903      	bls.n	800be58 <_svfiprintf_r+0x1a8>
 800be50:	2b00      	cmp	r3, #0
 800be52:	d0c5      	beq.n	800bde0 <_svfiprintf_r+0x130>
 800be54:	9105      	str	r1, [sp, #20]
 800be56:	e7c3      	b.n	800bde0 <_svfiprintf_r+0x130>
 800be58:	4604      	mov	r4, r0
 800be5a:	2301      	movs	r3, #1
 800be5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800be60:	e7f0      	b.n	800be44 <_svfiprintf_r+0x194>
 800be62:	ab03      	add	r3, sp, #12
 800be64:	9300      	str	r3, [sp, #0]
 800be66:	462a      	mov	r2, r5
 800be68:	4638      	mov	r0, r7
 800be6a:	4b10      	ldr	r3, [pc, #64]	; (800beac <_svfiprintf_r+0x1fc>)
 800be6c:	a904      	add	r1, sp, #16
 800be6e:	f7fd ffb7 	bl	8009de0 <_printf_float>
 800be72:	1c42      	adds	r2, r0, #1
 800be74:	4606      	mov	r6, r0
 800be76:	d1d6      	bne.n	800be26 <_svfiprintf_r+0x176>
 800be78:	89ab      	ldrh	r3, [r5, #12]
 800be7a:	065b      	lsls	r3, r3, #25
 800be7c:	f53f af2c 	bmi.w	800bcd8 <_svfiprintf_r+0x28>
 800be80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be82:	b01d      	add	sp, #116	; 0x74
 800be84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be88:	ab03      	add	r3, sp, #12
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	462a      	mov	r2, r5
 800be8e:	4638      	mov	r0, r7
 800be90:	4b06      	ldr	r3, [pc, #24]	; (800beac <_svfiprintf_r+0x1fc>)
 800be92:	a904      	add	r1, sp, #16
 800be94:	f7fe fa40 	bl	800a318 <_printf_i>
 800be98:	e7eb      	b.n	800be72 <_svfiprintf_r+0x1c2>
 800be9a:	bf00      	nop
 800be9c:	0800cd3c 	.word	0x0800cd3c
 800bea0:	0800cd42 	.word	0x0800cd42
 800bea4:	0800cd46 	.word	0x0800cd46
 800bea8:	08009de1 	.word	0x08009de1
 800beac:	0800bbf9 	.word	0x0800bbf9

0800beb0 <_sbrk_r>:
 800beb0:	b538      	push	{r3, r4, r5, lr}
 800beb2:	2300      	movs	r3, #0
 800beb4:	4d05      	ldr	r5, [pc, #20]	; (800becc <_sbrk_r+0x1c>)
 800beb6:	4604      	mov	r4, r0
 800beb8:	4608      	mov	r0, r1
 800beba:	602b      	str	r3, [r5, #0]
 800bebc:	f7f5 fc08 	bl	80016d0 <_sbrk>
 800bec0:	1c43      	adds	r3, r0, #1
 800bec2:	d102      	bne.n	800beca <_sbrk_r+0x1a>
 800bec4:	682b      	ldr	r3, [r5, #0]
 800bec6:	b103      	cbz	r3, 800beca <_sbrk_r+0x1a>
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	bd38      	pop	{r3, r4, r5, pc}
 800becc:	200015d0 	.word	0x200015d0

0800bed0 <__assert_func>:
 800bed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bed2:	4614      	mov	r4, r2
 800bed4:	461a      	mov	r2, r3
 800bed6:	4b09      	ldr	r3, [pc, #36]	; (800befc <__assert_func+0x2c>)
 800bed8:	4605      	mov	r5, r0
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	68d8      	ldr	r0, [r3, #12]
 800bede:	b14c      	cbz	r4, 800bef4 <__assert_func+0x24>
 800bee0:	4b07      	ldr	r3, [pc, #28]	; (800bf00 <__assert_func+0x30>)
 800bee2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bee6:	9100      	str	r1, [sp, #0]
 800bee8:	462b      	mov	r3, r5
 800beea:	4906      	ldr	r1, [pc, #24]	; (800bf04 <__assert_func+0x34>)
 800beec:	f000 f80e 	bl	800bf0c <fiprintf>
 800bef0:	f000 faaa 	bl	800c448 <abort>
 800bef4:	4b04      	ldr	r3, [pc, #16]	; (800bf08 <__assert_func+0x38>)
 800bef6:	461c      	mov	r4, r3
 800bef8:	e7f3      	b.n	800bee2 <__assert_func+0x12>
 800befa:	bf00      	nop
 800befc:	2000017c 	.word	0x2000017c
 800bf00:	0800cd4d 	.word	0x0800cd4d
 800bf04:	0800cd5a 	.word	0x0800cd5a
 800bf08:	0800cd88 	.word	0x0800cd88

0800bf0c <fiprintf>:
 800bf0c:	b40e      	push	{r1, r2, r3}
 800bf0e:	b503      	push	{r0, r1, lr}
 800bf10:	4601      	mov	r1, r0
 800bf12:	ab03      	add	r3, sp, #12
 800bf14:	4805      	ldr	r0, [pc, #20]	; (800bf2c <fiprintf+0x20>)
 800bf16:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf1a:	6800      	ldr	r0, [r0, #0]
 800bf1c:	9301      	str	r3, [sp, #4]
 800bf1e:	f000 f895 	bl	800c04c <_vfiprintf_r>
 800bf22:	b002      	add	sp, #8
 800bf24:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf28:	b003      	add	sp, #12
 800bf2a:	4770      	bx	lr
 800bf2c:	2000017c 	.word	0x2000017c

0800bf30 <__ascii_mbtowc>:
 800bf30:	b082      	sub	sp, #8
 800bf32:	b901      	cbnz	r1, 800bf36 <__ascii_mbtowc+0x6>
 800bf34:	a901      	add	r1, sp, #4
 800bf36:	b142      	cbz	r2, 800bf4a <__ascii_mbtowc+0x1a>
 800bf38:	b14b      	cbz	r3, 800bf4e <__ascii_mbtowc+0x1e>
 800bf3a:	7813      	ldrb	r3, [r2, #0]
 800bf3c:	600b      	str	r3, [r1, #0]
 800bf3e:	7812      	ldrb	r2, [r2, #0]
 800bf40:	1e10      	subs	r0, r2, #0
 800bf42:	bf18      	it	ne
 800bf44:	2001      	movne	r0, #1
 800bf46:	b002      	add	sp, #8
 800bf48:	4770      	bx	lr
 800bf4a:	4610      	mov	r0, r2
 800bf4c:	e7fb      	b.n	800bf46 <__ascii_mbtowc+0x16>
 800bf4e:	f06f 0001 	mvn.w	r0, #1
 800bf52:	e7f8      	b.n	800bf46 <__ascii_mbtowc+0x16>

0800bf54 <memmove>:
 800bf54:	4288      	cmp	r0, r1
 800bf56:	b510      	push	{r4, lr}
 800bf58:	eb01 0402 	add.w	r4, r1, r2
 800bf5c:	d902      	bls.n	800bf64 <memmove+0x10>
 800bf5e:	4284      	cmp	r4, r0
 800bf60:	4623      	mov	r3, r4
 800bf62:	d807      	bhi.n	800bf74 <memmove+0x20>
 800bf64:	1e43      	subs	r3, r0, #1
 800bf66:	42a1      	cmp	r1, r4
 800bf68:	d008      	beq.n	800bf7c <memmove+0x28>
 800bf6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf72:	e7f8      	b.n	800bf66 <memmove+0x12>
 800bf74:	4601      	mov	r1, r0
 800bf76:	4402      	add	r2, r0
 800bf78:	428a      	cmp	r2, r1
 800bf7a:	d100      	bne.n	800bf7e <memmove+0x2a>
 800bf7c:	bd10      	pop	{r4, pc}
 800bf7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf86:	e7f7      	b.n	800bf78 <memmove+0x24>

0800bf88 <__malloc_lock>:
 800bf88:	4801      	ldr	r0, [pc, #4]	; (800bf90 <__malloc_lock+0x8>)
 800bf8a:	f000 bc19 	b.w	800c7c0 <__retarget_lock_acquire_recursive>
 800bf8e:	bf00      	nop
 800bf90:	200015d4 	.word	0x200015d4

0800bf94 <__malloc_unlock>:
 800bf94:	4801      	ldr	r0, [pc, #4]	; (800bf9c <__malloc_unlock+0x8>)
 800bf96:	f000 bc14 	b.w	800c7c2 <__retarget_lock_release_recursive>
 800bf9a:	bf00      	nop
 800bf9c:	200015d4 	.word	0x200015d4

0800bfa0 <_realloc_r>:
 800bfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa4:	4680      	mov	r8, r0
 800bfa6:	4614      	mov	r4, r2
 800bfa8:	460e      	mov	r6, r1
 800bfaa:	b921      	cbnz	r1, 800bfb6 <_realloc_r+0x16>
 800bfac:	4611      	mov	r1, r2
 800bfae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb2:	f7ff bdad 	b.w	800bb10 <_malloc_r>
 800bfb6:	b92a      	cbnz	r2, 800bfc4 <_realloc_r+0x24>
 800bfb8:	f7ff fd42 	bl	800ba40 <_free_r>
 800bfbc:	4625      	mov	r5, r4
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc4:	f000 fc64 	bl	800c890 <_malloc_usable_size_r>
 800bfc8:	4284      	cmp	r4, r0
 800bfca:	4607      	mov	r7, r0
 800bfcc:	d802      	bhi.n	800bfd4 <_realloc_r+0x34>
 800bfce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bfd2:	d812      	bhi.n	800bffa <_realloc_r+0x5a>
 800bfd4:	4621      	mov	r1, r4
 800bfd6:	4640      	mov	r0, r8
 800bfd8:	f7ff fd9a 	bl	800bb10 <_malloc_r>
 800bfdc:	4605      	mov	r5, r0
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	d0ed      	beq.n	800bfbe <_realloc_r+0x1e>
 800bfe2:	42bc      	cmp	r4, r7
 800bfe4:	4622      	mov	r2, r4
 800bfe6:	4631      	mov	r1, r6
 800bfe8:	bf28      	it	cs
 800bfea:	463a      	movcs	r2, r7
 800bfec:	f7ff f984 	bl	800b2f8 <memcpy>
 800bff0:	4631      	mov	r1, r6
 800bff2:	4640      	mov	r0, r8
 800bff4:	f7ff fd24 	bl	800ba40 <_free_r>
 800bff8:	e7e1      	b.n	800bfbe <_realloc_r+0x1e>
 800bffa:	4635      	mov	r5, r6
 800bffc:	e7df      	b.n	800bfbe <_realloc_r+0x1e>

0800bffe <__sfputc_r>:
 800bffe:	6893      	ldr	r3, [r2, #8]
 800c000:	b410      	push	{r4}
 800c002:	3b01      	subs	r3, #1
 800c004:	2b00      	cmp	r3, #0
 800c006:	6093      	str	r3, [r2, #8]
 800c008:	da07      	bge.n	800c01a <__sfputc_r+0x1c>
 800c00a:	6994      	ldr	r4, [r2, #24]
 800c00c:	42a3      	cmp	r3, r4
 800c00e:	db01      	blt.n	800c014 <__sfputc_r+0x16>
 800c010:	290a      	cmp	r1, #10
 800c012:	d102      	bne.n	800c01a <__sfputc_r+0x1c>
 800c014:	bc10      	pop	{r4}
 800c016:	f000 b949 	b.w	800c2ac <__swbuf_r>
 800c01a:	6813      	ldr	r3, [r2, #0]
 800c01c:	1c58      	adds	r0, r3, #1
 800c01e:	6010      	str	r0, [r2, #0]
 800c020:	7019      	strb	r1, [r3, #0]
 800c022:	4608      	mov	r0, r1
 800c024:	bc10      	pop	{r4}
 800c026:	4770      	bx	lr

0800c028 <__sfputs_r>:
 800c028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c02a:	4606      	mov	r6, r0
 800c02c:	460f      	mov	r7, r1
 800c02e:	4614      	mov	r4, r2
 800c030:	18d5      	adds	r5, r2, r3
 800c032:	42ac      	cmp	r4, r5
 800c034:	d101      	bne.n	800c03a <__sfputs_r+0x12>
 800c036:	2000      	movs	r0, #0
 800c038:	e007      	b.n	800c04a <__sfputs_r+0x22>
 800c03a:	463a      	mov	r2, r7
 800c03c:	4630      	mov	r0, r6
 800c03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c042:	f7ff ffdc 	bl	800bffe <__sfputc_r>
 800c046:	1c43      	adds	r3, r0, #1
 800c048:	d1f3      	bne.n	800c032 <__sfputs_r+0xa>
 800c04a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c04c <_vfiprintf_r>:
 800c04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c050:	460d      	mov	r5, r1
 800c052:	4614      	mov	r4, r2
 800c054:	4698      	mov	r8, r3
 800c056:	4606      	mov	r6, r0
 800c058:	b09d      	sub	sp, #116	; 0x74
 800c05a:	b118      	cbz	r0, 800c064 <_vfiprintf_r+0x18>
 800c05c:	6983      	ldr	r3, [r0, #24]
 800c05e:	b90b      	cbnz	r3, 800c064 <_vfiprintf_r+0x18>
 800c060:	f000 fb10 	bl	800c684 <__sinit>
 800c064:	4b89      	ldr	r3, [pc, #548]	; (800c28c <_vfiprintf_r+0x240>)
 800c066:	429d      	cmp	r5, r3
 800c068:	d11b      	bne.n	800c0a2 <_vfiprintf_r+0x56>
 800c06a:	6875      	ldr	r5, [r6, #4]
 800c06c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c06e:	07d9      	lsls	r1, r3, #31
 800c070:	d405      	bmi.n	800c07e <_vfiprintf_r+0x32>
 800c072:	89ab      	ldrh	r3, [r5, #12]
 800c074:	059a      	lsls	r2, r3, #22
 800c076:	d402      	bmi.n	800c07e <_vfiprintf_r+0x32>
 800c078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c07a:	f000 fba1 	bl	800c7c0 <__retarget_lock_acquire_recursive>
 800c07e:	89ab      	ldrh	r3, [r5, #12]
 800c080:	071b      	lsls	r3, r3, #28
 800c082:	d501      	bpl.n	800c088 <_vfiprintf_r+0x3c>
 800c084:	692b      	ldr	r3, [r5, #16]
 800c086:	b9eb      	cbnz	r3, 800c0c4 <_vfiprintf_r+0x78>
 800c088:	4629      	mov	r1, r5
 800c08a:	4630      	mov	r0, r6
 800c08c:	f000 f96e 	bl	800c36c <__swsetup_r>
 800c090:	b1c0      	cbz	r0, 800c0c4 <_vfiprintf_r+0x78>
 800c092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c094:	07dc      	lsls	r4, r3, #31
 800c096:	d50e      	bpl.n	800c0b6 <_vfiprintf_r+0x6a>
 800c098:	f04f 30ff 	mov.w	r0, #4294967295
 800c09c:	b01d      	add	sp, #116	; 0x74
 800c09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a2:	4b7b      	ldr	r3, [pc, #492]	; (800c290 <_vfiprintf_r+0x244>)
 800c0a4:	429d      	cmp	r5, r3
 800c0a6:	d101      	bne.n	800c0ac <_vfiprintf_r+0x60>
 800c0a8:	68b5      	ldr	r5, [r6, #8]
 800c0aa:	e7df      	b.n	800c06c <_vfiprintf_r+0x20>
 800c0ac:	4b79      	ldr	r3, [pc, #484]	; (800c294 <_vfiprintf_r+0x248>)
 800c0ae:	429d      	cmp	r5, r3
 800c0b0:	bf08      	it	eq
 800c0b2:	68f5      	ldreq	r5, [r6, #12]
 800c0b4:	e7da      	b.n	800c06c <_vfiprintf_r+0x20>
 800c0b6:	89ab      	ldrh	r3, [r5, #12]
 800c0b8:	0598      	lsls	r0, r3, #22
 800c0ba:	d4ed      	bmi.n	800c098 <_vfiprintf_r+0x4c>
 800c0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0be:	f000 fb80 	bl	800c7c2 <__retarget_lock_release_recursive>
 800c0c2:	e7e9      	b.n	800c098 <_vfiprintf_r+0x4c>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c0c8:	2320      	movs	r3, #32
 800c0ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0ce:	2330      	movs	r3, #48	; 0x30
 800c0d0:	f04f 0901 	mov.w	r9, #1
 800c0d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0d8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c298 <_vfiprintf_r+0x24c>
 800c0dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0e0:	4623      	mov	r3, r4
 800c0e2:	469a      	mov	sl, r3
 800c0e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0e8:	b10a      	cbz	r2, 800c0ee <_vfiprintf_r+0xa2>
 800c0ea:	2a25      	cmp	r2, #37	; 0x25
 800c0ec:	d1f9      	bne.n	800c0e2 <_vfiprintf_r+0x96>
 800c0ee:	ebba 0b04 	subs.w	fp, sl, r4
 800c0f2:	d00b      	beq.n	800c10c <_vfiprintf_r+0xc0>
 800c0f4:	465b      	mov	r3, fp
 800c0f6:	4622      	mov	r2, r4
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	f7ff ff94 	bl	800c028 <__sfputs_r>
 800c100:	3001      	adds	r0, #1
 800c102:	f000 80aa 	beq.w	800c25a <_vfiprintf_r+0x20e>
 800c106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c108:	445a      	add	r2, fp
 800c10a:	9209      	str	r2, [sp, #36]	; 0x24
 800c10c:	f89a 3000 	ldrb.w	r3, [sl]
 800c110:	2b00      	cmp	r3, #0
 800c112:	f000 80a2 	beq.w	800c25a <_vfiprintf_r+0x20e>
 800c116:	2300      	movs	r3, #0
 800c118:	f04f 32ff 	mov.w	r2, #4294967295
 800c11c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c120:	f10a 0a01 	add.w	sl, sl, #1
 800c124:	9304      	str	r3, [sp, #16]
 800c126:	9307      	str	r3, [sp, #28]
 800c128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c12c:	931a      	str	r3, [sp, #104]	; 0x68
 800c12e:	4654      	mov	r4, sl
 800c130:	2205      	movs	r2, #5
 800c132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c136:	4858      	ldr	r0, [pc, #352]	; (800c298 <_vfiprintf_r+0x24c>)
 800c138:	f7ff f8d0 	bl	800b2dc <memchr>
 800c13c:	9a04      	ldr	r2, [sp, #16]
 800c13e:	b9d8      	cbnz	r0, 800c178 <_vfiprintf_r+0x12c>
 800c140:	06d1      	lsls	r1, r2, #27
 800c142:	bf44      	itt	mi
 800c144:	2320      	movmi	r3, #32
 800c146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c14a:	0713      	lsls	r3, r2, #28
 800c14c:	bf44      	itt	mi
 800c14e:	232b      	movmi	r3, #43	; 0x2b
 800c150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c154:	f89a 3000 	ldrb.w	r3, [sl]
 800c158:	2b2a      	cmp	r3, #42	; 0x2a
 800c15a:	d015      	beq.n	800c188 <_vfiprintf_r+0x13c>
 800c15c:	4654      	mov	r4, sl
 800c15e:	2000      	movs	r0, #0
 800c160:	f04f 0c0a 	mov.w	ip, #10
 800c164:	9a07      	ldr	r2, [sp, #28]
 800c166:	4621      	mov	r1, r4
 800c168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c16c:	3b30      	subs	r3, #48	; 0x30
 800c16e:	2b09      	cmp	r3, #9
 800c170:	d94e      	bls.n	800c210 <_vfiprintf_r+0x1c4>
 800c172:	b1b0      	cbz	r0, 800c1a2 <_vfiprintf_r+0x156>
 800c174:	9207      	str	r2, [sp, #28]
 800c176:	e014      	b.n	800c1a2 <_vfiprintf_r+0x156>
 800c178:	eba0 0308 	sub.w	r3, r0, r8
 800c17c:	fa09 f303 	lsl.w	r3, r9, r3
 800c180:	4313      	orrs	r3, r2
 800c182:	46a2      	mov	sl, r4
 800c184:	9304      	str	r3, [sp, #16]
 800c186:	e7d2      	b.n	800c12e <_vfiprintf_r+0xe2>
 800c188:	9b03      	ldr	r3, [sp, #12]
 800c18a:	1d19      	adds	r1, r3, #4
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	9103      	str	r1, [sp, #12]
 800c190:	2b00      	cmp	r3, #0
 800c192:	bfbb      	ittet	lt
 800c194:	425b      	neglt	r3, r3
 800c196:	f042 0202 	orrlt.w	r2, r2, #2
 800c19a:	9307      	strge	r3, [sp, #28]
 800c19c:	9307      	strlt	r3, [sp, #28]
 800c19e:	bfb8      	it	lt
 800c1a0:	9204      	strlt	r2, [sp, #16]
 800c1a2:	7823      	ldrb	r3, [r4, #0]
 800c1a4:	2b2e      	cmp	r3, #46	; 0x2e
 800c1a6:	d10c      	bne.n	800c1c2 <_vfiprintf_r+0x176>
 800c1a8:	7863      	ldrb	r3, [r4, #1]
 800c1aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c1ac:	d135      	bne.n	800c21a <_vfiprintf_r+0x1ce>
 800c1ae:	9b03      	ldr	r3, [sp, #12]
 800c1b0:	3402      	adds	r4, #2
 800c1b2:	1d1a      	adds	r2, r3, #4
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	9203      	str	r2, [sp, #12]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	bfb8      	it	lt
 800c1bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1c0:	9305      	str	r3, [sp, #20]
 800c1c2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800c29c <_vfiprintf_r+0x250>
 800c1c6:	2203      	movs	r2, #3
 800c1c8:	4650      	mov	r0, sl
 800c1ca:	7821      	ldrb	r1, [r4, #0]
 800c1cc:	f7ff f886 	bl	800b2dc <memchr>
 800c1d0:	b140      	cbz	r0, 800c1e4 <_vfiprintf_r+0x198>
 800c1d2:	2340      	movs	r3, #64	; 0x40
 800c1d4:	eba0 000a 	sub.w	r0, r0, sl
 800c1d8:	fa03 f000 	lsl.w	r0, r3, r0
 800c1dc:	9b04      	ldr	r3, [sp, #16]
 800c1de:	3401      	adds	r4, #1
 800c1e0:	4303      	orrs	r3, r0
 800c1e2:	9304      	str	r3, [sp, #16]
 800c1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1e8:	2206      	movs	r2, #6
 800c1ea:	482d      	ldr	r0, [pc, #180]	; (800c2a0 <_vfiprintf_r+0x254>)
 800c1ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1f0:	f7ff f874 	bl	800b2dc <memchr>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d03f      	beq.n	800c278 <_vfiprintf_r+0x22c>
 800c1f8:	4b2a      	ldr	r3, [pc, #168]	; (800c2a4 <_vfiprintf_r+0x258>)
 800c1fa:	bb1b      	cbnz	r3, 800c244 <_vfiprintf_r+0x1f8>
 800c1fc:	9b03      	ldr	r3, [sp, #12]
 800c1fe:	3307      	adds	r3, #7
 800c200:	f023 0307 	bic.w	r3, r3, #7
 800c204:	3308      	adds	r3, #8
 800c206:	9303      	str	r3, [sp, #12]
 800c208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c20a:	443b      	add	r3, r7
 800c20c:	9309      	str	r3, [sp, #36]	; 0x24
 800c20e:	e767      	b.n	800c0e0 <_vfiprintf_r+0x94>
 800c210:	460c      	mov	r4, r1
 800c212:	2001      	movs	r0, #1
 800c214:	fb0c 3202 	mla	r2, ip, r2, r3
 800c218:	e7a5      	b.n	800c166 <_vfiprintf_r+0x11a>
 800c21a:	2300      	movs	r3, #0
 800c21c:	f04f 0c0a 	mov.w	ip, #10
 800c220:	4619      	mov	r1, r3
 800c222:	3401      	adds	r4, #1
 800c224:	9305      	str	r3, [sp, #20]
 800c226:	4620      	mov	r0, r4
 800c228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c22c:	3a30      	subs	r2, #48	; 0x30
 800c22e:	2a09      	cmp	r2, #9
 800c230:	d903      	bls.n	800c23a <_vfiprintf_r+0x1ee>
 800c232:	2b00      	cmp	r3, #0
 800c234:	d0c5      	beq.n	800c1c2 <_vfiprintf_r+0x176>
 800c236:	9105      	str	r1, [sp, #20]
 800c238:	e7c3      	b.n	800c1c2 <_vfiprintf_r+0x176>
 800c23a:	4604      	mov	r4, r0
 800c23c:	2301      	movs	r3, #1
 800c23e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c242:	e7f0      	b.n	800c226 <_vfiprintf_r+0x1da>
 800c244:	ab03      	add	r3, sp, #12
 800c246:	9300      	str	r3, [sp, #0]
 800c248:	462a      	mov	r2, r5
 800c24a:	4630      	mov	r0, r6
 800c24c:	4b16      	ldr	r3, [pc, #88]	; (800c2a8 <_vfiprintf_r+0x25c>)
 800c24e:	a904      	add	r1, sp, #16
 800c250:	f7fd fdc6 	bl	8009de0 <_printf_float>
 800c254:	4607      	mov	r7, r0
 800c256:	1c78      	adds	r0, r7, #1
 800c258:	d1d6      	bne.n	800c208 <_vfiprintf_r+0x1bc>
 800c25a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c25c:	07d9      	lsls	r1, r3, #31
 800c25e:	d405      	bmi.n	800c26c <_vfiprintf_r+0x220>
 800c260:	89ab      	ldrh	r3, [r5, #12]
 800c262:	059a      	lsls	r2, r3, #22
 800c264:	d402      	bmi.n	800c26c <_vfiprintf_r+0x220>
 800c266:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c268:	f000 faab 	bl	800c7c2 <__retarget_lock_release_recursive>
 800c26c:	89ab      	ldrh	r3, [r5, #12]
 800c26e:	065b      	lsls	r3, r3, #25
 800c270:	f53f af12 	bmi.w	800c098 <_vfiprintf_r+0x4c>
 800c274:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c276:	e711      	b.n	800c09c <_vfiprintf_r+0x50>
 800c278:	ab03      	add	r3, sp, #12
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	462a      	mov	r2, r5
 800c27e:	4630      	mov	r0, r6
 800c280:	4b09      	ldr	r3, [pc, #36]	; (800c2a8 <_vfiprintf_r+0x25c>)
 800c282:	a904      	add	r1, sp, #16
 800c284:	f7fe f848 	bl	800a318 <_printf_i>
 800c288:	e7e4      	b.n	800c254 <_vfiprintf_r+0x208>
 800c28a:	bf00      	nop
 800c28c:	0800ceb4 	.word	0x0800ceb4
 800c290:	0800ced4 	.word	0x0800ced4
 800c294:	0800ce94 	.word	0x0800ce94
 800c298:	0800cd3c 	.word	0x0800cd3c
 800c29c:	0800cd42 	.word	0x0800cd42
 800c2a0:	0800cd46 	.word	0x0800cd46
 800c2a4:	08009de1 	.word	0x08009de1
 800c2a8:	0800c029 	.word	0x0800c029

0800c2ac <__swbuf_r>:
 800c2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ae:	460e      	mov	r6, r1
 800c2b0:	4614      	mov	r4, r2
 800c2b2:	4605      	mov	r5, r0
 800c2b4:	b118      	cbz	r0, 800c2be <__swbuf_r+0x12>
 800c2b6:	6983      	ldr	r3, [r0, #24]
 800c2b8:	b90b      	cbnz	r3, 800c2be <__swbuf_r+0x12>
 800c2ba:	f000 f9e3 	bl	800c684 <__sinit>
 800c2be:	4b21      	ldr	r3, [pc, #132]	; (800c344 <__swbuf_r+0x98>)
 800c2c0:	429c      	cmp	r4, r3
 800c2c2:	d12b      	bne.n	800c31c <__swbuf_r+0x70>
 800c2c4:	686c      	ldr	r4, [r5, #4]
 800c2c6:	69a3      	ldr	r3, [r4, #24]
 800c2c8:	60a3      	str	r3, [r4, #8]
 800c2ca:	89a3      	ldrh	r3, [r4, #12]
 800c2cc:	071a      	lsls	r2, r3, #28
 800c2ce:	d52f      	bpl.n	800c330 <__swbuf_r+0x84>
 800c2d0:	6923      	ldr	r3, [r4, #16]
 800c2d2:	b36b      	cbz	r3, 800c330 <__swbuf_r+0x84>
 800c2d4:	6923      	ldr	r3, [r4, #16]
 800c2d6:	6820      	ldr	r0, [r4, #0]
 800c2d8:	b2f6      	uxtb	r6, r6
 800c2da:	1ac0      	subs	r0, r0, r3
 800c2dc:	6963      	ldr	r3, [r4, #20]
 800c2de:	4637      	mov	r7, r6
 800c2e0:	4283      	cmp	r3, r0
 800c2e2:	dc04      	bgt.n	800c2ee <__swbuf_r+0x42>
 800c2e4:	4621      	mov	r1, r4
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	f000 f938 	bl	800c55c <_fflush_r>
 800c2ec:	bb30      	cbnz	r0, 800c33c <__swbuf_r+0x90>
 800c2ee:	68a3      	ldr	r3, [r4, #8]
 800c2f0:	3001      	adds	r0, #1
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	60a3      	str	r3, [r4, #8]
 800c2f6:	6823      	ldr	r3, [r4, #0]
 800c2f8:	1c5a      	adds	r2, r3, #1
 800c2fa:	6022      	str	r2, [r4, #0]
 800c2fc:	701e      	strb	r6, [r3, #0]
 800c2fe:	6963      	ldr	r3, [r4, #20]
 800c300:	4283      	cmp	r3, r0
 800c302:	d004      	beq.n	800c30e <__swbuf_r+0x62>
 800c304:	89a3      	ldrh	r3, [r4, #12]
 800c306:	07db      	lsls	r3, r3, #31
 800c308:	d506      	bpl.n	800c318 <__swbuf_r+0x6c>
 800c30a:	2e0a      	cmp	r6, #10
 800c30c:	d104      	bne.n	800c318 <__swbuf_r+0x6c>
 800c30e:	4621      	mov	r1, r4
 800c310:	4628      	mov	r0, r5
 800c312:	f000 f923 	bl	800c55c <_fflush_r>
 800c316:	b988      	cbnz	r0, 800c33c <__swbuf_r+0x90>
 800c318:	4638      	mov	r0, r7
 800c31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c31c:	4b0a      	ldr	r3, [pc, #40]	; (800c348 <__swbuf_r+0x9c>)
 800c31e:	429c      	cmp	r4, r3
 800c320:	d101      	bne.n	800c326 <__swbuf_r+0x7a>
 800c322:	68ac      	ldr	r4, [r5, #8]
 800c324:	e7cf      	b.n	800c2c6 <__swbuf_r+0x1a>
 800c326:	4b09      	ldr	r3, [pc, #36]	; (800c34c <__swbuf_r+0xa0>)
 800c328:	429c      	cmp	r4, r3
 800c32a:	bf08      	it	eq
 800c32c:	68ec      	ldreq	r4, [r5, #12]
 800c32e:	e7ca      	b.n	800c2c6 <__swbuf_r+0x1a>
 800c330:	4621      	mov	r1, r4
 800c332:	4628      	mov	r0, r5
 800c334:	f000 f81a 	bl	800c36c <__swsetup_r>
 800c338:	2800      	cmp	r0, #0
 800c33a:	d0cb      	beq.n	800c2d4 <__swbuf_r+0x28>
 800c33c:	f04f 37ff 	mov.w	r7, #4294967295
 800c340:	e7ea      	b.n	800c318 <__swbuf_r+0x6c>
 800c342:	bf00      	nop
 800c344:	0800ceb4 	.word	0x0800ceb4
 800c348:	0800ced4 	.word	0x0800ced4
 800c34c:	0800ce94 	.word	0x0800ce94

0800c350 <__ascii_wctomb>:
 800c350:	4603      	mov	r3, r0
 800c352:	4608      	mov	r0, r1
 800c354:	b141      	cbz	r1, 800c368 <__ascii_wctomb+0x18>
 800c356:	2aff      	cmp	r2, #255	; 0xff
 800c358:	d904      	bls.n	800c364 <__ascii_wctomb+0x14>
 800c35a:	228a      	movs	r2, #138	; 0x8a
 800c35c:	f04f 30ff 	mov.w	r0, #4294967295
 800c360:	601a      	str	r2, [r3, #0]
 800c362:	4770      	bx	lr
 800c364:	2001      	movs	r0, #1
 800c366:	700a      	strb	r2, [r1, #0]
 800c368:	4770      	bx	lr
	...

0800c36c <__swsetup_r>:
 800c36c:	4b32      	ldr	r3, [pc, #200]	; (800c438 <__swsetup_r+0xcc>)
 800c36e:	b570      	push	{r4, r5, r6, lr}
 800c370:	681d      	ldr	r5, [r3, #0]
 800c372:	4606      	mov	r6, r0
 800c374:	460c      	mov	r4, r1
 800c376:	b125      	cbz	r5, 800c382 <__swsetup_r+0x16>
 800c378:	69ab      	ldr	r3, [r5, #24]
 800c37a:	b913      	cbnz	r3, 800c382 <__swsetup_r+0x16>
 800c37c:	4628      	mov	r0, r5
 800c37e:	f000 f981 	bl	800c684 <__sinit>
 800c382:	4b2e      	ldr	r3, [pc, #184]	; (800c43c <__swsetup_r+0xd0>)
 800c384:	429c      	cmp	r4, r3
 800c386:	d10f      	bne.n	800c3a8 <__swsetup_r+0x3c>
 800c388:	686c      	ldr	r4, [r5, #4]
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c390:	0719      	lsls	r1, r3, #28
 800c392:	d42c      	bmi.n	800c3ee <__swsetup_r+0x82>
 800c394:	06dd      	lsls	r5, r3, #27
 800c396:	d411      	bmi.n	800c3bc <__swsetup_r+0x50>
 800c398:	2309      	movs	r3, #9
 800c39a:	6033      	str	r3, [r6, #0]
 800c39c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a4:	81a3      	strh	r3, [r4, #12]
 800c3a6:	e03e      	b.n	800c426 <__swsetup_r+0xba>
 800c3a8:	4b25      	ldr	r3, [pc, #148]	; (800c440 <__swsetup_r+0xd4>)
 800c3aa:	429c      	cmp	r4, r3
 800c3ac:	d101      	bne.n	800c3b2 <__swsetup_r+0x46>
 800c3ae:	68ac      	ldr	r4, [r5, #8]
 800c3b0:	e7eb      	b.n	800c38a <__swsetup_r+0x1e>
 800c3b2:	4b24      	ldr	r3, [pc, #144]	; (800c444 <__swsetup_r+0xd8>)
 800c3b4:	429c      	cmp	r4, r3
 800c3b6:	bf08      	it	eq
 800c3b8:	68ec      	ldreq	r4, [r5, #12]
 800c3ba:	e7e6      	b.n	800c38a <__swsetup_r+0x1e>
 800c3bc:	0758      	lsls	r0, r3, #29
 800c3be:	d512      	bpl.n	800c3e6 <__swsetup_r+0x7a>
 800c3c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3c2:	b141      	cbz	r1, 800c3d6 <__swsetup_r+0x6a>
 800c3c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3c8:	4299      	cmp	r1, r3
 800c3ca:	d002      	beq.n	800c3d2 <__swsetup_r+0x66>
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	f7ff fb37 	bl	800ba40 <_free_r>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	6363      	str	r3, [r4, #52]	; 0x34
 800c3d6:	89a3      	ldrh	r3, [r4, #12]
 800c3d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c3dc:	81a3      	strh	r3, [r4, #12]
 800c3de:	2300      	movs	r3, #0
 800c3e0:	6063      	str	r3, [r4, #4]
 800c3e2:	6923      	ldr	r3, [r4, #16]
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	89a3      	ldrh	r3, [r4, #12]
 800c3e8:	f043 0308 	orr.w	r3, r3, #8
 800c3ec:	81a3      	strh	r3, [r4, #12]
 800c3ee:	6923      	ldr	r3, [r4, #16]
 800c3f0:	b94b      	cbnz	r3, 800c406 <__swsetup_r+0x9a>
 800c3f2:	89a3      	ldrh	r3, [r4, #12]
 800c3f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3fc:	d003      	beq.n	800c406 <__swsetup_r+0x9a>
 800c3fe:	4621      	mov	r1, r4
 800c400:	4630      	mov	r0, r6
 800c402:	f000 fa05 	bl	800c810 <__smakebuf_r>
 800c406:	89a0      	ldrh	r0, [r4, #12]
 800c408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c40c:	f010 0301 	ands.w	r3, r0, #1
 800c410:	d00a      	beq.n	800c428 <__swsetup_r+0xbc>
 800c412:	2300      	movs	r3, #0
 800c414:	60a3      	str	r3, [r4, #8]
 800c416:	6963      	ldr	r3, [r4, #20]
 800c418:	425b      	negs	r3, r3
 800c41a:	61a3      	str	r3, [r4, #24]
 800c41c:	6923      	ldr	r3, [r4, #16]
 800c41e:	b943      	cbnz	r3, 800c432 <__swsetup_r+0xc6>
 800c420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c424:	d1ba      	bne.n	800c39c <__swsetup_r+0x30>
 800c426:	bd70      	pop	{r4, r5, r6, pc}
 800c428:	0781      	lsls	r1, r0, #30
 800c42a:	bf58      	it	pl
 800c42c:	6963      	ldrpl	r3, [r4, #20]
 800c42e:	60a3      	str	r3, [r4, #8]
 800c430:	e7f4      	b.n	800c41c <__swsetup_r+0xb0>
 800c432:	2000      	movs	r0, #0
 800c434:	e7f7      	b.n	800c426 <__swsetup_r+0xba>
 800c436:	bf00      	nop
 800c438:	2000017c 	.word	0x2000017c
 800c43c:	0800ceb4 	.word	0x0800ceb4
 800c440:	0800ced4 	.word	0x0800ced4
 800c444:	0800ce94 	.word	0x0800ce94

0800c448 <abort>:
 800c448:	2006      	movs	r0, #6
 800c44a:	b508      	push	{r3, lr}
 800c44c:	f000 fa50 	bl	800c8f0 <raise>
 800c450:	2001      	movs	r0, #1
 800c452:	f7f5 f8ca 	bl	80015ea <_exit>
	...

0800c458 <__sflush_r>:
 800c458:	898a      	ldrh	r2, [r1, #12]
 800c45a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c45c:	4605      	mov	r5, r0
 800c45e:	0710      	lsls	r0, r2, #28
 800c460:	460c      	mov	r4, r1
 800c462:	d457      	bmi.n	800c514 <__sflush_r+0xbc>
 800c464:	684b      	ldr	r3, [r1, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	dc04      	bgt.n	800c474 <__sflush_r+0x1c>
 800c46a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	dc01      	bgt.n	800c474 <__sflush_r+0x1c>
 800c470:	2000      	movs	r0, #0
 800c472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c476:	2e00      	cmp	r6, #0
 800c478:	d0fa      	beq.n	800c470 <__sflush_r+0x18>
 800c47a:	2300      	movs	r3, #0
 800c47c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c480:	682f      	ldr	r7, [r5, #0]
 800c482:	602b      	str	r3, [r5, #0]
 800c484:	d032      	beq.n	800c4ec <__sflush_r+0x94>
 800c486:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c488:	89a3      	ldrh	r3, [r4, #12]
 800c48a:	075a      	lsls	r2, r3, #29
 800c48c:	d505      	bpl.n	800c49a <__sflush_r+0x42>
 800c48e:	6863      	ldr	r3, [r4, #4]
 800c490:	1ac0      	subs	r0, r0, r3
 800c492:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c494:	b10b      	cbz	r3, 800c49a <__sflush_r+0x42>
 800c496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c498:	1ac0      	subs	r0, r0, r3
 800c49a:	2300      	movs	r3, #0
 800c49c:	4602      	mov	r2, r0
 800c49e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4a0:	4628      	mov	r0, r5
 800c4a2:	6a21      	ldr	r1, [r4, #32]
 800c4a4:	47b0      	blx	r6
 800c4a6:	1c43      	adds	r3, r0, #1
 800c4a8:	89a3      	ldrh	r3, [r4, #12]
 800c4aa:	d106      	bne.n	800c4ba <__sflush_r+0x62>
 800c4ac:	6829      	ldr	r1, [r5, #0]
 800c4ae:	291d      	cmp	r1, #29
 800c4b0:	d82c      	bhi.n	800c50c <__sflush_r+0xb4>
 800c4b2:	4a29      	ldr	r2, [pc, #164]	; (800c558 <__sflush_r+0x100>)
 800c4b4:	40ca      	lsrs	r2, r1
 800c4b6:	07d6      	lsls	r6, r2, #31
 800c4b8:	d528      	bpl.n	800c50c <__sflush_r+0xb4>
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	6062      	str	r2, [r4, #4]
 800c4be:	6922      	ldr	r2, [r4, #16]
 800c4c0:	04d9      	lsls	r1, r3, #19
 800c4c2:	6022      	str	r2, [r4, #0]
 800c4c4:	d504      	bpl.n	800c4d0 <__sflush_r+0x78>
 800c4c6:	1c42      	adds	r2, r0, #1
 800c4c8:	d101      	bne.n	800c4ce <__sflush_r+0x76>
 800c4ca:	682b      	ldr	r3, [r5, #0]
 800c4cc:	b903      	cbnz	r3, 800c4d0 <__sflush_r+0x78>
 800c4ce:	6560      	str	r0, [r4, #84]	; 0x54
 800c4d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4d2:	602f      	str	r7, [r5, #0]
 800c4d4:	2900      	cmp	r1, #0
 800c4d6:	d0cb      	beq.n	800c470 <__sflush_r+0x18>
 800c4d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4dc:	4299      	cmp	r1, r3
 800c4de:	d002      	beq.n	800c4e6 <__sflush_r+0x8e>
 800c4e0:	4628      	mov	r0, r5
 800c4e2:	f7ff faad 	bl	800ba40 <_free_r>
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	6360      	str	r0, [r4, #52]	; 0x34
 800c4ea:	e7c2      	b.n	800c472 <__sflush_r+0x1a>
 800c4ec:	6a21      	ldr	r1, [r4, #32]
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	47b0      	blx	r6
 800c4f4:	1c41      	adds	r1, r0, #1
 800c4f6:	d1c7      	bne.n	800c488 <__sflush_r+0x30>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d0c4      	beq.n	800c488 <__sflush_r+0x30>
 800c4fe:	2b1d      	cmp	r3, #29
 800c500:	d001      	beq.n	800c506 <__sflush_r+0xae>
 800c502:	2b16      	cmp	r3, #22
 800c504:	d101      	bne.n	800c50a <__sflush_r+0xb2>
 800c506:	602f      	str	r7, [r5, #0]
 800c508:	e7b2      	b.n	800c470 <__sflush_r+0x18>
 800c50a:	89a3      	ldrh	r3, [r4, #12]
 800c50c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c510:	81a3      	strh	r3, [r4, #12]
 800c512:	e7ae      	b.n	800c472 <__sflush_r+0x1a>
 800c514:	690f      	ldr	r7, [r1, #16]
 800c516:	2f00      	cmp	r7, #0
 800c518:	d0aa      	beq.n	800c470 <__sflush_r+0x18>
 800c51a:	0793      	lsls	r3, r2, #30
 800c51c:	bf18      	it	ne
 800c51e:	2300      	movne	r3, #0
 800c520:	680e      	ldr	r6, [r1, #0]
 800c522:	bf08      	it	eq
 800c524:	694b      	ldreq	r3, [r1, #20]
 800c526:	1bf6      	subs	r6, r6, r7
 800c528:	600f      	str	r7, [r1, #0]
 800c52a:	608b      	str	r3, [r1, #8]
 800c52c:	2e00      	cmp	r6, #0
 800c52e:	dd9f      	ble.n	800c470 <__sflush_r+0x18>
 800c530:	4633      	mov	r3, r6
 800c532:	463a      	mov	r2, r7
 800c534:	4628      	mov	r0, r5
 800c536:	6a21      	ldr	r1, [r4, #32]
 800c538:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c53c:	47e0      	blx	ip
 800c53e:	2800      	cmp	r0, #0
 800c540:	dc06      	bgt.n	800c550 <__sflush_r+0xf8>
 800c542:	89a3      	ldrh	r3, [r4, #12]
 800c544:	f04f 30ff 	mov.w	r0, #4294967295
 800c548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c54c:	81a3      	strh	r3, [r4, #12]
 800c54e:	e790      	b.n	800c472 <__sflush_r+0x1a>
 800c550:	4407      	add	r7, r0
 800c552:	1a36      	subs	r6, r6, r0
 800c554:	e7ea      	b.n	800c52c <__sflush_r+0xd4>
 800c556:	bf00      	nop
 800c558:	20400001 	.word	0x20400001

0800c55c <_fflush_r>:
 800c55c:	b538      	push	{r3, r4, r5, lr}
 800c55e:	690b      	ldr	r3, [r1, #16]
 800c560:	4605      	mov	r5, r0
 800c562:	460c      	mov	r4, r1
 800c564:	b913      	cbnz	r3, 800c56c <_fflush_r+0x10>
 800c566:	2500      	movs	r5, #0
 800c568:	4628      	mov	r0, r5
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
 800c56c:	b118      	cbz	r0, 800c576 <_fflush_r+0x1a>
 800c56e:	6983      	ldr	r3, [r0, #24]
 800c570:	b90b      	cbnz	r3, 800c576 <_fflush_r+0x1a>
 800c572:	f000 f887 	bl	800c684 <__sinit>
 800c576:	4b14      	ldr	r3, [pc, #80]	; (800c5c8 <_fflush_r+0x6c>)
 800c578:	429c      	cmp	r4, r3
 800c57a:	d11b      	bne.n	800c5b4 <_fflush_r+0x58>
 800c57c:	686c      	ldr	r4, [r5, #4]
 800c57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d0ef      	beq.n	800c566 <_fflush_r+0xa>
 800c586:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c588:	07d0      	lsls	r0, r2, #31
 800c58a:	d404      	bmi.n	800c596 <_fflush_r+0x3a>
 800c58c:	0599      	lsls	r1, r3, #22
 800c58e:	d402      	bmi.n	800c596 <_fflush_r+0x3a>
 800c590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c592:	f000 f915 	bl	800c7c0 <__retarget_lock_acquire_recursive>
 800c596:	4628      	mov	r0, r5
 800c598:	4621      	mov	r1, r4
 800c59a:	f7ff ff5d 	bl	800c458 <__sflush_r>
 800c59e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5a0:	4605      	mov	r5, r0
 800c5a2:	07da      	lsls	r2, r3, #31
 800c5a4:	d4e0      	bmi.n	800c568 <_fflush_r+0xc>
 800c5a6:	89a3      	ldrh	r3, [r4, #12]
 800c5a8:	059b      	lsls	r3, r3, #22
 800c5aa:	d4dd      	bmi.n	800c568 <_fflush_r+0xc>
 800c5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5ae:	f000 f908 	bl	800c7c2 <__retarget_lock_release_recursive>
 800c5b2:	e7d9      	b.n	800c568 <_fflush_r+0xc>
 800c5b4:	4b05      	ldr	r3, [pc, #20]	; (800c5cc <_fflush_r+0x70>)
 800c5b6:	429c      	cmp	r4, r3
 800c5b8:	d101      	bne.n	800c5be <_fflush_r+0x62>
 800c5ba:	68ac      	ldr	r4, [r5, #8]
 800c5bc:	e7df      	b.n	800c57e <_fflush_r+0x22>
 800c5be:	4b04      	ldr	r3, [pc, #16]	; (800c5d0 <_fflush_r+0x74>)
 800c5c0:	429c      	cmp	r4, r3
 800c5c2:	bf08      	it	eq
 800c5c4:	68ec      	ldreq	r4, [r5, #12]
 800c5c6:	e7da      	b.n	800c57e <_fflush_r+0x22>
 800c5c8:	0800ceb4 	.word	0x0800ceb4
 800c5cc:	0800ced4 	.word	0x0800ced4
 800c5d0:	0800ce94 	.word	0x0800ce94

0800c5d4 <std>:
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	b510      	push	{r4, lr}
 800c5d8:	4604      	mov	r4, r0
 800c5da:	e9c0 3300 	strd	r3, r3, [r0]
 800c5de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5e2:	6083      	str	r3, [r0, #8]
 800c5e4:	8181      	strh	r1, [r0, #12]
 800c5e6:	6643      	str	r3, [r0, #100]	; 0x64
 800c5e8:	81c2      	strh	r2, [r0, #14]
 800c5ea:	6183      	str	r3, [r0, #24]
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	2208      	movs	r2, #8
 800c5f0:	305c      	adds	r0, #92	; 0x5c
 800c5f2:	f7fd fb4f 	bl	8009c94 <memset>
 800c5f6:	4b05      	ldr	r3, [pc, #20]	; (800c60c <std+0x38>)
 800c5f8:	6224      	str	r4, [r4, #32]
 800c5fa:	6263      	str	r3, [r4, #36]	; 0x24
 800c5fc:	4b04      	ldr	r3, [pc, #16]	; (800c610 <std+0x3c>)
 800c5fe:	62a3      	str	r3, [r4, #40]	; 0x28
 800c600:	4b04      	ldr	r3, [pc, #16]	; (800c614 <std+0x40>)
 800c602:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c604:	4b04      	ldr	r3, [pc, #16]	; (800c618 <std+0x44>)
 800c606:	6323      	str	r3, [r4, #48]	; 0x30
 800c608:	bd10      	pop	{r4, pc}
 800c60a:	bf00      	nop
 800c60c:	0800c929 	.word	0x0800c929
 800c610:	0800c94b 	.word	0x0800c94b
 800c614:	0800c983 	.word	0x0800c983
 800c618:	0800c9a7 	.word	0x0800c9a7

0800c61c <_cleanup_r>:
 800c61c:	4901      	ldr	r1, [pc, #4]	; (800c624 <_cleanup_r+0x8>)
 800c61e:	f000 b8af 	b.w	800c780 <_fwalk_reent>
 800c622:	bf00      	nop
 800c624:	0800c55d 	.word	0x0800c55d

0800c628 <__sfmoreglue>:
 800c628:	2268      	movs	r2, #104	; 0x68
 800c62a:	b570      	push	{r4, r5, r6, lr}
 800c62c:	1e4d      	subs	r5, r1, #1
 800c62e:	4355      	muls	r5, r2
 800c630:	460e      	mov	r6, r1
 800c632:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c636:	f7ff fa6b 	bl	800bb10 <_malloc_r>
 800c63a:	4604      	mov	r4, r0
 800c63c:	b140      	cbz	r0, 800c650 <__sfmoreglue+0x28>
 800c63e:	2100      	movs	r1, #0
 800c640:	e9c0 1600 	strd	r1, r6, [r0]
 800c644:	300c      	adds	r0, #12
 800c646:	60a0      	str	r0, [r4, #8]
 800c648:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c64c:	f7fd fb22 	bl	8009c94 <memset>
 800c650:	4620      	mov	r0, r4
 800c652:	bd70      	pop	{r4, r5, r6, pc}

0800c654 <__sfp_lock_acquire>:
 800c654:	4801      	ldr	r0, [pc, #4]	; (800c65c <__sfp_lock_acquire+0x8>)
 800c656:	f000 b8b3 	b.w	800c7c0 <__retarget_lock_acquire_recursive>
 800c65a:	bf00      	nop
 800c65c:	200015d5 	.word	0x200015d5

0800c660 <__sfp_lock_release>:
 800c660:	4801      	ldr	r0, [pc, #4]	; (800c668 <__sfp_lock_release+0x8>)
 800c662:	f000 b8ae 	b.w	800c7c2 <__retarget_lock_release_recursive>
 800c666:	bf00      	nop
 800c668:	200015d5 	.word	0x200015d5

0800c66c <__sinit_lock_acquire>:
 800c66c:	4801      	ldr	r0, [pc, #4]	; (800c674 <__sinit_lock_acquire+0x8>)
 800c66e:	f000 b8a7 	b.w	800c7c0 <__retarget_lock_acquire_recursive>
 800c672:	bf00      	nop
 800c674:	200015d6 	.word	0x200015d6

0800c678 <__sinit_lock_release>:
 800c678:	4801      	ldr	r0, [pc, #4]	; (800c680 <__sinit_lock_release+0x8>)
 800c67a:	f000 b8a2 	b.w	800c7c2 <__retarget_lock_release_recursive>
 800c67e:	bf00      	nop
 800c680:	200015d6 	.word	0x200015d6

0800c684 <__sinit>:
 800c684:	b510      	push	{r4, lr}
 800c686:	4604      	mov	r4, r0
 800c688:	f7ff fff0 	bl	800c66c <__sinit_lock_acquire>
 800c68c:	69a3      	ldr	r3, [r4, #24]
 800c68e:	b11b      	cbz	r3, 800c698 <__sinit+0x14>
 800c690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c694:	f7ff bff0 	b.w	800c678 <__sinit_lock_release>
 800c698:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c69c:	6523      	str	r3, [r4, #80]	; 0x50
 800c69e:	4b13      	ldr	r3, [pc, #76]	; (800c6ec <__sinit+0x68>)
 800c6a0:	4a13      	ldr	r2, [pc, #76]	; (800c6f0 <__sinit+0x6c>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c6a6:	42a3      	cmp	r3, r4
 800c6a8:	bf08      	it	eq
 800c6aa:	2301      	moveq	r3, #1
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	bf08      	it	eq
 800c6b0:	61a3      	streq	r3, [r4, #24]
 800c6b2:	f000 f81f 	bl	800c6f4 <__sfp>
 800c6b6:	6060      	str	r0, [r4, #4]
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f000 f81b 	bl	800c6f4 <__sfp>
 800c6be:	60a0      	str	r0, [r4, #8]
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f000 f817 	bl	800c6f4 <__sfp>
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	2104      	movs	r1, #4
 800c6ca:	60e0      	str	r0, [r4, #12]
 800c6cc:	6860      	ldr	r0, [r4, #4]
 800c6ce:	f7ff ff81 	bl	800c5d4 <std>
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	2109      	movs	r1, #9
 800c6d6:	68a0      	ldr	r0, [r4, #8]
 800c6d8:	f7ff ff7c 	bl	800c5d4 <std>
 800c6dc:	2202      	movs	r2, #2
 800c6de:	2112      	movs	r1, #18
 800c6e0:	68e0      	ldr	r0, [r4, #12]
 800c6e2:	f7ff ff77 	bl	800c5d4 <std>
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	61a3      	str	r3, [r4, #24]
 800c6ea:	e7d1      	b.n	800c690 <__sinit+0xc>
 800c6ec:	0800cb18 	.word	0x0800cb18
 800c6f0:	0800c61d 	.word	0x0800c61d

0800c6f4 <__sfp>:
 800c6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6f6:	4607      	mov	r7, r0
 800c6f8:	f7ff ffac 	bl	800c654 <__sfp_lock_acquire>
 800c6fc:	4b1e      	ldr	r3, [pc, #120]	; (800c778 <__sfp+0x84>)
 800c6fe:	681e      	ldr	r6, [r3, #0]
 800c700:	69b3      	ldr	r3, [r6, #24]
 800c702:	b913      	cbnz	r3, 800c70a <__sfp+0x16>
 800c704:	4630      	mov	r0, r6
 800c706:	f7ff ffbd 	bl	800c684 <__sinit>
 800c70a:	3648      	adds	r6, #72	; 0x48
 800c70c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c710:	3b01      	subs	r3, #1
 800c712:	d503      	bpl.n	800c71c <__sfp+0x28>
 800c714:	6833      	ldr	r3, [r6, #0]
 800c716:	b30b      	cbz	r3, 800c75c <__sfp+0x68>
 800c718:	6836      	ldr	r6, [r6, #0]
 800c71a:	e7f7      	b.n	800c70c <__sfp+0x18>
 800c71c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c720:	b9d5      	cbnz	r5, 800c758 <__sfp+0x64>
 800c722:	4b16      	ldr	r3, [pc, #88]	; (800c77c <__sfp+0x88>)
 800c724:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c728:	60e3      	str	r3, [r4, #12]
 800c72a:	6665      	str	r5, [r4, #100]	; 0x64
 800c72c:	f000 f847 	bl	800c7be <__retarget_lock_init_recursive>
 800c730:	f7ff ff96 	bl	800c660 <__sfp_lock_release>
 800c734:	2208      	movs	r2, #8
 800c736:	4629      	mov	r1, r5
 800c738:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c73c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c740:	6025      	str	r5, [r4, #0]
 800c742:	61a5      	str	r5, [r4, #24]
 800c744:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c748:	f7fd faa4 	bl	8009c94 <memset>
 800c74c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c750:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c754:	4620      	mov	r0, r4
 800c756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c758:	3468      	adds	r4, #104	; 0x68
 800c75a:	e7d9      	b.n	800c710 <__sfp+0x1c>
 800c75c:	2104      	movs	r1, #4
 800c75e:	4638      	mov	r0, r7
 800c760:	f7ff ff62 	bl	800c628 <__sfmoreglue>
 800c764:	4604      	mov	r4, r0
 800c766:	6030      	str	r0, [r6, #0]
 800c768:	2800      	cmp	r0, #0
 800c76a:	d1d5      	bne.n	800c718 <__sfp+0x24>
 800c76c:	f7ff ff78 	bl	800c660 <__sfp_lock_release>
 800c770:	230c      	movs	r3, #12
 800c772:	603b      	str	r3, [r7, #0]
 800c774:	e7ee      	b.n	800c754 <__sfp+0x60>
 800c776:	bf00      	nop
 800c778:	0800cb18 	.word	0x0800cb18
 800c77c:	ffff0001 	.word	0xffff0001

0800c780 <_fwalk_reent>:
 800c780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c784:	4606      	mov	r6, r0
 800c786:	4688      	mov	r8, r1
 800c788:	2700      	movs	r7, #0
 800c78a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c78e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c792:	f1b9 0901 	subs.w	r9, r9, #1
 800c796:	d505      	bpl.n	800c7a4 <_fwalk_reent+0x24>
 800c798:	6824      	ldr	r4, [r4, #0]
 800c79a:	2c00      	cmp	r4, #0
 800c79c:	d1f7      	bne.n	800c78e <_fwalk_reent+0xe>
 800c79e:	4638      	mov	r0, r7
 800c7a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7a4:	89ab      	ldrh	r3, [r5, #12]
 800c7a6:	2b01      	cmp	r3, #1
 800c7a8:	d907      	bls.n	800c7ba <_fwalk_reent+0x3a>
 800c7aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	d003      	beq.n	800c7ba <_fwalk_reent+0x3a>
 800c7b2:	4629      	mov	r1, r5
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	47c0      	blx	r8
 800c7b8:	4307      	orrs	r7, r0
 800c7ba:	3568      	adds	r5, #104	; 0x68
 800c7bc:	e7e9      	b.n	800c792 <_fwalk_reent+0x12>

0800c7be <__retarget_lock_init_recursive>:
 800c7be:	4770      	bx	lr

0800c7c0 <__retarget_lock_acquire_recursive>:
 800c7c0:	4770      	bx	lr

0800c7c2 <__retarget_lock_release_recursive>:
 800c7c2:	4770      	bx	lr

0800c7c4 <__swhatbuf_r>:
 800c7c4:	b570      	push	{r4, r5, r6, lr}
 800c7c6:	460e      	mov	r6, r1
 800c7c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7cc:	4614      	mov	r4, r2
 800c7ce:	2900      	cmp	r1, #0
 800c7d0:	461d      	mov	r5, r3
 800c7d2:	b096      	sub	sp, #88	; 0x58
 800c7d4:	da08      	bge.n	800c7e8 <__swhatbuf_r+0x24>
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c7dc:	602a      	str	r2, [r5, #0]
 800c7de:	061a      	lsls	r2, r3, #24
 800c7e0:	d410      	bmi.n	800c804 <__swhatbuf_r+0x40>
 800c7e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7e6:	e00e      	b.n	800c806 <__swhatbuf_r+0x42>
 800c7e8:	466a      	mov	r2, sp
 800c7ea:	f000 f903 	bl	800c9f4 <_fstat_r>
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	dbf1      	blt.n	800c7d6 <__swhatbuf_r+0x12>
 800c7f2:	9a01      	ldr	r2, [sp, #4]
 800c7f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c7f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c7fc:	425a      	negs	r2, r3
 800c7fe:	415a      	adcs	r2, r3
 800c800:	602a      	str	r2, [r5, #0]
 800c802:	e7ee      	b.n	800c7e2 <__swhatbuf_r+0x1e>
 800c804:	2340      	movs	r3, #64	; 0x40
 800c806:	2000      	movs	r0, #0
 800c808:	6023      	str	r3, [r4, #0]
 800c80a:	b016      	add	sp, #88	; 0x58
 800c80c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c810 <__smakebuf_r>:
 800c810:	898b      	ldrh	r3, [r1, #12]
 800c812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c814:	079d      	lsls	r5, r3, #30
 800c816:	4606      	mov	r6, r0
 800c818:	460c      	mov	r4, r1
 800c81a:	d507      	bpl.n	800c82c <__smakebuf_r+0x1c>
 800c81c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c820:	6023      	str	r3, [r4, #0]
 800c822:	6123      	str	r3, [r4, #16]
 800c824:	2301      	movs	r3, #1
 800c826:	6163      	str	r3, [r4, #20]
 800c828:	b002      	add	sp, #8
 800c82a:	bd70      	pop	{r4, r5, r6, pc}
 800c82c:	466a      	mov	r2, sp
 800c82e:	ab01      	add	r3, sp, #4
 800c830:	f7ff ffc8 	bl	800c7c4 <__swhatbuf_r>
 800c834:	9900      	ldr	r1, [sp, #0]
 800c836:	4605      	mov	r5, r0
 800c838:	4630      	mov	r0, r6
 800c83a:	f7ff f969 	bl	800bb10 <_malloc_r>
 800c83e:	b948      	cbnz	r0, 800c854 <__smakebuf_r+0x44>
 800c840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c844:	059a      	lsls	r2, r3, #22
 800c846:	d4ef      	bmi.n	800c828 <__smakebuf_r+0x18>
 800c848:	f023 0303 	bic.w	r3, r3, #3
 800c84c:	f043 0302 	orr.w	r3, r3, #2
 800c850:	81a3      	strh	r3, [r4, #12]
 800c852:	e7e3      	b.n	800c81c <__smakebuf_r+0xc>
 800c854:	4b0d      	ldr	r3, [pc, #52]	; (800c88c <__smakebuf_r+0x7c>)
 800c856:	62b3      	str	r3, [r6, #40]	; 0x28
 800c858:	89a3      	ldrh	r3, [r4, #12]
 800c85a:	6020      	str	r0, [r4, #0]
 800c85c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c860:	81a3      	strh	r3, [r4, #12]
 800c862:	9b00      	ldr	r3, [sp, #0]
 800c864:	6120      	str	r0, [r4, #16]
 800c866:	6163      	str	r3, [r4, #20]
 800c868:	9b01      	ldr	r3, [sp, #4]
 800c86a:	b15b      	cbz	r3, 800c884 <__smakebuf_r+0x74>
 800c86c:	4630      	mov	r0, r6
 800c86e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c872:	f000 f8d1 	bl	800ca18 <_isatty_r>
 800c876:	b128      	cbz	r0, 800c884 <__smakebuf_r+0x74>
 800c878:	89a3      	ldrh	r3, [r4, #12]
 800c87a:	f023 0303 	bic.w	r3, r3, #3
 800c87e:	f043 0301 	orr.w	r3, r3, #1
 800c882:	81a3      	strh	r3, [r4, #12]
 800c884:	89a0      	ldrh	r0, [r4, #12]
 800c886:	4305      	orrs	r5, r0
 800c888:	81a5      	strh	r5, [r4, #12]
 800c88a:	e7cd      	b.n	800c828 <__smakebuf_r+0x18>
 800c88c:	0800c61d 	.word	0x0800c61d

0800c890 <_malloc_usable_size_r>:
 800c890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c894:	1f18      	subs	r0, r3, #4
 800c896:	2b00      	cmp	r3, #0
 800c898:	bfbc      	itt	lt
 800c89a:	580b      	ldrlt	r3, [r1, r0]
 800c89c:	18c0      	addlt	r0, r0, r3
 800c89e:	4770      	bx	lr

0800c8a0 <_raise_r>:
 800c8a0:	291f      	cmp	r1, #31
 800c8a2:	b538      	push	{r3, r4, r5, lr}
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	460d      	mov	r5, r1
 800c8a8:	d904      	bls.n	800c8b4 <_raise_r+0x14>
 800c8aa:	2316      	movs	r3, #22
 800c8ac:	6003      	str	r3, [r0, #0]
 800c8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b2:	bd38      	pop	{r3, r4, r5, pc}
 800c8b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c8b6:	b112      	cbz	r2, 800c8be <_raise_r+0x1e>
 800c8b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8bc:	b94b      	cbnz	r3, 800c8d2 <_raise_r+0x32>
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f000 f830 	bl	800c924 <_getpid_r>
 800c8c4:	462a      	mov	r2, r5
 800c8c6:	4601      	mov	r1, r0
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8ce:	f000 b817 	b.w	800c900 <_kill_r>
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d00a      	beq.n	800c8ec <_raise_r+0x4c>
 800c8d6:	1c59      	adds	r1, r3, #1
 800c8d8:	d103      	bne.n	800c8e2 <_raise_r+0x42>
 800c8da:	2316      	movs	r3, #22
 800c8dc:	6003      	str	r3, [r0, #0]
 800c8de:	2001      	movs	r0, #1
 800c8e0:	e7e7      	b.n	800c8b2 <_raise_r+0x12>
 800c8e2:	2400      	movs	r4, #0
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c8ea:	4798      	blx	r3
 800c8ec:	2000      	movs	r0, #0
 800c8ee:	e7e0      	b.n	800c8b2 <_raise_r+0x12>

0800c8f0 <raise>:
 800c8f0:	4b02      	ldr	r3, [pc, #8]	; (800c8fc <raise+0xc>)
 800c8f2:	4601      	mov	r1, r0
 800c8f4:	6818      	ldr	r0, [r3, #0]
 800c8f6:	f7ff bfd3 	b.w	800c8a0 <_raise_r>
 800c8fa:	bf00      	nop
 800c8fc:	2000017c 	.word	0x2000017c

0800c900 <_kill_r>:
 800c900:	b538      	push	{r3, r4, r5, lr}
 800c902:	2300      	movs	r3, #0
 800c904:	4d06      	ldr	r5, [pc, #24]	; (800c920 <_kill_r+0x20>)
 800c906:	4604      	mov	r4, r0
 800c908:	4608      	mov	r0, r1
 800c90a:	4611      	mov	r1, r2
 800c90c:	602b      	str	r3, [r5, #0]
 800c90e:	f7f4 fe5c 	bl	80015ca <_kill>
 800c912:	1c43      	adds	r3, r0, #1
 800c914:	d102      	bne.n	800c91c <_kill_r+0x1c>
 800c916:	682b      	ldr	r3, [r5, #0]
 800c918:	b103      	cbz	r3, 800c91c <_kill_r+0x1c>
 800c91a:	6023      	str	r3, [r4, #0]
 800c91c:	bd38      	pop	{r3, r4, r5, pc}
 800c91e:	bf00      	nop
 800c920:	200015d0 	.word	0x200015d0

0800c924 <_getpid_r>:
 800c924:	f7f4 be4a 	b.w	80015bc <_getpid>

0800c928 <__sread>:
 800c928:	b510      	push	{r4, lr}
 800c92a:	460c      	mov	r4, r1
 800c92c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c930:	f000 f894 	bl	800ca5c <_read_r>
 800c934:	2800      	cmp	r0, #0
 800c936:	bfab      	itete	ge
 800c938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c93a:	89a3      	ldrhlt	r3, [r4, #12]
 800c93c:	181b      	addge	r3, r3, r0
 800c93e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c942:	bfac      	ite	ge
 800c944:	6563      	strge	r3, [r4, #84]	; 0x54
 800c946:	81a3      	strhlt	r3, [r4, #12]
 800c948:	bd10      	pop	{r4, pc}

0800c94a <__swrite>:
 800c94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c94e:	461f      	mov	r7, r3
 800c950:	898b      	ldrh	r3, [r1, #12]
 800c952:	4605      	mov	r5, r0
 800c954:	05db      	lsls	r3, r3, #23
 800c956:	460c      	mov	r4, r1
 800c958:	4616      	mov	r6, r2
 800c95a:	d505      	bpl.n	800c968 <__swrite+0x1e>
 800c95c:	2302      	movs	r3, #2
 800c95e:	2200      	movs	r2, #0
 800c960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c964:	f000 f868 	bl	800ca38 <_lseek_r>
 800c968:	89a3      	ldrh	r3, [r4, #12]
 800c96a:	4632      	mov	r2, r6
 800c96c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c970:	81a3      	strh	r3, [r4, #12]
 800c972:	4628      	mov	r0, r5
 800c974:	463b      	mov	r3, r7
 800c976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c97a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c97e:	f000 b817 	b.w	800c9b0 <_write_r>

0800c982 <__sseek>:
 800c982:	b510      	push	{r4, lr}
 800c984:	460c      	mov	r4, r1
 800c986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c98a:	f000 f855 	bl	800ca38 <_lseek_r>
 800c98e:	1c43      	adds	r3, r0, #1
 800c990:	89a3      	ldrh	r3, [r4, #12]
 800c992:	bf15      	itete	ne
 800c994:	6560      	strne	r0, [r4, #84]	; 0x54
 800c996:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c99a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c99e:	81a3      	strheq	r3, [r4, #12]
 800c9a0:	bf18      	it	ne
 800c9a2:	81a3      	strhne	r3, [r4, #12]
 800c9a4:	bd10      	pop	{r4, pc}

0800c9a6 <__sclose>:
 800c9a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9aa:	f000 b813 	b.w	800c9d4 <_close_r>
	...

0800c9b0 <_write_r>:
 800c9b0:	b538      	push	{r3, r4, r5, lr}
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	4608      	mov	r0, r1
 800c9b6:	4611      	mov	r1, r2
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	4d05      	ldr	r5, [pc, #20]	; (800c9d0 <_write_r+0x20>)
 800c9bc:	602a      	str	r2, [r5, #0]
 800c9be:	461a      	mov	r2, r3
 800c9c0:	f7f4 fe3a 	bl	8001638 <_write>
 800c9c4:	1c43      	adds	r3, r0, #1
 800c9c6:	d102      	bne.n	800c9ce <_write_r+0x1e>
 800c9c8:	682b      	ldr	r3, [r5, #0]
 800c9ca:	b103      	cbz	r3, 800c9ce <_write_r+0x1e>
 800c9cc:	6023      	str	r3, [r4, #0]
 800c9ce:	bd38      	pop	{r3, r4, r5, pc}
 800c9d0:	200015d0 	.word	0x200015d0

0800c9d4 <_close_r>:
 800c9d4:	b538      	push	{r3, r4, r5, lr}
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	4d05      	ldr	r5, [pc, #20]	; (800c9f0 <_close_r+0x1c>)
 800c9da:	4604      	mov	r4, r0
 800c9dc:	4608      	mov	r0, r1
 800c9de:	602b      	str	r3, [r5, #0]
 800c9e0:	f7f4 fe46 	bl	8001670 <_close>
 800c9e4:	1c43      	adds	r3, r0, #1
 800c9e6:	d102      	bne.n	800c9ee <_close_r+0x1a>
 800c9e8:	682b      	ldr	r3, [r5, #0]
 800c9ea:	b103      	cbz	r3, 800c9ee <_close_r+0x1a>
 800c9ec:	6023      	str	r3, [r4, #0]
 800c9ee:	bd38      	pop	{r3, r4, r5, pc}
 800c9f0:	200015d0 	.word	0x200015d0

0800c9f4 <_fstat_r>:
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	4d06      	ldr	r5, [pc, #24]	; (800ca14 <_fstat_r+0x20>)
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	4608      	mov	r0, r1
 800c9fe:	4611      	mov	r1, r2
 800ca00:	602b      	str	r3, [r5, #0]
 800ca02:	f7f4 fe40 	bl	8001686 <_fstat>
 800ca06:	1c43      	adds	r3, r0, #1
 800ca08:	d102      	bne.n	800ca10 <_fstat_r+0x1c>
 800ca0a:	682b      	ldr	r3, [r5, #0]
 800ca0c:	b103      	cbz	r3, 800ca10 <_fstat_r+0x1c>
 800ca0e:	6023      	str	r3, [r4, #0]
 800ca10:	bd38      	pop	{r3, r4, r5, pc}
 800ca12:	bf00      	nop
 800ca14:	200015d0 	.word	0x200015d0

0800ca18 <_isatty_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	4d05      	ldr	r5, [pc, #20]	; (800ca34 <_isatty_r+0x1c>)
 800ca1e:	4604      	mov	r4, r0
 800ca20:	4608      	mov	r0, r1
 800ca22:	602b      	str	r3, [r5, #0]
 800ca24:	f7f4 fe3e 	bl	80016a4 <_isatty>
 800ca28:	1c43      	adds	r3, r0, #1
 800ca2a:	d102      	bne.n	800ca32 <_isatty_r+0x1a>
 800ca2c:	682b      	ldr	r3, [r5, #0]
 800ca2e:	b103      	cbz	r3, 800ca32 <_isatty_r+0x1a>
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	bd38      	pop	{r3, r4, r5, pc}
 800ca34:	200015d0 	.word	0x200015d0

0800ca38 <_lseek_r>:
 800ca38:	b538      	push	{r3, r4, r5, lr}
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	4608      	mov	r0, r1
 800ca3e:	4611      	mov	r1, r2
 800ca40:	2200      	movs	r2, #0
 800ca42:	4d05      	ldr	r5, [pc, #20]	; (800ca58 <_lseek_r+0x20>)
 800ca44:	602a      	str	r2, [r5, #0]
 800ca46:	461a      	mov	r2, r3
 800ca48:	f7f4 fe36 	bl	80016b8 <_lseek>
 800ca4c:	1c43      	adds	r3, r0, #1
 800ca4e:	d102      	bne.n	800ca56 <_lseek_r+0x1e>
 800ca50:	682b      	ldr	r3, [r5, #0]
 800ca52:	b103      	cbz	r3, 800ca56 <_lseek_r+0x1e>
 800ca54:	6023      	str	r3, [r4, #0]
 800ca56:	bd38      	pop	{r3, r4, r5, pc}
 800ca58:	200015d0 	.word	0x200015d0

0800ca5c <_read_r>:
 800ca5c:	b538      	push	{r3, r4, r5, lr}
 800ca5e:	4604      	mov	r4, r0
 800ca60:	4608      	mov	r0, r1
 800ca62:	4611      	mov	r1, r2
 800ca64:	2200      	movs	r2, #0
 800ca66:	4d05      	ldr	r5, [pc, #20]	; (800ca7c <_read_r+0x20>)
 800ca68:	602a      	str	r2, [r5, #0]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	f7f4 fdc7 	bl	80015fe <_read>
 800ca70:	1c43      	adds	r3, r0, #1
 800ca72:	d102      	bne.n	800ca7a <_read_r+0x1e>
 800ca74:	682b      	ldr	r3, [r5, #0]
 800ca76:	b103      	cbz	r3, 800ca7a <_read_r+0x1e>
 800ca78:	6023      	str	r3, [r4, #0]
 800ca7a:	bd38      	pop	{r3, r4, r5, pc}
 800ca7c:	200015d0 	.word	0x200015d0

0800ca80 <_init>:
 800ca80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca82:	bf00      	nop
 800ca84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca86:	bc08      	pop	{r3}
 800ca88:	469e      	mov	lr, r3
 800ca8a:	4770      	bx	lr

0800ca8c <_fini>:
 800ca8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8e:	bf00      	nop
 800ca90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca92:	bc08      	pop	{r3}
 800ca94:	469e      	mov	lr, r3
 800ca96:	4770      	bx	lr
